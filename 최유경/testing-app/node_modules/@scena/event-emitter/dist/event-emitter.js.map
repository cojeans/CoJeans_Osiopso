{"version":3,"file":"event-emitter.js","sources":["../src/EventEmitter.ts","../src/index.umd.ts"],"sourcesContent":["import { findIndex, isObject } from \"@daybrush/utils\";\nimport { EventListener, EventHash, EventInfo, EventOptions, OnEvent, TargetParam } from \"./types\";\n\n/**\n * Implement EventEmitter on object or component.\n */\nclass EventEmitter<Events extends {} = { [key: string]: { [key: string]: any } }> {\n\n    private _events: {\n        [name: string]: EventInfo[],\n    } = {};\n    public on<Name extends keyof Events, Param = Events[Name]>(\n        eventName: Name, listener: EventListener<Param, this>): this;\n    public on(events: EventHash<Events, this>): this;\n    /**\n     * Add a listener to the registered event.\n     * @param - Name of the event to be added\n     * @param - listener function of the event to be added\n     * @example\n     * import EventEmitter from \"@scena/event-emitter\";\n     * cosnt emitter = new EventEmitter();\n     *\n     * // Add listener in \"a\" event\n     * emitter.on(\"a\", () => {\n     * });\n     * // Add listeners\n     * emitter.on({\n     *  a: () => {},\n     *  b: () => {},\n     * });\n     */\n    public on(eventName: string | object, listener?: EventListener<Events[any], this>): this {\n        if (isObject(eventName)) {\n            for (const name in eventName) {\n                this.on<any>(name, eventName[name]);\n            }\n        } else {\n            this._addEvent(eventName, listener, {});\n        }\n        return this;\n    }\n    public off<Name extends keyof Events, Param = Events[Name]>(\n        eventName?: Name, listener?: EventListener<Param, this>): this;\n    public off(events: EventHash<Events, this>): this;\n    /**\n     * Remove listeners registered in the event target.\n     * @param - Name of the event to be removed\n     * @param - listener function of the event to be removed\n     * @example\n     * import EventEmitter from \"@scena/event-emitter\";\n     * cosnt emitter = new EventEmitter();\n     *\n     * // Remove all listeners.\n     * emitter.off();\n     *\n     * // Remove all listeners in \"A\" event.\n     * emitter.off(\"a\");\n     *\n     *\n     * // Remove \"listener\" listener in \"a\" event.\n     * emitter.off(\"a\", listener);\n     */\n    public off(eventName?: string | object, listener?: EventListener<Events[any], this>): this {\n        if (!eventName) {\n            this._events = {};\n        } else if(isObject(eventName)) {\n            for (const name in eventName) {\n                this.off<any>(name);\n            }\n        } else if (!listener) {\n            this._events[eventName] = [];\n        } else {\n            const events = this._events[eventName];\n\n            if (events) {\n                const index = findIndex(events, e => e.listener === listener);\n\n                if (index > -1) {\n                    events.splice(index, 1);\n                }\n            }\n        }\n        return this;\n    }\n    /**\n     * Add a disposable listener and Use promise to the registered event.\n     * @param - Name of the event to be added\n     * @param - disposable listener function of the event to be added\n     * @example\n     * import EventEmitter from \"@scena/event-emitter\";\n     * cosnt emitter = new EventEmitter();\n     *\n     * // Add a disposable listener in \"a\" event\n     * emitter.once(\"a\", () => {\n     * });\n     *\n     * // Use Promise\n     * emitter.once(\"a\").then(e => {\n     * });\n     */\n    public once<Name extends keyof Events & string, Param = Events[Name]>(\n        eventName: Name, listener?: EventListener<Param, this>): Promise<OnEvent<Param, this>> {\n        if (listener) {\n            this._addEvent(eventName, listener, { once: true });\n        }\n        return new Promise<OnEvent<Param, this>>(resolve => {\n            this._addEvent(eventName, resolve, { once: true });\n        });\n    }\n    public emit<Name extends keyof Events, Param = Events[Name]>(\n        eventName: {} extends Param ? Name : never): boolean;\n    public emit<Name extends keyof Events, Param = Events[Name]>(\n        eventName: Name, param: TargetParam<Param>): boolean;\n    /**\n     * Fires an event to call listeners.\n     * @param - Event name\n     * @param - Event parameter\n     * @return If false, stop the event.\n     * @example\n     *\n     * import EventEmitter from \"@scena/event-emitter\";\n     *\n     *\n     * const emitter = new EventEmitter();\n     *\n     * emitter.on(\"a\", e => {\n     * });\n     *\n     *\n     * emitter.emit(\"a\", {\n     *   a: 1,\n     * });\n     */\n    public emit(eventName: string, param: TargetParam<any> = {}): boolean {\n        const events = this._events[eventName];\n\n        if (!eventName || !events) {\n            return true;\n        }\n        let isStop = false;\n\n        param.eventType = eventName;\n        param.stop = () => {\n            isStop = true;\n        };\n        param.currentTarget = this;\n\n\n        [...events].forEach(info => {\n            info.listener(param);\n            if (info.once) {\n                this.off<any>(eventName, info.listener);\n            }\n        });\n\n        return !isStop;\n    }\n    public trigger<Name extends keyof Events, Param = Events[Name]>(eventName: {} extends TargetParam<Param> ? Name : never): boolean;\n    public trigger<Name extends keyof Events, Param = Events[Name]>(eventName: Name, param: TargetParam<Param>): boolean;\n    /**\n     * Fires an event to call listeners.\n     * @param - Event name\n     * @param - Event parameter\n     * @return If false, stop the event.\n     * @example\n     *\n     * import EventEmitter from \"@scena/event-emitter\";\n     *\n     *\n     * const emitter = new EventEmitter();\n     *\n     * emitter.on(\"a\", e => {\n     * });\n     *\n     *\n     * emitter.emit(\"a\", {\n     *   a: 1,\n     * });\n     *//**\n     * Fires an event to call listeners.\n     * @param - Event name\n     * @param - Event parameter\n     * @return If false, stop the event.\n     * @example\n     *\n     * import EventEmitter from \"@scena/event-emitter\";\n     *\n     *\n     * const emitter = new EventEmitter();\n     *\n     * emitter.on(\"a\", e => {\n     * });\n     *\n     * // emit\n     * emitter.trigger(\"a\", {\n     *   a: 1,\n     * });\n     */\n    public trigger<Name extends keyof Events>(eventName: Name, param: TargetParam<any>= {}): boolean {\n        return this.emit<any>(eventName, param);\n    }\n\n    private _addEvent(eventName: string, listener: EventListener<Events[any], this>, options: Partial<EventOptions>) {\n        const events = this._events;\n\n        events[eventName] = events[eventName] || [];\n\n        const listeners = events[eventName];\n\n        listeners.push({ listener, ...options });\n    }\n}\n\nexport default EventEmitter;\n","import EventEmitter, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (EventEmitter as any)[name] = modules[name];\n}\n\nexport default EventEmitter;\n"],"names":["eventName","listener","isObject","name","on","_addEvent","_events","off","events","index","findIndex","e","splice","once","Promise","resolve","_this","param","isStop","eventType","stop","currentTarget","__spreadArrays","forEach","info","emit","options","listeners","push","modules","EventEmitter"],"mappings":"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"}