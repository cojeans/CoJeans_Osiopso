{"version":3,"file":"event-emitter.min.js","sources":["../src/index.umd.ts","../src/EventEmitter.ts"],"sourcesContent":["import EventEmitter, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (EventEmitter as any)[name] = modules[name];\n}\n\nexport default EventEmitter;\n","import { findIndex, isObject } from \"@daybrush/utils\";\nimport { EventListener, EventHash, EventInfo, EventOptions, OnEvent, TargetParam } from \"./types\";\n\n/**\n * Implement EventEmitter on object or component.\n */\nclass EventEmitter<Events extends {} = { [key: string]: { [key: string]: any } }> {\n\n    private _events: {\n        [name: string]: EventInfo[],\n    } = {};\n    public on<Name extends keyof Events, Param = Events[Name]>(\n        eventName: Name, listener: EventListener<Param, this>): this;\n    public on(events: EventHash<Events, this>): this;\n    /**\n     * Add a listener to the registered event.\n     * @param - Name of the event to be added\n     * @param - listener function of the event to be added\n     * @example\n     * import EventEmitter from \"@scena/event-emitter\";\n     * cosnt emitter = new EventEmitter();\n     *\n     * // Add listener in \"a\" event\n     * emitter.on(\"a\", () => {\n     * });\n     * // Add listeners\n     * emitter.on({\n     *  a: () => {},\n     *  b: () => {},\n     * });\n     */\n    public on(eventName: string | object, listener?: EventListener<Events[any], this>): this {\n        if (isObject(eventName)) {\n            for (const name in eventName) {\n                this.on<any>(name, eventName[name]);\n            }\n        } else {\n            this._addEvent(eventName, listener, {});\n        }\n        return this;\n    }\n    public off<Name extends keyof Events, Param = Events[Name]>(\n        eventName?: Name, listener?: EventListener<Param, this>): this;\n    public off(events: EventHash<Events, this>): this;\n    /**\n     * Remove listeners registered in the event target.\n     * @param - Name of the event to be removed\n     * @param - listener function of the event to be removed\n     * @example\n     * import EventEmitter from \"@scena/event-emitter\";\n     * cosnt emitter = new EventEmitter();\n     *\n     * // Remove all listeners.\n     * emitter.off();\n     *\n     * // Remove all listeners in \"A\" event.\n     * emitter.off(\"a\");\n     *\n     *\n     * // Remove \"listener\" listener in \"a\" event.\n     * emitter.off(\"a\", listener);\n     */\n    public off(eventName?: string | object, listener?: EventListener<Events[any], this>): this {\n        if (!eventName) {\n            this._events = {};\n        } else if(isObject(eventName)) {\n            for (const name in eventName) {\n                this.off<any>(name);\n            }\n        } else if (!listener) {\n            this._events[eventName] = [];\n        } else {\n            const events = this._events[eventName];\n\n            if (events) {\n                const index = findIndex(events, e => e.listener === listener);\n\n                if (index > -1) {\n                    events.splice(index, 1);\n                }\n            }\n        }\n        return this;\n    }\n    /**\n     * Add a disposable listener and Use promise to the registered event.\n     * @param - Name of the event to be added\n     * @param - disposable listener function of the event to be added\n     * @example\n     * import EventEmitter from \"@scena/event-emitter\";\n     * cosnt emitter = new EventEmitter();\n     *\n     * // Add a disposable listener in \"a\" event\n     * emitter.once(\"a\", () => {\n     * });\n     *\n     * // Use Promise\n     * emitter.once(\"a\").then(e => {\n     * });\n     */\n    public once<Name extends keyof Events & string, Param = Events[Name]>(\n        eventName: Name, listener?: EventListener<Param, this>): Promise<OnEvent<Param, this>> {\n        if (listener) {\n            this._addEvent(eventName, listener, { once: true });\n        }\n        return new Promise<OnEvent<Param, this>>(resolve => {\n            this._addEvent(eventName, resolve, { once: true });\n        });\n    }\n    public emit<Name extends keyof Events, Param = Events[Name]>(\n        eventName: {} extends Param ? Name : never): boolean;\n    public emit<Name extends keyof Events, Param = Events[Name]>(\n        eventName: Name, param: TargetParam<Param>): boolean;\n    /**\n     * Fires an event to call listeners.\n     * @param - Event name\n     * @param - Event parameter\n     * @return If false, stop the event.\n     * @example\n     *\n     * import EventEmitter from \"@scena/event-emitter\";\n     *\n     *\n     * const emitter = new EventEmitter();\n     *\n     * emitter.on(\"a\", e => {\n     * });\n     *\n     *\n     * emitter.emit(\"a\", {\n     *   a: 1,\n     * });\n     */\n    public emit(eventName: string, param: TargetParam<any> = {}): boolean {\n        const events = this._events[eventName];\n\n        if (!eventName || !events) {\n            return true;\n        }\n        let isStop = false;\n\n        param.eventType = eventName;\n        param.stop = () => {\n            isStop = true;\n        };\n        param.currentTarget = this;\n\n\n        [...events].forEach(info => {\n            info.listener(param);\n            if (info.once) {\n                this.off<any>(eventName, info.listener);\n            }\n        });\n\n        return !isStop;\n    }\n    public trigger<Name extends keyof Events, Param = Events[Name]>(eventName: {} extends TargetParam<Param> ? Name : never): boolean;\n    public trigger<Name extends keyof Events, Param = Events[Name]>(eventName: Name, param: TargetParam<Param>): boolean;\n    /**\n     * Fires an event to call listeners.\n     * @param - Event name\n     * @param - Event parameter\n     * @return If false, stop the event.\n     * @example\n     *\n     * import EventEmitter from \"@scena/event-emitter\";\n     *\n     *\n     * const emitter = new EventEmitter();\n     *\n     * emitter.on(\"a\", e => {\n     * });\n     *\n     *\n     * emitter.emit(\"a\", {\n     *   a: 1,\n     * });\n     *//**\n     * Fires an event to call listeners.\n     * @param - Event name\n     * @param - Event parameter\n     * @return If false, stop the event.\n     * @example\n     *\n     * import EventEmitter from \"@scena/event-emitter\";\n     *\n     *\n     * const emitter = new EventEmitter();\n     *\n     * emitter.on(\"a\", e => {\n     * });\n     *\n     * // emit\n     * emitter.trigger(\"a\", {\n     *   a: 1,\n     * });\n     */\n    public trigger<Name extends keyof Events>(eventName: Name, param: TargetParam<any>= {}): boolean {\n        return this.emit<any>(eventName, param);\n    }\n\n    private _addEvent(eventName: string, listener: EventListener<Events[any], this>, options: Partial<EventOptions>) {\n        const events = this._events;\n\n        events[eventName] = events[eventName] || [];\n\n        const listeners = events[eventName];\n\n        listeners.push({ listener, ...options });\n    }\n}\n\nexport default EventEmitter;\n"],"names":["name","eventName","listener","isObject","on","_addEvent","this","off","events","index","_events","findIndex","e","splice","once","Promise","resolve","_this","param","isStop","eventType","stop","currentTarget","__spreadArrays","forEach","info","emit","options","push","modules","EventEmitter"],"mappings":";;;;;;;;8eAEWA,yCCQH,iCAqBJ,SAAUC,EAA4BC,MAC9BC,EAASF,OACJ,IAAMD,KAAQC,OACVG,GAAQJ,EAAMC,EAAUD,cAG5BK,UAAUJ,EAAWC,EAAU,WAEjCI,YAuBX,SAAWL,EAA6BC,MAC/BD,EAEE,GAAGE,EAASF,OACV,IAAMD,KAAQC,OACVM,IAASP,OAEf,CAAA,IAGGQ,EAGIC,EANFP,IAGFM,EAASF,KAAKI,QAAQT,MAKX,GAFPQ,qGAAQE,CAAUH,EAAQ,SAAAI,UAAKA,EAAEV,WAAaA,MAGhDM,EAAOK,OAAOJ,EAAO,QARxBC,QAAQT,GAAa,aANrBS,QAAU,UAkBZJ,aAkBX,SACIL,EAAiBC,qBACbA,QACKG,UAAUJ,EAAWC,EAAU,CAAEY,MAAM,IAEzC,IAAIC,QAA8B,SAAAC,GACrCC,EAAKZ,UAAUJ,EAAWe,EAAS,CAAEF,MAAM,cA2BnD,SAAYb,EAAmBiB,2BAAAA,UACrBV,EAASF,KAAKI,QAAQT,OAEvBA,IAAcO,SACR,MAEPW,GAAS,SAEbD,EAAME,UAAYnB,EAClBiB,EAAMG,KAAO,WACTF,GAAS,GAEbD,EAAMI,cAAgBhB,0LAGtBiB,CAAIf,GAAQgB,QAAQ,SAAAC,GAChBA,EAAKvB,SAASgB,GACVO,EAAKX,MACLG,EAAKV,IAASN,EAAWwB,EAAKvB,aAI9BiB,aA2CZ,SAA0ClB,EAAiBiB,uBAAAA,MAChDZ,KAAKoB,KAAUzB,EAAWiB,gBAGrC,SAAkBjB,EAAmBC,EAA4CyB,OACvEnB,EAASF,KAAKI,QAEpBF,EAAOP,GAAaO,EAAOP,IAAc,GAEvBO,EAAOP,GAEf2B,QAAO1B,YAAayB,uCD/MtC,IAAW3B,KAAQ6B,EACdC,EAAqB9B,GAAQ6B,EAAQ7B"}