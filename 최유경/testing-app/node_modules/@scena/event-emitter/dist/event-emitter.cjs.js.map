{"version":3,"file":"event-emitter.cjs.js","sources":["../src/EventEmitter.ts","../src/index.umd.ts"],"sourcesContent":["import { findIndex, isObject } from \"@daybrush/utils\";\nimport { EventListener, EventHash, EventInfo, EventOptions, OnEvent, TargetParam } from \"./types\";\n\n/**\n * Implement EventEmitter on object or component.\n */\nclass EventEmitter<Events extends {} = { [key: string]: { [key: string]: any } }> {\n\n    private _events: {\n        [name: string]: EventInfo[],\n    } = {};\n    public on<Name extends keyof Events, Param = Events[Name]>(\n        eventName: Name, listener: EventListener<Param, this>): this;\n    public on(events: EventHash<Events, this>): this;\n    /**\n     * Add a listener to the registered event.\n     * @param - Name of the event to be added\n     * @param - listener function of the event to be added\n     * @example\n     * import EventEmitter from \"@scena/event-emitter\";\n     * cosnt emitter = new EventEmitter();\n     *\n     * // Add listener in \"a\" event\n     * emitter.on(\"a\", () => {\n     * });\n     * // Add listeners\n     * emitter.on({\n     *  a: () => {},\n     *  b: () => {},\n     * });\n     */\n    public on(eventName: string | object, listener?: EventListener<Events[any], this>): this {\n        if (isObject(eventName)) {\n            for (const name in eventName) {\n                this.on<any>(name, eventName[name]);\n            }\n        } else {\n            this._addEvent(eventName, listener, {});\n        }\n        return this;\n    }\n    public off<Name extends keyof Events, Param = Events[Name]>(\n        eventName?: Name, listener?: EventListener<Param, this>): this;\n    public off(events: EventHash<Events, this>): this;\n    /**\n     * Remove listeners registered in the event target.\n     * @param - Name of the event to be removed\n     * @param - listener function of the event to be removed\n     * @example\n     * import EventEmitter from \"@scena/event-emitter\";\n     * cosnt emitter = new EventEmitter();\n     *\n     * // Remove all listeners.\n     * emitter.off();\n     *\n     * // Remove all listeners in \"A\" event.\n     * emitter.off(\"a\");\n     *\n     *\n     * // Remove \"listener\" listener in \"a\" event.\n     * emitter.off(\"a\", listener);\n     */\n    public off(eventName?: string | object, listener?: EventListener<Events[any], this>): this {\n        if (!eventName) {\n            this._events = {};\n        } else if(isObject(eventName)) {\n            for (const name in eventName) {\n                this.off<any>(name);\n            }\n        } else if (!listener) {\n            this._events[eventName] = [];\n        } else {\n            const events = this._events[eventName];\n\n            if (events) {\n                const index = findIndex(events, e => e.listener === listener);\n\n                if (index > -1) {\n                    events.splice(index, 1);\n                }\n            }\n        }\n        return this;\n    }\n    /**\n     * Add a disposable listener and Use promise to the registered event.\n     * @param - Name of the event to be added\n     * @param - disposable listener function of the event to be added\n     * @example\n     * import EventEmitter from \"@scena/event-emitter\";\n     * cosnt emitter = new EventEmitter();\n     *\n     * // Add a disposable listener in \"a\" event\n     * emitter.once(\"a\", () => {\n     * });\n     *\n     * // Use Promise\n     * emitter.once(\"a\").then(e => {\n     * });\n     */\n    public once<Name extends keyof Events & string, Param = Events[Name]>(\n        eventName: Name, listener?: EventListener<Param, this>): Promise<OnEvent<Param, this>> {\n        if (listener) {\n            this._addEvent(eventName, listener, { once: true });\n        }\n        return new Promise<OnEvent<Param, this>>(resolve => {\n            this._addEvent(eventName, resolve, { once: true });\n        });\n    }\n    public emit<Name extends keyof Events, Param = Events[Name]>(\n        eventName: {} extends Param ? Name : never): boolean;\n    public emit<Name extends keyof Events, Param = Events[Name]>(\n        eventName: Name, param: TargetParam<Param>): boolean;\n    /**\n     * Fires an event to call listeners.\n     * @param - Event name\n     * @param - Event parameter\n     * @return If false, stop the event.\n     * @example\n     *\n     * import EventEmitter from \"@scena/event-emitter\";\n     *\n     *\n     * const emitter = new EventEmitter();\n     *\n     * emitter.on(\"a\", e => {\n     * });\n     *\n     *\n     * emitter.emit(\"a\", {\n     *   a: 1,\n     * });\n     */\n    public emit(eventName: string, param: TargetParam<any> = {}): boolean {\n        const events = this._events[eventName];\n\n        if (!eventName || !events) {\n            return true;\n        }\n        let isStop = false;\n\n        param.eventType = eventName;\n        param.stop = () => {\n            isStop = true;\n        };\n        param.currentTarget = this;\n\n\n        [...events].forEach(info => {\n            info.listener(param);\n            if (info.once) {\n                this.off<any>(eventName, info.listener);\n            }\n        });\n\n        return !isStop;\n    }\n    public trigger<Name extends keyof Events, Param = Events[Name]>(eventName: {} extends TargetParam<Param> ? Name : never): boolean;\n    public trigger<Name extends keyof Events, Param = Events[Name]>(eventName: Name, param: TargetParam<Param>): boolean;\n    /**\n     * Fires an event to call listeners.\n     * @param - Event name\n     * @param - Event parameter\n     * @return If false, stop the event.\n     * @example\n     *\n     * import EventEmitter from \"@scena/event-emitter\";\n     *\n     *\n     * const emitter = new EventEmitter();\n     *\n     * emitter.on(\"a\", e => {\n     * });\n     *\n     *\n     * emitter.emit(\"a\", {\n     *   a: 1,\n     * });\n     *//**\n     * Fires an event to call listeners.\n     * @param - Event name\n     * @param - Event parameter\n     * @return If false, stop the event.\n     * @example\n     *\n     * import EventEmitter from \"@scena/event-emitter\";\n     *\n     *\n     * const emitter = new EventEmitter();\n     *\n     * emitter.on(\"a\", e => {\n     * });\n     *\n     * // emit\n     * emitter.trigger(\"a\", {\n     *   a: 1,\n     * });\n     */\n    public trigger<Name extends keyof Events>(eventName: Name, param: TargetParam<any>= {}): boolean {\n        return this.emit<any>(eventName, param);\n    }\n\n    private _addEvent(eventName: string, listener: EventListener<Events[any], this>, options: Partial<EventOptions>) {\n        const events = this._events;\n\n        events[eventName] = events[eventName] || [];\n\n        const listeners = events[eventName];\n\n        listeners.push({ listener, ...options });\n    }\n}\n\nexport default EventEmitter;\n","import EventEmitter, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (EventEmitter as any)[name] = modules[name];\n}\n\nexport default EventEmitter;\n"],"names":["eventName","listener","isObject","name","on","_addEvent","_events","off","events","index","findIndex","e","splice","once","Promise","resolve","_this","param","isStop","eventType","stop","currentTarget","__spreadArrays","forEach","info","emit","options","listeners","push","modules","EventEmitter"],"mappings":"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"}