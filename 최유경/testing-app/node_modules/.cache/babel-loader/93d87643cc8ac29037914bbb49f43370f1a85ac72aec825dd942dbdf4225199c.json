{"ast":null,"code":"/*\nCopyright (c) 2020 Daybrush\nname: @scena/matrix\nlicense: MIT\nauthor: Daybrush\nrepository: git+https://github.com/daybrush/matrix\nversion: 1.1.1\n*/\nimport { throttle, TINY_NUM, average } from '@daybrush/utils';\nfunction add(matrix, inverseMatrix, startIndex, fromIndex, n, k) {\n  for (var i = 0; i < n; ++i) {\n    var x = startIndex + i * n;\n    var fromX = fromIndex + i * n;\n    matrix[x] += matrix[fromX] * k;\n    inverseMatrix[x] += inverseMatrix[fromX] * k;\n  }\n}\nfunction swap(matrix, inverseMatrix, startIndex, fromIndex, n) {\n  for (var i = 0; i < n; ++i) {\n    var x = startIndex + i * n;\n    var fromX = fromIndex + i * n;\n    var v = matrix[x];\n    var iv = inverseMatrix[x];\n    matrix[x] = matrix[fromX];\n    matrix[fromX] = v;\n    inverseMatrix[x] = inverseMatrix[fromX];\n    inverseMatrix[fromX] = iv;\n  }\n}\nfunction divide(matrix, inverseMatrix, startIndex, n, k) {\n  for (var i = 0; i < n; ++i) {\n    var x = startIndex + i * n;\n    matrix[x] /= k;\n    inverseMatrix[x] /= k;\n  }\n}\n/**\n *\n * @namespace Matrix\n */\n\n/**\n * @memberof Matrix\n */\n\nfunction ignoreDimension(matrix, m, n) {\n  if (n === void 0) {\n    n = Math.sqrt(matrix.length);\n  }\n  var newMatrix = matrix.slice();\n  for (var i = 0; i < n; ++i) {\n    newMatrix[i * n + m - 1] = 0;\n    newMatrix[(m - 1) * n + i] = 0;\n  }\n  newMatrix[(m - 1) * (n + 1)] = 1;\n  return newMatrix;\n}\n/**\n * @memberof Matrix\n */\n\nfunction invert(matrix, n) {\n  if (n === void 0) {\n    n = Math.sqrt(matrix.length);\n  }\n  var newMatrix = matrix.slice();\n  var inverseMatrix = createIdentityMatrix(n);\n  for (var i = 0; i < n; ++i) {\n    // diagonal\n    var identityIndex = n * i + i;\n    if (!throttle(newMatrix[identityIndex], TINY_NUM)) {\n      // newMatrix[identityIndex] = 0;\n      for (var j = i + 1; j < n; ++j) {\n        if (newMatrix[n * i + j]) {\n          swap(newMatrix, inverseMatrix, i, j, n);\n          break;\n        }\n      }\n    }\n    if (!throttle(newMatrix[identityIndex], TINY_NUM)) {\n      // no inverse matrix\n      return [];\n    }\n    divide(newMatrix, inverseMatrix, i, n, newMatrix[identityIndex]);\n    for (var j = 0; j < n; ++j) {\n      var targetStartIndex = j;\n      var targetIndex = j + i * n;\n      var target = newMatrix[targetIndex];\n      if (!throttle(target, TINY_NUM) || i === j) {\n        continue;\n      }\n      add(newMatrix, inverseMatrix, targetStartIndex, i, n, -target);\n    }\n  }\n  return inverseMatrix;\n}\n/**\n * @memberof Matrix\n */\n\nfunction transpose(matrix, n) {\n  if (n === void 0) {\n    n = Math.sqrt(matrix.length);\n  }\n  var newMatrix = [];\n  for (var i = 0; i < n; ++i) {\n    for (var j = 0; j < n; ++j) {\n      newMatrix[j * n + i] = matrix[n * i + j];\n    }\n  }\n  return newMatrix;\n}\n/**\n * @memberof Matrix\n */\n\nfunction getOrigin(matrix, n) {\n  if (n === void 0) {\n    n = Math.sqrt(matrix.length);\n  }\n  var originMatrix = [];\n  var w = matrix[n * n - 1];\n  for (var i = 0; i < n - 1; ++i) {\n    originMatrix[i] = matrix[n * (n - 1) + i] / w;\n  }\n  originMatrix[n - 1] = 0;\n  return originMatrix;\n}\n/**\n * @memberof Matrix\n */\n\nfunction fromTranslation(pos, n) {\n  var newMatrix = createIdentityMatrix(n);\n  for (var i = 0; i < n - 1; ++i) {\n    newMatrix[n * (n - 1) + i] = pos[i] || 0;\n  }\n  return newMatrix;\n}\n/**\n * @memberof Matrix\n */\n\nfunction convertPositionMatrix(matrix, n) {\n  var newMatrix = matrix.slice();\n  for (var i = matrix.length; i < n - 1; ++i) {\n    newMatrix[i] = 0;\n  }\n  newMatrix[n - 1] = 1;\n  return newMatrix;\n}\n/**\n * @memberof Matrix\n */\n\nfunction convertDimension(matrix, n, m) {\n  if (n === void 0) {\n    n = Math.sqrt(matrix.length);\n  } // n < m\n\n  if (n === m) {\n    return matrix;\n  }\n  var newMatrix = createIdentityMatrix(m);\n  var length = Math.min(n, m);\n  for (var i = 0; i < length - 1; ++i) {\n    for (var j = 0; j < length - 1; ++j) {\n      newMatrix[i * m + j] = matrix[i * n + j];\n    }\n    newMatrix[(i + 1) * m - 1] = matrix[(i + 1) * n - 1];\n    newMatrix[(m - 1) * m + i] = matrix[(n - 1) * n + i];\n  }\n  newMatrix[m * m - 1] = matrix[n * n - 1];\n  return newMatrix;\n}\n/**\n * @memberof Matrix\n */\n\nfunction multiplies(n) {\n  var matrixes = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    matrixes[_i - 1] = arguments[_i];\n  }\n  var m = createIdentityMatrix(n);\n  matrixes.forEach(function (matrix) {\n    m = multiply(m, matrix, n);\n  });\n  return m;\n}\n/**\n * @memberof Matrix\n */\n\nfunction multiply(matrix, matrix2, n) {\n  if (n === void 0) {\n    n = Math.sqrt(matrix.length);\n  }\n  var newMatrix = []; // 1 y: n\n  // 1 x: m\n  // 2 x: m\n  // 2 y: k\n  // n * m X m * k\n\n  var m = matrix.length / n;\n  var k = matrix2.length / m;\n  if (!m) {\n    return matrix2;\n  } else if (!k) {\n    return matrix;\n  }\n  for (var i = 0; i < n; ++i) {\n    for (var j = 0; j < k; ++j) {\n      newMatrix[j * n + i] = 0;\n      for (var l = 0; l < m; ++l) {\n        // m1 x: m(l), y: n(i)\n        // m2 x: k(j):  y: m(l)\n        // nw x: n(i), y: k(j)\n        newMatrix[j * n + i] += matrix[l * n + i] * matrix2[j * m + l];\n      }\n    }\n  } // n * k\n\n  return newMatrix;\n}\n/**\n * @memberof Matrix\n */\n\nfunction plus(pos1, pos2) {\n  var length = Math.min(pos1.length, pos2.length);\n  var nextPos = pos1.slice();\n  for (var i = 0; i < length; ++i) {\n    nextPos[i] = nextPos[i] + pos2[i];\n  }\n  return nextPos;\n}\n/**\n * @memberof Matrix\n */\n\nfunction minus(pos1, pos2) {\n  var length = Math.min(pos1.length, pos2.length);\n  var nextPos = pos1.slice();\n  for (var i = 0; i < length; ++i) {\n    nextPos[i] = nextPos[i] - pos2[i];\n  }\n  return nextPos;\n}\n/**\n * @memberof Matrix\n */\n\nfunction convertCSStoMatrix(a, is2d) {\n  if (is2d === void 0) {\n    is2d = a.length === 6;\n  }\n  if (is2d) {\n    return [a[0], a[1], 0, a[2], a[3], 0, a[4], a[5], 1];\n  }\n  return a;\n}\n/**\n * @memberof Matrix\n */\n\nfunction convertMatrixtoCSS(a, is2d) {\n  if (is2d === void 0) {\n    is2d = a.length === 9;\n  }\n  if (is2d) {\n    return [a[0], a[1], a[3], a[4], a[6], a[7]];\n  }\n  return a;\n}\n/**\n * @memberof Matrix\n */\n\nfunction calculate(matrix, matrix2, n) {\n  if (n === void 0) {\n    n = matrix2.length;\n  }\n  var result = multiply(matrix, matrix2, n);\n  var k = result[n - 1];\n  return result.map(function (v) {\n    return v / k;\n  });\n}\n/**\n * @memberof Matrix\n */\n\nfunction rotateX3d(matrix, rad) {\n  return multiply(matrix, [1, 0, 0, 0, 0, Math.cos(rad), Math.sin(rad), 0, 0, -Math.sin(rad), Math.cos(rad), 0, 0, 0, 0, 1], 4);\n}\n/**\n * @memberof Matrix\n */\n\nfunction rotateY3d(matrix, rad) {\n  return multiply(matrix, [Math.cos(rad), 0, -Math.sin(rad), 0, 0, 1, 0, 0, Math.sin(rad), 0, Math.cos(rad), 0, 0, 0, 0, 1], 4);\n}\n/**\n * @memberof Matrix\n */\n\nfunction rotateZ3d(matrix, rad) {\n  return multiply(matrix, createRotateMatrix(rad, 4));\n}\n/**\n * @memberof Matrix\n */\n\nfunction scale3d(matrix, _a) {\n  var _b = _a[0],\n    sx = _b === void 0 ? 1 : _b,\n    _c = _a[1],\n    sy = _c === void 0 ? 1 : _c,\n    _d = _a[2],\n    sz = _d === void 0 ? 1 : _d;\n  return multiply(matrix, [sx, 0, 0, 0, 0, sy, 0, 0, 0, 0, sz, 0, 0, 0, 0, 1], 4);\n}\n/**\n * @memberof Matrix\n */\n\nfunction rotate(pos, rad) {\n  return calculate(createRotateMatrix(rad, 3), convertPositionMatrix(pos, 3));\n}\n/**\n * @memberof Matrix\n */\n\nfunction translate3d(matrix, _a) {\n  var _b = _a[0],\n    tx = _b === void 0 ? 0 : _b,\n    _c = _a[1],\n    ty = _c === void 0 ? 0 : _c,\n    _d = _a[2],\n    tz = _d === void 0 ? 0 : _d;\n  return multiply(matrix, [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, tx, ty, tz, 1], 4);\n}\n/**\n * @memberof Matrix\n */\n\nfunction matrix3d(matrix1, matrix2) {\n  return multiply(matrix1, matrix2, 4);\n}\n/**\n * @memberof Matrix\n */\n\nfunction createRotateMatrix(rad, n) {\n  var cos = Math.cos(rad);\n  var sin = Math.sin(rad);\n  var m = createIdentityMatrix(n); // cos -sin\n  // sin cos\n\n  m[0] = cos;\n  m[1] = sin;\n  m[n] = -sin;\n  m[n + 1] = cos;\n  return m;\n}\n/**\n * @memberof Matrix\n */\n\nfunction createIdentityMatrix(n) {\n  var length = n * n;\n  var matrix = [];\n  for (var i = 0; i < length; ++i) {\n    matrix[i] = i % (n + 1) ? 0 : 1;\n  }\n  return matrix;\n}\n/**\n * @memberof Matrix\n */\n\nfunction createScaleMatrix(scale, n) {\n  var m = createIdentityMatrix(n);\n  var length = Math.min(scale.length, n - 1);\n  for (var i = 0; i < length; ++i) {\n    m[(n + 1) * i] = scale[i];\n  }\n  return m;\n}\n/**\n * @memberof Matrix\n */\n\nfunction createOriginMatrix(origin, n) {\n  var m = createIdentityMatrix(n);\n  var length = Math.min(origin.length, n - 1);\n  for (var i = 0; i < length; ++i) {\n    m[n * (n - 1) + i] = origin[i];\n  }\n  return m;\n}\n/**\n * @memberof Matrix\n */\n\nfunction createWarpMatrix(pos0, pos1, pos2, pos3, nextPos0, nextPos1, nextPos2, nextPos3) {\n  var x0 = pos0[0],\n    y0 = pos0[1];\n  var x1 = pos1[0],\n    y1 = pos1[1];\n  var x2 = pos2[0],\n    y2 = pos2[1];\n  var x3 = pos3[0],\n    y3 = pos3[1];\n  var u0 = nextPos0[0],\n    v0 = nextPos0[1];\n  var u1 = nextPos1[0],\n    v1 = nextPos1[1];\n  var u2 = nextPos2[0],\n    v2 = nextPos2[1];\n  var u3 = nextPos3[0],\n    v3 = nextPos3[1];\n  var matrix = [x0, 0, x1, 0, x2, 0, x3, 0, y0, 0, y1, 0, y2, 0, y3, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, x0, 0, x1, 0, x2, 0, x3, 0, y0, 0, y1, 0, y2, 0, y3, 0, 1, 0, 1, 0, 1, 0, 1, -u0 * x0, -v0 * x0, -u1 * x1, -v1 * x1, -u2 * x2, -v2 * x2, -u3 * x3, -v3 * x3, -u0 * y0, -v0 * y0, -u1 * y1, -v1 * y1, -u2 * y2, -v2 * y2, -u3 * y3, -v3 * y3];\n  var inverseMatrix = invert(matrix, 8);\n  if (!inverseMatrix.length) {\n    return [];\n  }\n  var h = multiply(inverseMatrix, [u0, v0, u1, v1, u2, v2, u3, v3], 8);\n  h[8] = 1;\n  return convertDimension(transpose(h), 3, 4);\n}\n/**\n * @memberof Matrix\n */\n\nfunction getCenter(points) {\n  return [0, 1].map(function (i) {\n    return average(points.map(function (pos) {\n      return pos[i];\n    }));\n  });\n}\nexport { calculate, convertCSStoMatrix, convertDimension, convertMatrixtoCSS, convertPositionMatrix, createIdentityMatrix, createOriginMatrix, createRotateMatrix, createScaleMatrix, createWarpMatrix, fromTranslation, getCenter, getOrigin, ignoreDimension, invert, matrix3d, minus, multiplies, multiply, plus, rotate, rotateX3d, rotateY3d, rotateZ3d, scale3d, translate3d, transpose };","map":{"version":3,"mappings":"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","names":["add","matrix","inverseMatrix","startIndex","fromIndex","n","k","i","x","fromX","swap","v","iv","divide","ignoreDimension","m","Math","sqrt","length","newMatrix","slice","invert","createIdentityMatrix","identityIndex","throttle","TINY_NUM","j","targetStartIndex","targetIndex","target","transpose","getOrigin","originMatrix","w","fromTranslation","pos","convertPositionMatrix","convertDimension","min","multiplies","matrixes","forEach","multiply","matrix2","l","plus","pos1","pos2","nextPos","minus","convertCSStoMatrix","a","is2d","convertMatrixtoCSS","calculate","result","map","rotateX3d","rad","cos","sin","rotateY3d","rotateZ3d","createRotateMatrix","scale3d","_a","_b","sx","_c","sy","_d","sz","rotate","translate3d","tx","ty","tz","matrix3d","matrix1","createScaleMatrix","scale","createOriginMatrix","origin","createWarpMatrix","pos0","pos3","nextPos0","nextPos1","nextPos2","nextPos3","y0","y1","y2","y3","v0","v1","v2","v3","x0","x1","x2","x3","u0","u1","u2","u3","h","getCenter","points"],"sources":["C:\\Users\\SSAFY\\Desktop\\S08P12C106\\최유경\\testing-app\\node_modules\\@scena\\matrix\\src\\index.ts"],"sourcesContent":["import { average, throttle, TINY_NUM } from \"@daybrush/utils\";\n\nfunction add(\n    matrix: number[],\n    inverseMatrix: number[],\n    startIndex: number,\n    fromIndex: number,\n    n: number,\n    k: number,\n) {\n    for (let i = 0; i < n; ++i) {\n        const x = startIndex + i * n;\n        const fromX = fromIndex + i * n;\n        matrix[x] += matrix[fromX] * k;\n        inverseMatrix[x] += inverseMatrix[fromX] * k;\n    }\n}\n\nfunction swap(\n    matrix: number[],\n    inverseMatrix: number[],\n    startIndex: number,\n    fromIndex: number,\n    n: number,\n) {\n    for (let i = 0; i < n; ++i) {\n        const x = startIndex + i * n;\n        const fromX = fromIndex + i * n;\n        const v = matrix[x];\n        const iv = inverseMatrix[x];\n\n        matrix[x] = matrix[fromX];\n        matrix[fromX] = v;\n\n        inverseMatrix[x] = inverseMatrix[fromX];\n        inverseMatrix[fromX] = iv;\n    }\n}\n\nfunction divide(\n    matrix: number[],\n    inverseMatrix: number[],\n    startIndex: number,\n    n: number,\n    k: number,\n) {\n    for (let i = 0; i < n; ++i) {\n        const x = startIndex + i * n;\n\n        matrix[x] /= k;\n        inverseMatrix[x] /= k;\n    }\n}\n\n/**\n *\n * @namespace Matrix\n */\n/**\n * @memberof Matrix\n */\nexport function ignoreDimension(\n    matrix: number[],\n    m: number,\n    n: number = Math.sqrt(matrix.length),\n) {\n    const newMatrix = matrix.slice();\n\n    for (let i = 0; i < n; ++i) {\n        newMatrix[i * n + m - 1] = 0;\n        newMatrix[(m - 1) * n + i] = 0;\n    }\n    newMatrix[(m - 1) * (n + 1)] = 1;\n\n    return newMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function invert(\n    matrix: number[],\n    n: number = Math.sqrt(matrix.length),\n) {\n    const newMatrix = matrix.slice();\n    const inverseMatrix = createIdentityMatrix(n);\n\n    for (let i = 0; i < n; ++i) {\n        // diagonal\n        const identityIndex = n * i + i;\n\n        if (!throttle(newMatrix[identityIndex], TINY_NUM)) {\n            // newMatrix[identityIndex] = 0;\n            for (let j = i + 1; j < n; ++j) {\n                if (newMatrix[n * i + j]) {\n                    swap(newMatrix, inverseMatrix, i, j, n);\n                    break;\n                }\n            }\n        }\n        if (!throttle(newMatrix[identityIndex], TINY_NUM)) {\n            // no inverse matrix\n            return [];\n        }\n        divide(newMatrix, inverseMatrix, i, n, newMatrix[identityIndex]);\n        for (let j = 0; j < n; ++j) {\n            const targetStartIndex = j;\n            const targetIndex = j + i * n;\n            const target = newMatrix[targetIndex];\n\n            if (!throttle(target, TINY_NUM) || i === j) {\n                continue;\n            }\n            add(newMatrix, inverseMatrix, targetStartIndex, i, n, -target);\n        }\n    }\n\n    return inverseMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function transpose(matrix: number[], n: number = Math.sqrt(matrix.length)) {\n    const newMatrix: number[] = [];\n\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < n; ++j) {\n            newMatrix[j * n + i] = matrix[n * i + j];\n        }\n    }\n    return newMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function getOrigin(matrix: number[], n: number = Math.sqrt(matrix.length)) {\n    const originMatrix: number[] = [];\n    const w = matrix[n * n - 1];\n    for (let i = 0; i < n - 1; ++i) {\n        originMatrix[i] = matrix[n * (n - 1) + i] / w;\n    }\n    originMatrix[n - 1] = 0;\n    return originMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function fromTranslation(pos: number[], n: number) {\n    const newMatrix = createIdentityMatrix(n);\n\n    for (let i = 0; i < n - 1; ++i) {\n        newMatrix[n * (n - 1) + i] = pos[i] || 0;\n    }\n    return newMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function convertPositionMatrix(matrix: number[], n: number) {\n    const newMatrix = matrix.slice();\n\n    for (let i = matrix.length; i < n - 1; ++i) {\n        newMatrix[i] = 0;\n    }\n    newMatrix[n - 1] = 1;\n    return newMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function convertDimension(matrix: number[], n: number = Math.sqrt(matrix.length), m: number) {\n    // n < m\n    if (n === m) {\n        return matrix;\n    }\n    const newMatrix = createIdentityMatrix(m);\n\n    const length = Math.min(n, m);\n    for (let i = 0; i < length - 1; ++i) {\n        for (let j = 0; j < length - 1; ++j) {\n            newMatrix[i * m + j] = matrix[i * n + j];\n        }\n\n        newMatrix[(i + 1) * m - 1] = matrix[(i + 1) * n - 1];\n        newMatrix[(m - 1) * m + i] = matrix[(n - 1) * n + i];\n    }\n    newMatrix[m * m - 1] = matrix[n * n - 1];\n\n    return newMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function multiplies(n: number, ...matrixes: number[][]) {\n    let m: number[] = createIdentityMatrix(n);\n\n    matrixes.forEach(matrix => {\n        m = multiply(m, matrix, n);\n    });\n    return m;\n}\n\n/**\n * @memberof Matrix\n */\nexport function multiply(matrix: number[], matrix2: number[], n: number = Math.sqrt(matrix.length)) {\n    const newMatrix: number[] = [];\n    // 1 y: n\n    // 1 x: m\n    // 2 x: m\n    // 2 y: k\n    // n * m X m * k\n    const m = matrix.length / n;\n    const k = matrix2.length / m;\n\n    if (!m) {\n        return matrix2;\n    } else if (!k) {\n        return matrix;\n    }\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < k; ++j) {\n            newMatrix[j * n + i] = 0;\n            for (let l = 0; l < m; ++l) {\n                // m1 x: m(l), y: n(i)\n                // m2 x: k(j):  y: m(l)\n                // nw x: n(i), y: k(j)\n                newMatrix[j * n + i] += matrix[l * n + i] * matrix2[j * m + l];\n            }\n        }\n    }\n    // n * k\n    return newMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function plus(pos1: number[], pos2: number[]) {\n    const length = Math.min(pos1.length, pos2.length);\n    const nextPos = pos1.slice();\n\n    for (let i = 0; i < length; ++i) {\n        nextPos[i] = nextPos[i] + pos2[i];\n    }\n    return nextPos;\n}\n\n/**\n * @memberof Matrix\n */\nexport function minus(pos1: number[], pos2: number[]) {\n    const length = Math.min(pos1.length, pos2.length);\n    const nextPos = pos1.slice();\n\n    for (let i = 0; i < length; ++i) {\n        nextPos[i] = nextPos[i] - pos2[i];\n    }\n    return nextPos;\n}\n\n/**\n * @memberof Matrix\n */\nexport function convertCSStoMatrix(a: number[], is2d: boolean = a.length === 6) {\n    if (is2d) {\n        return [\n            a[0], a[1], 0,\n            a[2], a[3], 0,\n            a[4], a[5], 1,\n        ];\n    }\n    return a;\n}\n\n/**\n * @memberof Matrix\n */\nexport function convertMatrixtoCSS(a: number[], is2d: boolean = a.length === 9) {\n    if (is2d) {\n        return [\n            a[0], a[1],\n            a[3], a[4],\n            a[6], a[7],\n        ];\n    }\n    return a;\n}\n\n/**\n * @memberof Matrix\n */\nexport function calculate(matrix: number[], matrix2: number[], n: number = matrix2.length) {\n    const result = multiply(matrix, matrix2, n);\n    const k = result[n - 1];\n    return result.map(v => v / k);\n}\n\n/**\n * @memberof Matrix\n */\nexport function rotateX3d(matrix: number[], rad: number) {\n    return multiply(\n        matrix,\n        [\n            1, 0, 0, 0,\n            0, Math.cos(rad), Math.sin(rad), 0,\n            0, -Math.sin(rad), Math.cos(rad), 0,\n            0, 0, 0, 1,\n        ],\n        4,\n    );\n}\n\n/**\n * @memberof Matrix\n */\nexport function rotateY3d(matrix: number[], rad: number) {\n    return multiply(\n        matrix,\n        [\n            Math.cos(rad), 0, -Math.sin(rad), 0,\n            0, 1, 0, 0,\n            Math.sin(rad), 0, Math.cos(rad), 0,\n            0, 0, 0, 1,\n        ],\n        4,\n    );\n}\n\n/**\n * @memberof Matrix\n */\nexport function rotateZ3d(matrix: number[], rad: number) {\n    return multiply(\n        matrix,\n        createRotateMatrix(rad, 4),\n    );\n}\n\n/**\n * @memberof Matrix\n */\nexport function scale3d(matrix: number[], [\n    sx = 1,\n    sy = 1,\n    sz = 1,\n]: number[]) {\n    return multiply(\n        matrix,\n        [\n            sx, 0, 0, 0,\n            0, sy, 0, 0,\n            0, 0, sz, 0,\n            0, 0, 0, 1,\n        ],\n        4,\n    );\n}\n\n/**\n * @memberof Matrix\n */\nexport function rotate(pos: number[], rad: number) {\n    return calculate(\n        createRotateMatrix(rad, 3),\n        convertPositionMatrix(pos, 3),\n    );\n}\n\n/**\n * @memberof Matrix\n */\nexport function translate3d(matrix, [\n    tx = 0,\n    ty = 0,\n    tz = 0,\n]: number[]) {\n    return multiply(\n        matrix,\n        [\n            1, 0, 0, 0,\n            0, 1, 0, 0,\n            0, 0, 1, 0,\n            tx, ty, tz, 1,\n        ],\n        4,\n    );\n}\n/**\n * @memberof Matrix\n */\nexport function matrix3d(matrix1: number[], matrix2: number[]) {\n    return multiply(matrix1, matrix2, 4);\n}\n\n/**\n * @memberof Matrix\n */\nexport function createRotateMatrix(rad: number, n: number) {\n    const cos = Math.cos(rad);\n    const sin = Math.sin(rad);\n    const m = createIdentityMatrix(n);\n\n    // cos -sin\n    // sin cos\n    m[0] = cos;\n    m[1] = sin;\n    m[n] = -sin;\n    m[n + 1] = cos;\n\n    return m;\n}\n\n/**\n * @memberof Matrix\n */\nexport function createIdentityMatrix(n: number) {\n    const length = n * n;\n    const matrix: number[] = [];\n\n    for (let i = 0; i < length; ++i) {\n        matrix[i] = i % (n + 1) ? 0 : 1;\n    }\n    return matrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function createScaleMatrix(scale: number[], n: number) {\n    const m = createIdentityMatrix(n);\n    const length = Math.min(scale.length, n - 1);\n\n    for (let i = 0; i < length; ++i) {\n        m[(n + 1) * i] = scale[i];\n    }\n    return m;\n}\n\n/**\n * @memberof Matrix\n */\nexport function createOriginMatrix(origin: number[], n: number) {\n    const m = createIdentityMatrix(n);\n    const length = Math.min(origin.length, n - 1);\n\n    for (let i = 0; i < length; ++i) {\n        m[n * (n - 1) + i] = origin[i];\n    }\n    return m;\n}\n\n/**\n * @memberof Matrix\n */\nexport function createWarpMatrix(\n    pos0: number[],\n    pos1: number[],\n    pos2: number[],\n    pos3: number[],\n    nextPos0: number[],\n    nextPos1: number[],\n    nextPos2: number[],\n    nextPos3: number[],\n) {\n    const [x0, y0] = pos0;\n    const [x1, y1] = pos1;\n    const [x2, y2] = pos2;\n    const [x3, y3] = pos3;\n\n    const [u0, v0] = nextPos0;\n    const [u1, v1] = nextPos1;\n    const [u2, v2] = nextPos2;\n    const [u3, v3] = nextPos3;\n\n    const matrix = [\n        x0, 0, x1, 0, x2, 0, x3, 0,\n        y0, 0, y1, 0, y2, 0, y3, 0,\n        1, 0, 1, 0, 1, 0, 1, 0,\n        0, x0, 0, x1, 0, x2, 0, x3,\n        0, y0, 0, y1, 0, y2, 0, y3,\n        0, 1, 0, 1, 0, 1, 0, 1,\n        -u0 * x0, -v0 * x0, -u1 * x1, -v1 * x1, -u2 * x2, -v2 * x2, -u3 * x3, -v3 * x3,\n        -u0 * y0, -v0 * y0, -u1 * y1, -v1 * y1, -u2 * y2, -v2 * y2, -u3 * y3, -v3 * y3,\n    ];\n    const inverseMatrix = invert(matrix, 8);\n\n    if (!inverseMatrix.length) {\n        return [];\n    }\n    const h = multiply(inverseMatrix, [u0, v0, u1, v1, u2, v2, u3, v3], 8);\n\n    h[8] = 1;\n    return convertDimension(transpose(h), 3, 4);\n}\n\n/**\n * @memberof Matrix\n */\nexport function getCenter(points: number[][]) {\n    return [0, 1].map(i => average(points.map(pos => pos[i])));\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}