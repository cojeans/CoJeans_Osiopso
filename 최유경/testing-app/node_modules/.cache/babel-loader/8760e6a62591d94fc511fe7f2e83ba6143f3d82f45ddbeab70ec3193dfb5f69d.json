{"ast":null,"code":"/*\nCopyright (c) 2016 Daybrush\nname: scenejs\nlicense: MIT\nauthor: Daybrush\nrepository: https://github.com/daybrush/scenejs.git\nversion: 1.9.4\n*/\nimport { between, isString, splitText, isArray, splitComma, splitSpace, splitBracket, COLOR_MODELS, stringToRGBA, RGBA, OBJECT, ARRAY, PROPERTY, STRING, NUMBER, isObject, IS_WINDOW, $, ANIMATION, removeEvent, addEvent, requestAnimationFrame, cancelAnimationFrame, splitUnit, camelize, getKeys, sortOrders, isUndefined, FILTER, TRANSFORM, decamelize, FUNCTION, dot as dot$1, isFunction, toArray, fromCSS, findIndex, find, KEYFRAMES, addClass, removeClass, hasClass } from '@daybrush/utils';\nimport EventEmitter from '@scena/event-emitter';\nimport { reactive, getObservers, computed, observe, isObserver } from '@cfcs/core';\nimport OrderMap from 'order-map';\nimport styled from 'css-styled';\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n  };\n  return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nfunction __decorate(decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nfunction __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\nfunction cubic(y1, y2, t) {\n  var t2 = 1 - t;\n  // Bezier Curve Formula\n  return t * t * t + 3 * t * t * t2 * y2 + 3 * t * t2 * t2 * y1;\n}\nfunction solveFromX(x1, x2, x) {\n  // x  0 ~ 1\n  // t 0 ~ 1\n  var t = x;\n  var solveX = x;\n  var dx = 1;\n  while (Math.abs(dx) > 1 / 1000) {\n    // 예상 t초에 의한 _x값\n    solveX = cubic(x1, x2, t);\n    dx = solveX - x;\n    // 차이가 미세하면 그 값을 t로 지정\n    if (Math.abs(dx) < 1 / 1000) {\n      return t;\n    }\n    t -= dx / 2;\n  }\n  return t;\n}\n/**\n * @namespace easing\n */\n/**\n* Cubic Bezier curve.\n* @memberof easing\n* @func bezier\n* @param {number} [x1] - point1's x\n* @param {number} [y1] - point1's y\n* @param {number} [x2] - point2's x\n* @param {number} [y2] - point2's y\n* @return {function} the curve function\n* @example\nimport {bezier} from \"scenejs\";\nScene.bezier(0, 0, 1, 1) // LINEAR\nScene.bezier(0.25, 0.1, 0.25, 1) // EASE\n*/\nfunction bezier(x1, y1, x2, y2) {\n  /*\n        x = f(t)\n        calculate inverse function by x\n        t = f-1(x)\n    */\n  var func = function (x) {\n    var t = solveFromX(x1, x2, between(x, 0, 1));\n    return cubic(y1, y2, t);\n  };\n  func.easingName = \"cubic-bezier(\".concat(x1, \",\").concat(y1, \",\").concat(x2, \",\").concat(y2, \")\");\n  return func;\n}\n/**\n* Specifies a stepping function\n* @see {@link https://www.w3schools.com/cssref/css3_pr_animation-timing-function.asp|CSS3 Timing Function}\n* @memberof easing\n* @func steps\n* @param {number} count - point1's x\n* @param {\"start\" | \"end\"} postion - point1's y\n* @return {function} the curve function\n* @example\nimport {steps} from \"scenejs\";\nScene.steps(1, \"start\") // Scene.STEP_START\nScene.steps(1, \"end\") // Scene.STEP_END\n*/\nfunction steps(count, position) {\n  var func = function (time) {\n    var level = 1 / count;\n    if (time >= 1) {\n      return 1;\n    }\n    return (position === \"start\" ? level : 0) + Math.floor(time / level) * level;\n  };\n  func.easingName = \"steps(\".concat(count, \", \").concat(position, \")\");\n  return func;\n}\n/**\n* Equivalent to steps(1, start)\n* @memberof easing\n* @name STEP_START\n* @static\n* @type {function}\n* @example\nimport {STEP_START} from \"scenejs\";\nScene.STEP_START // steps(1, start)\n*/\nvar STEP_START = /*#__PURE__#*/steps(1, \"start\");\n/**\n* Equivalent to steps(1, end)\n* @memberof easing\n* @name STEP_END\n* @static\n* @type {function}\n* @example\nimport {STEP_END} from \"scenejs\";\nScene.STEP_END // steps(1, end)\n*/\nvar STEP_END = /*#__PURE__#*/steps(1, \"end\");\n/**\n* Linear Speed (0, 0, 1, 1)\n* @memberof easing\n* @name LINEAR\n* @static\n* @type {function}\n* @example\nimport {LINEAR} from \"scenejs\";\nScene.LINEAR\n*/\nvar LINEAR = /*#__PURE__#*/bezier(0, 0, 1, 1);\n/**\n* Ease Speed (0.25, 0.1, 0.25, 1)\n* @memberof easing\n* @name EASE\n* @static\n* @type {function}\n* @example\nimport {EASE} from \"scenejs\";\nScene.EASE\n*/\nvar EASE = /*#__PURE__#*/bezier(0.25, 0.1, 0.25, 1);\n/**\n* Ease In Speed (0.42, 0, 1, 1)\n* @memberof easing\n* @name EASE_IN\n* @static\n* @type {function}\n* @example\nimport {EASE_IN} from \"scenejs\";\nScene.EASE_IN\n*/\nvar EASE_IN = /*#__PURE__#*/bezier(0.42, 0, 1, 1);\n/**\n* Ease Out Speed (0, 0, 0.58, 1)\n* @memberof easing\n* @name EASE_OUT\n* @static\n* @type {function}\n* @example\nimport {EASE_OUT} from \"scenejs\";\nScene.EASE_OUT\n*/\nvar EASE_OUT = /*#__PURE__#*/bezier(0, 0, 0.58, 1);\n/**\n* Ease In Out Speed (0.42, 0, 0.58, 1)\n* @memberof easing\n* @name EASE_IN_OUT\n* @static\n* @type {function}\n* @example\nimport {EASE_IN_OUT} from \"scenejs\";\nScene.EASE_IN_OUT\n*/\nvar EASE_IN_OUT = /*#__PURE__#*/bezier(0.42, 0, 0.58, 1);\nvar _a;\nvar PREFIX = \"__SCENEJS_\";\nvar DATA_SCENE_ID = \"data-scene-id\";\nvar TIMING_FUNCTION = \"animation-timing-function\";\nvar ROLES = {\n  transform: {},\n  filter: {},\n  attribute: {},\n  html: true\n};\nvar ALIAS = {\n  easing: [TIMING_FUNCTION]\n};\nvar FIXED = (_a = {}, _a[TIMING_FUNCTION] = true, _a.contents = true, _a.html = true, _a);\nvar MAXIMUM = 1000000;\nvar THRESHOLD = 0.000001;\nvar DURATION = \"duration\";\nvar FILL_MODE = \"fillMode\";\nvar DIRECTION = \"direction\";\nvar ITERATION_COUNT = \"iterationCount\";\nvar DELAY = \"delay\";\nvar EASING = \"easing\";\nvar PLAY_SPEED = \"playSpeed\";\nvar EASING_NAME = \"easingName\";\nvar ITERATION_TIME = \"iterationTime\";\nvar PAUSED = \"paused\";\nvar ENDED = \"ended\";\nvar TIMEUPDATE = \"timeupdate\";\nvar ANIMATE = \"animate\";\nvar PLAY = \"play\";\nvar RUNNING = \"running\";\nvar ITERATION = \"iteration\";\nvar START_ANIMATION = \"startAnimation\";\nvar PAUSE_ANIMATION = \"pauseAnimation\";\nvar ALTERNATE = \"alternate\";\nvar REVERSE = \"reverse\";\nvar ALTERNATE_REVERSE = \"alternate-reverse\";\nvar NORMAL = \"normal\";\nvar INFINITE = \"infinite\";\nvar PLAY_STATE = \"playState\";\nvar PLAY_CSS = \"playCSS\";\nvar PREV_TIME = \"prevTime\";\nvar TICK_TIME = \"tickTime\";\nvar CURRENT_TIME = \"currentTime\";\nvar SELECTOR = \"selector\";\nvar TRANSFORM_NAME = \"transform\";\nvar EASINGS = {\n  \"linear\": LINEAR,\n  \"ease\": EASE,\n  \"ease-in\": EASE_IN,\n  \"ease-out\": EASE_OUT,\n  \"ease-in-out\": EASE_IN_OUT,\n  \"step-start\": STEP_START,\n  \"step-end\": STEP_END\n};\nvar NAME_SEPARATOR = \"_///_\";\n/**\n* option name list\n* @name Scene.OPTIONS\n* @memberof Scene\n* @static\n* @type {$ts:OptionType}\n* @example\n* Scene.OPTIONS // [\"duration\", \"fillMode\", \"direction\", \"iterationCount\", \"delay\", \"easing\", \"playSpeed\"]\n*/\nvar OPTIONS = [DURATION, FILL_MODE, DIRECTION, ITERATION_COUNT, DELAY, EASING, PLAY_SPEED];\n/**\n* Event name list\n* @name Scene.EVENTS\n* @memberof Scene\n* @static\n* @type {$ts:EventType}\n* @example\n* Scene.EVENTS // [\"paused\", \"ended\", \"timeupdate\", \"animate\", \"play\", \"iteration\"];\n*/\nvar EVENTS = [PAUSED, ENDED, TIMEUPDATE, ANIMATE, PLAY, ITERATION];\n\n/**\n* Make string, array to PropertyObject for the dot product\n*/\nvar PropertyObject = /*#__PURE__*/function () {\n  /**\n    * @param - This value is in the array format.\n    * @param - options\n    * @example\n  var obj = new PropertyObject([100,100,100,0.5], {\n    \"separator\" : \",\",\n    \"prefix\" : \"rgba(\",\n    \"suffix\" : \")\"\n  });\n     */\n  function PropertyObject(value, options) {\n    this.prefix = \"\";\n    this.suffix = \"\";\n    this.model = \"\";\n    this.type = \"\";\n    this.separator = \",\";\n    options && this.setOptions(options);\n    this.value = isString(value) ? value.split(this.separator) : value;\n  }\n  PropertyObject.prototype.setOptions = function (newOptions) {\n    for (var name_1 in newOptions) {\n      this[name_1] = newOptions[name_1];\n    }\n    return this;\n  };\n  /**\n    * the number of values.\n    * @example\n  const obj1 = new PropertyObject(\"1,2,3\", \",\");\n  console.log(obj1.length);\n  // 3\n     */\n  PropertyObject.prototype.size = function () {\n    return this.value.length;\n  };\n  /**\n    * retrieve one of values at the index\n    * @param {Number} index - index\n    * @return {Object} one of values at the index\n    * @example\n  const obj1 = new PropertyObject(\"1,2,3\", \",\");\n  console.log(obj1.get(0));\n  // 1\n     */\n  PropertyObject.prototype.get = function (index) {\n    return this.value[index];\n  };\n  /**\n    * Set the value at that index\n    * @param {Number} index - index\n    * @param {Object} value - text, a number, object to set\n    * @return {PropertyObject} An instance itself\n    * @example\n  const obj1 = new PropertyObject(\"1,2,3\", \",\");\n  obj1.set(0, 2);\n  console.log(obj1.toValue());\n  // 2,2,3\n     */\n  PropertyObject.prototype.set = function (index, value) {\n    this.value[index] = value;\n    return this;\n  };\n  /**\n    * create a copy of an instance itself.\n    * @return {PropertyObject} clone\n    * @example\n  const obj1 = new PropertyObject(\"1,2,3\", \",\");\n  const obj2 = obj1.clone();\n     */\n  PropertyObject.prototype.clone = function () {\n    var _a = this,\n      separator = _a.separator,\n      prefix = _a.prefix,\n      suffix = _a.suffix,\n      model = _a.model,\n      type = _a.type;\n    var arr = this.value.map(function (v) {\n      return isPropertyObject(v) ? v.clone() : v;\n    });\n    return new PropertyObject(arr, {\n      separator: separator,\n      prefix: prefix,\n      suffix: suffix,\n      model: model,\n      type: type\n    });\n  };\n  /**\n    * Make Property Object to String\n    * @return {String} Make Property Object to String\n    * @example\n  //rgba(100, 100, 100, 0.5)\n  const obj4 = new PropertyObject([100,100,100,0.5], {\n    \"separator\" : \",\",\n    \"prefix\" : \"rgba(\",\n    \"suffix\" : \")\",\n  });\n  console.log(obj4.toValue());\n  // \"rgba(100,100,100,0.5)\"\n    */\n  PropertyObject.prototype.toValue = function () {\n    return this.prefix + this.join() + this.suffix;\n  };\n  /**\n    * Make Property Object's array to String\n    * @return {String} Join the elements of an array into a string\n    * @example\n    //rgba(100, 100, 100, 0.5)\n    var obj4 = new PropertyObject([100,100,100,0.5], {\n        \"separator\" : \",\",\n        \"prefix\" : \"rgba(\",\n        \"suffix\" : \")\"\n    });\n    obj4.join();  // =>   \"100,100,100,0.5\"\n     */\n  PropertyObject.prototype.join = function () {\n    return this.value.map(function (v) {\n      return isPropertyObject(v) ? v.toValue() : v;\n    }).join(this.separator);\n  };\n  /**\n    * executes a provided function once per array element.\n    * @param {Function} callback - Function to execute for each element, taking three arguments\n    * @param {All} [callback.currentValue] The current element being processed in the array.\n    * @param {Number} [callback.index] The index of the current element being processed in the array.\n    * @param {Array} [callback.array] the array.\n    * @return {PropertyObject} An instance itself\n    * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach|MDN Array.forEach()} reference to MDN document.\n    * @example\n  //rgba(100, 100, 100, 0.5)\n  var obj4 = new PropertyObject([100,100,100,0.5], {\n    \"separator\" : \",\",\n    \"prefix\" : \"rgba(\",\n    \"suffix\" : \")\"\n  });\n  obj4.forEach(t => {\n    console.log(t);\n  });  // =>   \"100,100,100,0.5\"\n    */\n  PropertyObject.prototype.forEach = function (func) {\n    this.value.forEach(func);\n    return this;\n  };\n  return PropertyObject;\n}();\n\n/**\n* @namespace\n* @name Property\n*/\nfunction splitStyle(str) {\n  var properties = splitText(str, \";\");\n  var obj = {};\n  var totalLength = properties.length;\n  var length = totalLength;\n  for (var i = 0; i < totalLength; ++i) {\n    var matches = splitText(properties[i], \":\");\n    if (matches.length < 2 || !matches[1]) {\n      --length;\n      continue;\n    }\n    obj[matches[0].trim()] = toPropertyObject(matches[1].trim());\n  }\n  return {\n    styles: obj,\n    length: length\n  };\n}\n/**\n* convert array to PropertyObject[type=color].\n* default model \"rgba\"\n* @memberof Property\n* @function arrayToColorObject\n* @param {Array|PropertyObject} value ex) [0, 0, 0, 1]\n* @return {PropertyObject} PropertyObject[type=color]\n* @example\narrayToColorObject([0, 0, 0])\n// => PropertyObject(type=\"color\", model=\"rgba\", value=[0, 0, 0, 1], separator=\",\")\n*/\nfunction arrayToColorObject(arr) {\n  var model = RGBA;\n  if (arr.length === 3) {\n    arr[3] = 1;\n  }\n  return new PropertyObject(arr, {\n    model: model,\n    separator: \",\",\n    type: \"color\",\n    prefix: \"\".concat(model, \"(\"),\n    suffix: \")\"\n  });\n}\n/**\n* convert text with parentheses to object.\n* @memberof Property\n* @function stringToBracketObject\n* @param {String} value ex) \"rgba(0,0,0,1)\"\n* @return {PropertyObject} PropertyObject\n* @example\nstringToBracketObject(\"abcde(0, 0, 0,1)\")\n// => PropertyObject(model=\"abcde\", value=[0, 0, 0,1], separator=\",\")\n*/\nfunction stringToBracketObject(text) {\n  // [prefix, value, other]\n  var _a = splitBracket(text),\n    model = _a.prefix,\n    value = _a.value,\n    afterModel = _a.suffix;\n  if (typeof value === \"undefined\") {\n    return text;\n  }\n  if (COLOR_MODELS.indexOf(model) > -1) {\n    return arrayToColorObject(stringToRGBA(text));\n  }\n  // divide comma(,)\n  var obj = toPropertyObject(value, model);\n  var arr = [value];\n  var separator = \",\";\n  var prefix = \"\".concat(model, \"(\");\n  var suffix = \")\".concat(afterModel);\n  if (isPropertyObject(obj)) {\n    separator = obj.separator;\n    arr = obj.value;\n    prefix += obj.prefix;\n    suffix = obj.suffix + suffix;\n  }\n  return new PropertyObject(arr, {\n    separator: separator,\n    model: model,\n    prefix: prefix,\n    suffix: suffix\n  });\n}\nfunction arrayToPropertyObject(arr, separator) {\n  return new PropertyObject(arr, {\n    type: \"array\",\n    separator: separator\n  });\n}\n/**\n* convert text with parentheses to PropertyObject[type=color].\n* If the values are not RGBA model, change them RGBA mdoel.\n* @memberof Property\n* @function stringToColorObject\n* @param {String|PropertyObject} value ex) \"rgba(0,0,0,1)\"\n* @return {PropertyObject} PropertyObject[type=color]\n* @example\nstringToColorObject(\"rgba(0, 0, 0,1)\")\n// => PropertyObject(type=\"color\", model=\"rgba\", value=[0, 0, 0,1], separator=\",\")\n*/\nfunction stringToColorObject(value) {\n  var result = stringToRGBA(value);\n  return result ? arrayToColorObject(result) : value;\n}\nfunction toPropertyObject(value, model) {\n  if (!isString(value)) {\n    if (isArray(value)) {\n      return arrayToPropertyObject(value, \",\");\n    }\n    return value;\n  }\n  var values = splitComma(value);\n  if (values.length > 1) {\n    return arrayToPropertyObject(values.map(function (v) {\n      return toPropertyObject(v);\n    }), \",\");\n  }\n  values = splitSpace(value);\n  if (values.length > 1) {\n    return arrayToPropertyObject(values.map(function (v) {\n      return toPropertyObject(v);\n    }), \" \");\n  }\n  values = /^(['\"])([^'\"]*)(['\"])$/g.exec(value);\n  if (values && values[1] === values[3]) {\n    // Quotes\n    return new PropertyObject([toPropertyObject(values[2])], {\n      prefix: values[1],\n      suffix: values[1]\n    });\n  } else if (value.indexOf(\"(\") !== -1) {\n    // color\n    return stringToBracketObject(value);\n  } else if (value.charAt(0) === \"#\" && model !== \"url\") {\n    return stringToColorObject(value);\n  }\n  return value;\n}\nfunction toObject(object, result) {\n  if (result === void 0) {\n    result = {};\n  }\n  var model = object.model;\n  if (model) {\n    object.setOptions({\n      model: \"\",\n      suffix: \"\",\n      prefix: \"\"\n    });\n    var value = object.size() > 1 ? object : object.get(0);\n    result[model] = value;\n  } else {\n    object.forEach(function (obj) {\n      toObject(obj, result);\n    });\n  }\n  return result;\n}\nfunction setAlias(name, alias) {\n  ALIAS[name] = alias;\n}\nfunction setRole(names, isProperty, isFixedProperty) {\n  var length = names.length;\n  var roles = ROLES;\n  var fixed = FIXED;\n  for (var i = 0; i < length - 1; ++i) {\n    !roles[names[i]] && (roles[names[i]] = {});\n    roles = roles[names[i]];\n    if (isFixedProperty) {\n      !fixed[names[i]] && (fixed[names[i]] = {});\n      fixed = fixed[names[i]];\n    }\n  }\n  isFixedProperty && (fixed[names[length - 1]] = true);\n  roles[names[length - 1]] = isProperty ? true : {};\n}\nfunction getType(value) {\n  var type = typeof value;\n  if (type === OBJECT) {\n    if (isArray(value)) {\n      return ARRAY;\n    } else if (isPropertyObject(value)) {\n      return PROPERTY;\n    }\n  } else if (type === STRING || type === NUMBER) {\n    return \"value\";\n  }\n  return type;\n}\nfunction isPureObject(obj) {\n  return isObject(obj) && obj.constructor === Object;\n}\nfunction getNames(names, stack) {\n  var arr = [];\n  if (isPureObject(names)) {\n    for (var name_1 in names) {\n      stack.push(name_1);\n      arr = arr.concat(getNames(names[name_1], stack));\n      stack.pop();\n    }\n  } else {\n    arr.push(stack.slice());\n  }\n  return arr;\n}\nfunction updateFrame(names, properties) {\n  for (var name_2 in properties) {\n    var value = properties[name_2];\n    if (!isPureObject(value)) {\n      names[name_2] = true;\n      continue;\n    }\n    if (!isObject(names[name_2])) {\n      names[name_2] = {};\n    }\n    updateFrame(names[name_2], properties[name_2]);\n  }\n  return names;\n}\nfunction toFixed(num) {\n  return Math.round(num * MAXIMUM) / MAXIMUM;\n}\nfunction getValueByNames(names, properties, length) {\n  if (length === void 0) {\n    length = names.length;\n  }\n  var value = properties;\n  for (var i = 0; i < length; ++i) {\n    if (!isObject(value) || value == null) {\n      return undefined;\n    }\n    value = value[names[i]];\n  }\n  return value;\n}\nfunction isInProperties(roles, args, isLast) {\n  var length = args.length;\n  var role = roles;\n  if (length === 0) {\n    return false;\n  }\n  for (var i = 0; i < length; ++i) {\n    if (role === true) {\n      return false;\n    }\n    role = role[args[i]];\n    if (!role || !isLast && role === true) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * @memberof Scene\n * @param - Property names\n * @param - Whether the property is the last property that cannot be an object (non-partitionable)\n */\nfunction isRole(args, isLast) {\n  return isInProperties(ROLES, args, isLast);\n}\nfunction isFixed(args) {\n  return isInProperties(FIXED, args, true);\n}\nfunction setPlayCSS(item, isActivate) {\n  item.state[PLAY_CSS] = isActivate;\n}\nfunction isPausedCSS(item) {\n  return item.state[PLAY_CSS] && item.isPaused();\n}\nfunction isEndedCSS(item) {\n  return !item.isEnded() && item.state[PLAY_CSS];\n}\nfunction makeId(selector) {\n  for (;;) {\n    var id = \"\".concat(Math.floor(Math.random() * 10000000));\n    if (!IS_WINDOW || !selector) {\n      return id;\n    }\n    var checkElement = $(\"[data-scene-id=\\\"\".concat(id, \"\\\"]\"));\n    if (!checkElement) {\n      return id;\n    }\n  }\n}\nfunction getRealId(item) {\n  return item.getId() || item.setId(makeId(false)).getId();\n}\nfunction toId(text) {\n  return \"\".concat(text).match(/[0-9a-zA-Z]+/g).join(\"\");\n}\nfunction playCSS(item, isExportCSS, playClassName, properties) {\n  if (properties === void 0) {\n    properties = {};\n  }\n  if (!ANIMATION || item.getPlayState() === RUNNING) {\n    return;\n  }\n  var className = playClassName || START_ANIMATION;\n  if (isPausedCSS(item)) {\n    item.addPlayClass(true, className, properties);\n  } else {\n    if (item.isEnded()) {\n      item.setTime(0);\n    }\n    isExportCSS && item.exportCSS({\n      className: className\n    });\n    var el = item.addPlayClass(false, className, properties);\n    if (!el) {\n      return;\n    }\n    addAnimationEvent(item, el);\n    setPlayCSS(item, true);\n  }\n  item.setPlayState(RUNNING);\n}\nfunction addAnimationEvent(item, el) {\n  var state = item.state;\n  var duration = item.getDuration();\n  var isZeroDuration = !duration || !isFinite(duration);\n  var animationend = function () {\n    setPlayCSS(item, false);\n    item.finish();\n  };\n  var animationstart = function () {\n    item.trigger(PLAY);\n    addEvent(el, \"animationcancel\", animationend);\n    addEvent(el, \"animationend\", animationend);\n    addEvent(el, \"animationiteration\", animationiteration);\n  };\n  item.once(ENDED, function () {\n    removeEvent(el, \"animationcancel\", animationend);\n    removeEvent(el, \"animationend\", animationend);\n    removeEvent(el, \"animationiteration\", animationiteration);\n    removeEvent(el, \"animationstart\", animationstart);\n  });\n  var animationiteration = function (_a) {\n    var elapsedTime = _a.elapsedTime;\n    var currentTime = elapsedTime;\n    var iterationCount = isZeroDuration ? 0 : currentTime / duration;\n    state[CURRENT_TIME] = currentTime;\n    item.setIteration(iterationCount);\n  };\n  addEvent(el, \"animationstart\", animationstart);\n}\nfunction getEasing(curveArray) {\n  var easing;\n  if (isString(curveArray)) {\n    if (curveArray in EASINGS) {\n      easing = EASINGS[curveArray];\n    } else {\n      var obj = toPropertyObject(curveArray);\n      if (isString(obj)) {\n        return 0;\n      } else {\n        if (obj.model === \"cubic-bezier\") {\n          curveArray = obj.value.map(function (v) {\n            return parseFloat(v);\n          });\n          easing = bezier(curveArray[0], curveArray[1], curveArray[2], curveArray[3]);\n        } else if (obj.model === \"steps\") {\n          easing = steps(parseFloat(obj.value[0]), obj.value[1]);\n        } else {\n          return 0;\n        }\n      }\n    }\n  } else if (isArray(curveArray)) {\n    easing = bezier(curveArray[0], curveArray[1], curveArray[2], curveArray[3]);\n  } else {\n    easing = curveArray;\n  }\n  return easing;\n}\nfunction isPropertyObject(value) {\n  if (!value) {\n    return false;\n  }\n  var prototype = value.constructor.prototype;\n  return !!(prototype.clone && prototype.get && prototype.setOptions);\n}\nfunction isScene(value) {\n  return value && !!value.constructor.prototype.getItem;\n}\nfunction isSceneItem(value) {\n  return value && !!value.constructor.prototype.getFrame;\n}\nfunction isFrame(value) {\n  return value && !!value.constructor.prototype.toCSSText;\n}\nfunction isAnimator(value) {\n  return value && !!value.constructor.prototype.getActiveDuration;\n}\nfunction flatSceneObject(obj, seperator) {\n  var newObj = {};\n  for (var name_3 in obj) {\n    var value = obj[name_3];\n    if (isFrame(value)) {\n      newObj[name_3] = value;\n    } else if (isObject(value)) {\n      var nextObj = flatSceneObject(value, seperator);\n      for (var nextName in nextObj) {\n        newObj[\"\".concat(name_3).concat(seperator).concat(nextName)] = nextObj[nextName];\n      }\n    }\n  }\n  return newObj;\n}\nfunction selectorAll(callback, defaultCount) {\n  if (defaultCount === void 0) {\n    defaultCount = 0;\n  }\n  var nextCallback = callback.bind({});\n  nextCallback.defaultCount = defaultCount;\n  return nextCallback;\n}\nfunction rgbaToHexa(rgba) {\n  var hexInfo = rgbaToHexWithOpacity(rgba);\n  var hex = hexInfo.hex;\n  if (!hexInfo.hex) {\n    return \"\";\n  }\n  var opacityHex = Math.floor(hexInfo.opacity * 255).toString(16);\n  return \"\".concat(hex).concat(opacityHex);\n}\nfunction rgbaToHexWithOpacity(rgba) {\n  var rgbaInfo = splitBracket(rgba);\n  if ((rgbaInfo.prefix || \"\").indexOf(\"rgb\") !== 0) {\n    return {\n      hex: \"\",\n      opacity: 1\n    };\n  }\n  var rgbaArr = splitComma(rgbaInfo.value);\n  var rgbaNums = rgbaArr.slice(0, 3).map(function (num) {\n    var dec = parseInt(num, 10);\n    return dec.toString(16);\n  });\n  return {\n    hex: \"#\".concat(rgbaNums.join(\"\")),\n    opacity: rgbaArr[3] ? parseFloat(rgbaArr[3]) : 1\n  };\n}\nfunction GetterSetter(getter, setter, parent) {\n  return function (constructor) {\n    var prototype = constructor.prototype;\n    getter.forEach(function (name) {\n      prototype[camelize(\"get \".concat(name))] = function () {\n        return this[parent][name];\n      };\n    });\n    setter.forEach(function (name) {\n      prototype[camelize(\"set \".concat(name))] = function (value) {\n        this[parent][name] = value;\n        return this;\n      };\n    });\n  };\n}\nfunction isDirectionReverse(iteration, iteraiontCount, direction) {\n  if (direction === REVERSE) {\n    return true;\n  } else if (iteraiontCount !== INFINITE && iteration === iteraiontCount && iteraiontCount % 1 === 0) {\n    return direction === (iteration % 2 >= 1 ? ALTERNATE_REVERSE : ALTERNATE);\n  }\n  return direction === (iteration % 2 >= 1 ? ALTERNATE : ALTERNATE_REVERSE);\n}\n/**\n* @typedef {Object} AnimatorState The Animator options. Properties used in css animation.\n* @property {number} [duration] The duration property defines how long an animation should take to complete one cycle.\n* @property {\"none\"|\"forwards\"|\"backwards\"|\"both\"} [fillMode] The fillMode property specifies a style for the element when the animation is not playing (before it starts, after it ends, or both).\n* @property {\"infinite\"|number} [iterationCount] The iterationCount property specifies the number of times an animation should be played.\n* @property {array|function} [easing] The easing(timing-function) specifies the speed curve of an animation.\n* @property {number} [delay] The delay property specifies a delay for the start of an animation.\n* @property {\"normal\"|\"reverse\"|\"alternate\"|\"alternate-reverse\"} [direction] The direction property defines whether an animation should be played forwards, backwards or in alternate cycles.\n*/\nvar ANIMATOR_SETTERS = [\"id\", ITERATION_COUNT, DELAY, FILL_MODE, DIRECTION, PLAY_SPEED, DURATION, PLAY_SPEED, ITERATION_TIME, PLAY_STATE];\nvar ANIMATOR_GETTERS = __spreadArray(__spreadArray([], ANIMATOR_SETTERS, true), [EASING, EASING_NAME], false);\n/**\n* play video, animation, the others\n* @extends EventEmitter\n* @see {@link https://www.w3schools.com/css/css3_animations.asp CSS3 Animation}\n*/\nvar Animator = /*#__PURE__*/function (_super) {\n  __extends(Animator, _super);\n  /**\n   * @param - animator's options\n   * @example\n  const animator = new Animator({\n    delay: 2,\n    diretion: \"alternate\",\n    duration: 2,\n    fillMode: \"forwards\",\n    iterationCount: 3,\n    easing: Scene.easing.EASE,\n  });\n   */\n  function Animator(options) {\n    var _this = _super.call(this) || this;\n    _this.timerId = 0;\n    _this.state = reactive({\n      id: \"\",\n      easing: 0,\n      easingName: \"linear\",\n      iterationCount: 1,\n      delay: 0,\n      fillMode: \"forwards\",\n      direction: NORMAL,\n      playSpeed: 1,\n      currentTime: 0,\n      iterationTime: -1,\n      iteration: 0,\n      tickTime: 0,\n      prevTime: 0,\n      playState: PAUSED,\n      duration: 0\n    });\n    _this.setOptions(options);\n    return _this;\n  }\n  /**\n    * set animator's easing.\n    * @param curverArray - The speed curve of an animation.\n    * @return {Animator} An instance itself.\n    * @example\n  animator.({\n    delay: 2,\n    diretion: \"alternate\",\n    duration: 2,\n    fillMode: \"forwards\",\n    iterationCount: 3,\n    easing: Scene.easing.EASE,\n  });\n    */\n  Animator.prototype.setEasing = function (curveArray) {\n    var easing = getEasing(curveArray);\n    var easingName = easing && easing[EASING_NAME] || \"linear\";\n    var state = this.state;\n    state[EASING] = easing;\n    state[EASING_NAME] = easingName;\n    return this;\n  };\n  /**\n    * set animator's options.\n    * @see {@link https://www.w3schools.com/css/css3_animations.asp|CSS3 Animation}\n    * @param - animator's options\n    * @return {Animator} An instance itself.\n    * @example\n  animator.({\n    delay: 2,\n    diretion: \"alternate\",\n    duration: 2,\n    fillMode: \"forwards\",\n    iterationCount: 3,\n    easing: Scene.eaasing.EASE,\n  });\n    */\n  Animator.prototype.setOptions = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n    for (var name_1 in options) {\n      var value = options[name_1];\n      if (name_1 === EASING) {\n        this.setEasing(value);\n        continue;\n      } else if (name_1 === DURATION) {\n        value && this.setDuration(value);\n        continue;\n      }\n      if (OPTIONS.indexOf(name_1) > -1) {\n        this.state[name_1] = value;\n      }\n    }\n    return this;\n  };\n  /**\n    * Get the animator's total duration including delay\n    * @return {number} Total duration\n    * @example\n  animator.getTotalDuration();\n    */\n  Animator.prototype.getTotalDuration = function () {\n    return this.getActiveDuration(true);\n  };\n  /**\n    * Get the animator's total duration excluding delay\n    * @return {number} Total duration excluding delay\n    * @example\n  animator.getActiveDuration();\n    */\n  Animator.prototype.getActiveDuration = function (delay) {\n    var state = this.state;\n    var count = state[ITERATION_COUNT];\n    if (count === INFINITE) {\n      return Infinity;\n    }\n    return (delay ? state[DELAY] : 0) + this.getDuration() * count;\n  };\n  /**\n    * Check if the animator has reached the end.\n    * @return {boolean} ended\n    * @example\n  animator.isEnded(); // true or false\n    */\n  Animator.prototype.isEnded = function () {\n    if (this.state[TICK_TIME] === 0 && this.state[PLAY_STATE] === PAUSED) {\n      return true;\n    } else if (this.getTime() < this.getActiveDuration()) {\n      return false;\n    }\n    return true;\n  };\n  /**\n    *Check if the animator is paused:\n    * @return {boolean} paused\n    * @example\n  animator.isPaused(); // true or false\n    */\n  Animator.prototype.isPaused = function () {\n    return this.state[PLAY_STATE] === PAUSED;\n  };\n  Animator.prototype.start = function (delay) {\n    if (delay === void 0) {\n      delay = this.state[DELAY];\n    }\n    var state = this.state;\n    state[PLAY_STATE] = RUNNING;\n    if (state[TICK_TIME] >= delay) {\n      /**\n       * This event is fired when play animator.\n       * @event Animator#play\n       */\n      this.trigger(PLAY);\n      return true;\n    }\n    return false;\n  };\n  /**\n    * play animator\n    * @return {Animator} An instance itself.\n    */\n  Animator.prototype.play = function (toTime) {\n    var _this = this;\n    var state = this.state;\n    var delay = state[DELAY];\n    var currentTime = this.getTime();\n    state[PLAY_STATE] = RUNNING;\n    if (this.isEnded() && (currentTime === 0 || currentTime >= this.getActiveDuration())) {\n      this.setTime(-delay, true);\n    }\n    this.timerId = requestAnimationFrame(function (time) {\n      state[PREV_TIME] = time;\n      _this.tick(time, toTime);\n    });\n    this.start();\n    return this;\n  };\n  /**\n    * pause animator\n    * @return {Animator} An instance itself.\n    */\n  Animator.prototype.pause = function () {\n    var state = this.state;\n    if (state[PLAY_STATE] !== PAUSED) {\n      state[PLAY_STATE] = PAUSED;\n      /**\n       * This event is fired when animator is paused.\n       * @event Animator#paused\n       */\n      this.trigger(PAUSED);\n    }\n    cancelAnimationFrame(this.timerId);\n    return this;\n  };\n  /**\n     * end animator\n     * @return {Animator} An instance itself.\n    */\n  Animator.prototype.finish = function () {\n    this.setTime(0);\n    this.state[TICK_TIME] = 0;\n    this.end();\n    return this;\n  };\n  /**\n   * end animator\n   * @return {Animator} An instance itself.\n   */\n  Animator.prototype.end = function () {\n    this.pause();\n    /**\n     * This event is fired when animator is ended.\n     * @event Animator#ended\n     */\n    this.trigger(ENDED);\n    return this;\n  };\n  /**\n   * set currentTime\n   * @param {Number|String} time - currentTime\n   * @return {Animator} An instance itself.\n   * @example\n  animator.setTime(\"from\"); // 0\n  animator.setTime(\"to\"); // 100%\n  animator.setTime(\"50%\");\n  animator.setTime(10);\n  animator.getTime() // 10\n    */\n  Animator.prototype.setTime = function (time, isTick, isParent, exec) {\n    var activeDuration = this.getActiveDuration();\n    var state = this.state;\n    var prevTime = state[TICK_TIME];\n    var delay = state[DELAY];\n    var currentTime = isTick ? time : this.getUnitTime(time);\n    state[TICK_TIME] = delay + currentTime;\n    if (currentTime < 0) {\n      currentTime = 0;\n    } else if (currentTime > activeDuration) {\n      currentTime = activeDuration;\n    }\n    state[CURRENT_TIME] = currentTime;\n    this.calculate();\n    var isSelfTick = isTick && !isParent;\n    var tickTime = state[TICK_TIME];\n    if (isSelfTick && prevTime < delay && time >= 0) {\n      this.start(0);\n    }\n    exec === null || exec === void 0 ? void 0 : exec();\n    if (isSelfTick && (tickTime < prevTime || this.isEnded())) {\n      this.end();\n      return this;\n    }\n    if (this.isDelay()) {\n      return this;\n    }\n    /**\n         * This event is fired when the animator updates the time.\n         * @event Animator#timeupdate\n         * @param {Object} param The object of data to be sent to an event.\n         * @param {Number} param.currentTime The total time that the animator is running.\n         * @param {Number} param.time The iteration time during duration that the animator is running.\n         * @param {Number} param.iterationCount The iteration count that the animator is running.\n         */\n    this.trigger(TIMEUPDATE, {\n      currentTime: currentTime,\n      time: this.getIterationTime(),\n      iterationCount: state[ITERATION]\n    });\n    return this;\n  };\n  /**\n    * Get the animator's current time\n    * @return {number} current time\n    * @example\n  animator.getTime();\n    */\n  Animator.prototype.getTime = function () {\n    return this.state[CURRENT_TIME];\n  };\n  Animator.prototype.getUnitTime = function (time) {\n    if (isString(time)) {\n      var duration = this.getDuration() || 100;\n      if (time === \"from\") {\n        return 0;\n      } else if (time === \"to\") {\n        return duration;\n      }\n      var _a = splitUnit(time),\n        unit = _a.unit,\n        value = _a.value;\n      if (unit === \"%\") {\n        !this.getDuration() && this.setDuration(duration);\n        return toFixed(parseFloat(time) / 100 * duration);\n      } else if (unit === \">\") {\n        return value + THRESHOLD;\n      } else {\n        return value;\n      }\n    } else {\n      return toFixed(time);\n    }\n  };\n  /**\n     * Check if the current state of animator is delayed.\n     * @return {boolean} check delay state\n     */\n  Animator.prototype.isDelay = function () {\n    var state = this.state;\n    var delay = state[DELAY];\n    var tickTime = state[TICK_TIME];\n    return delay > 0 && tickTime < delay;\n  };\n  Animator.prototype.setIteration = function (iterationCount) {\n    var state = this.state;\n    var passIterationCount = Math.floor(iterationCount);\n    var maxIterationCount = state[ITERATION_COUNT] === INFINITE ? Infinity : state[ITERATION_COUNT];\n    if (state[ITERATION] < passIterationCount && passIterationCount < maxIterationCount) {\n      /**\n            * The event is fired when an iteration of an animation ends.\n            * @event Animator#iteration\n            * @param {Object} param The object of data to be sent to an event.\n            * @param {Number} param.currentTime The total time that the animator is running.\n            * @param {Number} param.iterationCount The iteration count that the animator is running.\n            */\n      this.trigger(ITERATION, {\n        currentTime: state[CURRENT_TIME],\n        iterationCount: passIterationCount\n      });\n    }\n    state[ITERATION] = iterationCount;\n    return this;\n  };\n  Animator.prototype.calculate = function () {\n    var state = this.state;\n    var iterationCount = state[ITERATION_COUNT];\n    var fillMode = state[FILL_MODE];\n    var direction = state[DIRECTION];\n    var duration = this.getDuration();\n    var time = this.getTime();\n    var iteration = duration === 0 ? 0 : time / duration;\n    var currentIterationTime = duration ? time % duration : 0;\n    if (!duration) {\n      this.setIterationTime(0);\n      return this;\n    }\n    this.setIteration(iteration);\n    // direction : normal, reverse, alternate, alternate-reverse\n    // fillMode : forwards, backwards, both, none\n    var isReverse = isDirectionReverse(iteration, iterationCount, direction);\n    var isFiniteDuration = isFinite(duration);\n    if (isFiniteDuration && isReverse) {\n      currentIterationTime = duration - currentIterationTime;\n    }\n    if (isFiniteDuration && iterationCount !== INFINITE) {\n      var isForwards = fillMode === \"both\" || fillMode === \"forwards\";\n      // fill forwards\n      if (iteration >= iterationCount) {\n        currentIterationTime = duration * (isForwards ? iterationCount % 1 || 1 : 0);\n        isReverse && (currentIterationTime = duration - currentIterationTime);\n      }\n    }\n    this.setIterationTime(currentIterationTime);\n    return this;\n  };\n  Animator.prototype.tick = function (now, to) {\n    var _this = this;\n    if (this.isPaused()) {\n      return;\n    }\n    var state = this.state;\n    var playSpeed = state[PLAY_SPEED];\n    var prevTime = state[PREV_TIME];\n    var delay = state[DELAY];\n    var tickTime = state[TICK_TIME];\n    var currentTime = tickTime + Math.min(1000, now - prevTime) / 1000 * playSpeed;\n    state[PREV_TIME] = now;\n    if (to && to >= currentTime) {\n      this.setTime(to - delay, true);\n      this.pause();\n    } else {\n      this.setTime(currentTime - delay, true);\n    }\n    if (state[PLAY_STATE] === PAUSED) {\n      return;\n    }\n    this.timerId = requestAnimationFrame(function (time) {\n      _this.tick(time, to);\n    });\n  };\n  Animator = __decorate([GetterSetter(ANIMATOR_GETTERS, ANIMATOR_SETTERS, \"state\")], Animator);\n  return Animator;\n}(EventEmitter);\nfunction toInnerProperties(obj, orders) {\n  if (orders === void 0) {\n    orders = [];\n  }\n  if (!obj) {\n    return \"\";\n  }\n  var arrObj = [];\n  var keys = getKeys(obj);\n  sortOrders(keys, orders);\n  keys.forEach(function (name) {\n    arrObj.push(\"\".concat(name.replace(/\\d$/g, \"\"), \"(\").concat(obj[name], \")\"));\n  });\n  return arrObj.join(\" \");\n}\n/* eslint-disable */\nfunction clone(target, toValue) {\n  if (toValue === void 0) {\n    toValue = false;\n  }\n  return merge({}, target, toValue);\n}\nfunction merge(to, from, toValue) {\n  if (toValue === void 0) {\n    toValue = false;\n  }\n  for (var name_1 in from) {\n    var value = from[name_1];\n    var type = getType(value);\n    if (type === PROPERTY) {\n      to[name_1] = toValue ? value.toValue() : value.clone();\n    } else if (type === FUNCTION) {\n      to[name_1] = toValue ? getValue([name_1], value) : value;\n    } else if (type === ARRAY) {\n      to[name_1] = value.slice();\n    } else if (type === OBJECT) {\n      if (isObject(to[name_1]) && !isPropertyObject(to[name_1])) {\n        merge(to[name_1], value, toValue);\n      } else {\n        to[name_1] = clone(value, toValue);\n      }\n    } else {\n      to[name_1] = from[name_1];\n    }\n  }\n  return to;\n}\n/* eslint-enable */\nfunction getPropertyName(args) {\n  return args[0] in ALIAS ? ALIAS[args[0]] : args;\n}\nfunction getValue(names, value) {\n  var type = getType(value);\n  if (type === PROPERTY) {\n    return value.toValue();\n  } else if (type === FUNCTION) {\n    if (names[0] !== TIMING_FUNCTION) {\n      return getValue(names, value());\n    }\n  } else if (type === OBJECT) {\n    return clone(value, true);\n  }\n  return value;\n}\n/**\n* Animation's Frame\n*/\nvar Frame = /*#__PURE__*/function (_super) {\n  __extends(Frame, _super);\n  /**\n   * @param - properties\n   * @example\n  const frame = new Scene.Frame({\n    display: \"none\"\n    transform: {\n        translate: \"50px\",\n        scale: \"5, 5\",\n    }\n  });\n   */\n  function Frame(properties) {\n    if (properties === void 0) {\n      properties = {};\n    }\n    var _this = _super.call(this) || this;\n    _this.properties = {};\n    _this.orderMap = new OrderMap(NAME_SEPARATOR);\n    _this.properties = {};\n    // this.orders = [];\n    _this.set(properties);\n    return _this;\n  }\n  /**\n    * get property value\n    * @param {...Number|String|PropertyObject} args - property name or value\n    * @example\n    frame.get(\"display\") // => \"none\", \"block\", ....\n    frame.get(\"transform\", \"translate\") // => \"10px,10px\"\n    */\n  Frame.prototype.get = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var value = this.raw.apply(this, args);\n    return getValue(getPropertyName(args), value);\n  };\n  /**\n    * get properties orders\n    * @param - property names\n    * @example\n    frame.getOrders([\"display\"]) // => []\n    frame.getOrders([\"transform\"]) // => [\"translate\", \"scale\"]\n    */\n  Frame.prototype.getOrders = function (names) {\n    return this.orderMap.get(names);\n  };\n  /**\n    * set properties orders\n    * @param - property names\n    * @param - orders\n    * @example\n    frame.getOrders([\"transform\"]) // => [\"translate\", \"scale\"]\n    frame.setOrders([\"transform\"], [\"scale\", \"tralsate\"])\n    */\n  Frame.prototype.setOrders = function (names, orders) {\n    var result = this.orderMap.set(names, orders);\n    this._update();\n    return result;\n  };\n  /**\n    * get properties order object\n    * @example\n    console.log(frame.getOrderObject());\n    */\n  Frame.prototype.getOrderObject = function () {\n    return this.orderMap.getObject();\n  };\n  /**\n    * set properties orders object\n    * @param - properties orders object\n    * @example\n    frame.setOrderObject({\n        \"\": [\"transform\"],\n        \"transform\": [\"scale\", \"tralsate\"],\n    });\n    */\n  Frame.prototype.setOrderObject = function (obj) {\n    this.orderMap.setObject(obj);\n    this._update();\n  };\n  /**\n    * get property keys\n    * @param - property names\n    * @example\n    frame.gets(\"display\") // => []\n    frame.gets(\"transform\") // => [\"translate\"]\n    */\n  Frame.prototype.getKeys = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var value = this.raw.apply(this, args);\n    var keys = getType(value) === OBJECT ? getKeys(value) : [];\n    sortOrders(keys, this.orderMap.get(args));\n    return keys;\n  };\n  /**\n    * get properties array\n    * @param - property names\n    * @example\n    frame.gets(\"display\") // => []\n    frame.gets(\"transform\") // => [{ key: \"translate\", value: \"10px, 10px\", children: [] }]\n    */\n  Frame.prototype.gets = function () {\n    var _this = this;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var values = this.get.apply(this, args);\n    var keys = this.getKeys.apply(this, args);\n    return keys.map(function (key) {\n      var nextValue = values[key];\n      return {\n        key: key,\n        value: nextValue,\n        children: _this.gets.apply(_this, __spreadArray(__spreadArray([], args, false), [key], false))\n      };\n    });\n  };\n  Frame.prototype.raw = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return getValueByNames(getPropertyName(args), this.properties);\n  };\n  /**\n    * remove property value\n    * @param {...String} args - property name\n    * @return {Frame} An instance itself\n    * @example\n    frame.remove(\"display\")\n    */\n  Frame.prototype.remove = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var params = getPropertyName(args);\n    var length = params.length;\n    if (!length) {\n      return this;\n    }\n    this.orderMap.remove(params);\n    var value = getValueByNames(params, this.properties, length - 1);\n    if (isObject(value)) {\n      delete value[params[length - 1]];\n    }\n    this._update();\n    return this;\n  };\n  /**\n    * set property\n    * @param {...Number|String|PropertyObject} args - property names or values\n    * @return {Frame} An instance itself\n    * @example\n  // one parameter\n  frame.set({\n    display: \"none\",\n    transform: {\n        translate: \"10px, 10px\",\n        scale: \"1\",\n    },\n    filter: {\n        brightness: \"50%\",\n        grayscale: \"100%\"\n    }\n  });\n  // two parameters\n  frame.set(\"transform\", {\n    translate: \"10px, 10px\",\n    scale: \"1\",\n  });\n  // three parameters\n  frame.set(\"transform\", \"translate\", \"50px\");\n  */\n  Frame.prototype.set = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    this._set.apply(this, args);\n    this._update();\n    return this;\n  };\n  /**\n    * Gets the names of properties.\n    * @return the names of properties.\n    * @example\n  // one parameter\n  frame.set({\n    display: \"none\",\n    transform: {\n        translate: \"10px, 10px\",\n        scale: \"1\",\n    },\n  });\n  // [[\"display\"], [\"transform\", \"translate\"], [\"transform\", \"scale\"]]\n  console.log(frame.getNames());\n  */\n  Frame.prototype.getNames = function () {\n    return getNames(this.properties, []);\n  };\n  /**\n    * check that has property.\n    * @param {...String} args - property name\n    * @example\n    frame.has(\"property\", \"display\") // => true or false\n    */\n  Frame.prototype.has = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var params = getPropertyName(args);\n    var length = params.length;\n    if (!length) {\n      return false;\n    }\n    return !isUndefined(getValueByNames(params, this.properties, length));\n  };\n  /**\n    * clone frame.\n    * @return {Frame} An instance of clone\n    * @example\n    frame.clone();\n    */\n  Frame.prototype.clone = function () {\n    var frame = new Frame();\n    frame.setOrderObject(this.orderMap.orderMap);\n    return frame.merge(this);\n  };\n  /**\n    * merge one frame to other frame.\n    * @param - target frame.\n    * @return {Frame} An instance itself\n    * @example\n    frame.merge(frame2);\n    */\n  Frame.prototype.merge = function (frame) {\n    var properties = this.properties;\n    var frameProperties = frame.properties;\n    if (frameProperties) {\n      merge(properties, frameProperties);\n    }\n    return this;\n  };\n  /**\n    * Specifies an css object that coverted the frame.\n    * @param - If you want to return camel case name like css property or react, use the following parameter\n    * @return {object} cssObject\n    */\n  Frame.prototype.toCSSObject = function (useCamelCase) {\n    var properties = this.get();\n    var cssObject = {};\n    for (var name_2 in properties) {\n      if (isRole([name_2], true)) {\n        continue;\n      }\n      var value = properties[name_2];\n      if (name_2 === TIMING_FUNCTION) {\n        name_2 = TIMING_FUNCTION.replace(\"animation\", ANIMATION);\n        value = (isString(value) ? value : value[EASING_NAME]) || \"initial\";\n      }\n      if (useCamelCase) {\n        name_2 = camelize(name_2.replace(/^[-]+/g, \"\"));\n      }\n      cssObject[name_2] = value;\n    }\n    var transform = toInnerProperties(properties[TRANSFORM_NAME], this.orderMap.get([TRANSFORM_NAME]));\n    var filter = toInnerProperties(properties.filter, this.orderMap.get([FILTER]));\n    TRANSFORM && transform && (cssObject[TRANSFORM] = transform);\n    FILTER && filter && (cssObject[FILTER] = filter);\n    return cssObject;\n  };\n  /**\n    * Specifies an css text that coverted the frame.\n    * @return {string} cssText\n    */\n  Frame.prototype.toCSSText = function () {\n    var cssObject = this.toCSSObject();\n    var cssArray = [];\n    var keys = getKeys(cssObject);\n    sortOrders(keys, this.orderMap.get([]));\n    keys.forEach(function (name) {\n      cssArray.push(\"\".concat(decamelize(name, \"-\"), \":\").concat(cssObject[name], \";\"));\n    });\n    return cssArray.join(\"\");\n  };\n  /**\n    * Specifies an css text that coverted the frame.\n    * Use `toCSSText()` method.\n    * @deprecated\n    * @return {string} cssText\n    */\n  Frame.prototype.toCSS = function () {\n    var cssObject = this.toCSSObject();\n    var cssArray = [];\n    var keys = getKeys(cssObject);\n    sortOrders(keys, this.orderMap.get([]));\n    keys.forEach(function (name) {\n      cssArray.push(\"\".concat(name, \":\").concat(cssObject[name], \";\"));\n    });\n    return cssArray.join(\"\");\n  };\n  /**\n    * Remove All Properties\n    * @return {Frame} An instance itself\n    */\n  Frame.prototype.clear = function () {\n    this.properties = {};\n    this.orderMap.clear();\n    return this;\n  };\n  Frame.prototype._set = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var self = this;\n    var length = args.length;\n    var params = args.slice(0, -1);\n    var value = args[length - 1];\n    var firstParam = params[0];\n    if (length === 1 && isFrame(value)) {\n      self.merge(value);\n    } else if (firstParam in ALIAS) {\n      self._setByPath(ALIAS[firstParam], value);\n    } else if (length === 2 && isArray(firstParam)) {\n      self._setByPath(firstParam, value);\n    } else if (isPropertyObject(value)) {\n      if (isRole(params)) {\n        self._set.apply(self, __spreadArray(__spreadArray([], params, false), [toObject(value)], false));\n      } else {\n        self._setByPath(params, value);\n      }\n    } else if (isArray(value)) {\n      self._setByPath(params, value);\n    } else if (isObject(value)) {\n      if (!self.has.apply(self, params) && isRole(params)) {\n        self._setByPath(params, {});\n      }\n      for (var name_3 in value) {\n        self._set.apply(self, __spreadArray(__spreadArray([], params, false), [name_3, value[name_3]], false));\n      }\n    } else if (isString(value)) {\n      if (isRole(params, true)) {\n        if (isFixed(params) || !isRole(params)) {\n          this._setByPath(params, value);\n        } else {\n          var obj = toPropertyObject(value);\n          if (isObject(obj)) {\n            self._set.apply(self, __spreadArray(__spreadArray([], params, false), [obj], false));\n          }\n        }\n        return this;\n      } else {\n        var _a = splitStyle(value),\n          styles = _a.styles,\n          stylesLength = _a.length;\n        for (var name_4 in styles) {\n          self._set.apply(self, __spreadArray(__spreadArray([], params, false), [name_4, styles[name_4]], false));\n        }\n        if (stylesLength) {\n          return this;\n        }\n      }\n      self._setByPath(params, value);\n    } else {\n      self._setByPath(params, value);\n    }\n  };\n  Frame.prototype._setByPath = function (path, value) {\n    var properties = this.properties;\n    var length = path.length;\n    for (var i = 0; i < length - 1; ++i) {\n      var name_5 = path[i];\n      !(name_5 in properties) && (properties[name_5] = {});\n      properties = properties[name_5];\n    }\n    if (!length) {\n      return;\n    }\n    var lastParam = path[length - 1];\n    this.orderMap.add(path);\n    if (length === 1 && lastParam === TIMING_FUNCTION) {\n      properties[lastParam] = getEasing(value);\n    } else {\n      properties[lastParam] = isString(value) && !isFixed(path) ? toPropertyObject(value, lastParam) : value;\n    }\n  };\n  Frame.prototype._update = function () {\n    this.emit(\"update\");\n  };\n  return Frame;\n}(EventEmitter);\nfunction dotArray(a1, a2, b1, b2) {\n  var length = a2.length;\n  return a1.map(function (v1, i) {\n    if (i >= length) {\n      return v1;\n    } else {\n      return dot(v1, a2[i], b1, b2);\n    }\n  });\n}\nfunction dotColor(color1, color2, b1, b2) {\n  // convert array to PropertyObject(type=color)\n  var value1 = color1.value;\n  var value2 = color2.value;\n  // If the model name is not same, the inner product is impossible.\n  var model1 = color1.model;\n  var model2 = color2.model;\n  if (model1 !== model2) {\n    // It is recognized as a string.\n    return dot(color1.toValue(), color2.toValue(), b1, b2);\n  }\n  if (value1.length === 3) {\n    value1[3] = 1;\n  }\n  if (value2.length === 3) {\n    value2[3] = 1;\n  }\n  var v = dotArray(value1, value2, b1, b2);\n  var colorModel = model1;\n  for (var i = 0; i < 3; ++i) {\n    v[i] = parseInt(v[i], 10);\n  }\n  var object = new PropertyObject(v, {\n    type: \"color\",\n    model: colorModel,\n    prefix: \"\".concat(colorModel, \"(\"),\n    suffix: \")\"\n  });\n  return object;\n}\nfunction dotObject(a1, a2, b1, b2) {\n  var a1Type = a1.type;\n  if (a1Type === \"color\") {\n    return dotColor(a1, a2, b1, b2);\n  }\n  var value1 = a1.value;\n  var value2 = a2.value;\n  var arr = dotArray(value1, value2, b1, b2);\n  return new PropertyObject(arr, {\n    type: a1Type,\n    separator: a1.separator || a2.separator,\n    prefix: a1.prefix || a2.prefix,\n    suffix: a1.suffix || a2.suffix,\n    model: a1.model || a2.model\n  });\n}\n/**\n* The dot product of a1 and a2 for the b1 and b2.\n* @memberof Dot\n* @function dot\n* @param {String|Number|PropertyObject} a1 value1\n* @param {String|Number|PropertyObject} a2 value2\n* @param {Number} b1 b1 ratio\n* @param {Number} b2 b2 ratio\n* @return {String} Not Array, Not Separator, Only Number & Unit\n* @return {PropertyObject} Array with Separator.\n* @example\ndot(1, 3, 0.3, 0.7);\n// => 1.6\n*/\nfunction dot(a1, a2, b1, b2) {\n  if (b2 === 0) {\n    return a2;\n  } else if (b1 === 0 || b1 + b2 === 0) {\n    // prevent division by zero.\n    return a1;\n  }\n  // dot Object\n  var type1 = getType(a1);\n  var type2 = getType(a2);\n  var isFunction1 = type1 === FUNCTION;\n  var isFunction2 = type2 === FUNCTION;\n  if (isFunction1 || isFunction2) {\n    return function () {\n      return dot(isFunction1 ? toPropertyObject(a1()) : a1, isFunction2 ? toPropertyObject(a2()) : a2, b1, b2);\n    };\n  } else if (type1 === type2) {\n    if (type1 === PROPERTY) {\n      return dotObject(a1, a2, b1, b2);\n    } else if (type1 === ARRAY) {\n      return dotArray(a1, a2, b1, b2);\n    } else if (type1 !== \"value\") {\n      return a1;\n    }\n  } else {\n    return a1;\n  }\n  var v1 = splitUnit(\"\".concat(a1));\n  var v2 = splitUnit(\"\".concat(a2));\n  var v;\n  // 숫자가 아닐경우 첫번째 값을 반환 b2가 0일경우 두번째 값을 반환\n  if (isNaN(v1.value) || isNaN(v2.value)) {\n    return a1;\n  } else {\n    v = dot$1(v1.value, v2.value, b1, b2);\n  }\n  var prefix = v1.prefix || v2.prefix;\n  var unit = v1.unit || v2.unit;\n  if (!prefix && !unit) {\n    return v;\n  }\n  return prefix + v + unit;\n}\nfunction dotValue(time, prevTime, nextTime, prevValue, nextValue, easing) {\n  if (time === prevTime) {\n    return prevValue;\n  } else if (time === nextTime) {\n    return nextValue;\n  } else if (!easing) {\n    return dot(prevValue, nextValue, time - prevTime, nextTime - time);\n  }\n  var ratio = easing((time - prevTime) / (nextTime - prevTime));\n  var value = dot(prevValue, nextValue, ratio, 1 - ratio);\n  return value;\n}\nfunction getNearTimeIndex(times, time) {\n  var length = times.length;\n  for (var i = 0; i < length; ++i) {\n    if (times[i] === time) {\n      return [i, i];\n    } else if (times[i] > time) {\n      return [i > 0 ? i - 1 : 0, i];\n    }\n  }\n  return [length - 1, length - 1];\n}\nfunction makeAnimationProperties(properties) {\n  var cssArray = [];\n  for (var name_1 in properties) {\n    cssArray.push(\"\".concat(ANIMATION, \"-\").concat(decamelize(name_1), \":\").concat(properties[name_1], \";\"));\n  }\n  return cssArray.join(\"\");\n}\nfunction addTime(times, time) {\n  var length = times.length;\n  for (var i = 0; i < length; ++i) {\n    if (time < times[i]) {\n      times.splice(i, 0, time);\n      return;\n    }\n  }\n  times[length] = time;\n}\nfunction addEntry(entries, time, keytime) {\n  var prevEntry = entries[entries.length - 1];\n  (!prevEntry || prevEntry[0] !== time || prevEntry[1] !== keytime) && entries.push([toFixed(time), toFixed(keytime)]);\n}\nfunction getEntries(times, states) {\n  var entries = times.map(function (time) {\n    return [time, time];\n  });\n  var nextEntries = [];\n  states.forEach(function (state) {\n    var iterationCount = state[ITERATION_COUNT];\n    var delay = state[DELAY];\n    var playSpeed = state[PLAY_SPEED];\n    var direction = state[DIRECTION];\n    var intCount = Math.ceil(iterationCount);\n    var currentDuration = entries[entries.length - 1][0];\n    var length = entries.length;\n    var lastTime = currentDuration * iterationCount;\n    for (var i = 0; i < intCount; ++i) {\n      var isReverse = direction === REVERSE || direction === ALTERNATE && i % 2 || direction === ALTERNATE_REVERSE && !(i % 2);\n      for (var j = 0; j < length; ++j) {\n        var entry = entries[isReverse ? length - j - 1 : j];\n        var time = entry[1];\n        var currentTime = currentDuration * i + (isReverse ? currentDuration - entry[0] : entry[0]);\n        var prevEntry = entries[isReverse ? length - j : j - 1];\n        if (currentTime > lastTime) {\n          if (j !== 0) {\n            var prevTime = currentDuration * i + (isReverse ? currentDuration - prevEntry[0] : prevEntry[0]);\n            var divideTime = dot$1(prevEntry[1], time, lastTime - prevTime, currentTime - lastTime);\n            addEntry(nextEntries, (delay + currentDuration * iterationCount) / playSpeed, divideTime);\n          }\n          break;\n        } else if (currentTime === lastTime && nextEntries.length && nextEntries[nextEntries.length - 1][0] === lastTime + delay) {\n          break;\n        }\n        addEntry(nextEntries, (delay + currentTime) / playSpeed, time);\n      }\n    }\n    // delay time\n    delay && nextEntries.unshift([0, nextEntries[0][1]]);\n    entries = nextEntries;\n    nextEntries = [];\n  });\n  return entries;\n}\n/**\n* manage Frame Keyframes and play keyframes.\n* @extends Animator\n* @example\nconst item = new SceneItem({\n    0: {\n        display: \"none\",\n    },\n    1: {\n        display: \"block\",\n        opacity: 0,\n    },\n    2: {\n        opacity: 1,\n    }\n});\n*/\nvar SceneItem = /*#__PURE__*/function (_super) {\n  __extends(SceneItem, _super);\n  /**\n    * @param - properties\n    * @param - options\n    * @example\n    const item = new SceneItem({\n        0: {\n            display: \"none\",\n        },\n        1: {\n            display: \"block\",\n            opacity: 0,\n        },\n        2: {\n            opacity: 1,\n        }\n    });\n     */\n  function SceneItem(properties, options) {\n    var _this = _super.call(this) || this;\n    _this.times = [];\n    _this.items = {};\n    _this.nameMap = new OrderMap(NAME_SEPARATOR);\n    _this.elements = [];\n    _this.needUpdate = true;\n    _this.load(properties, options);\n    return _this;\n  }\n  SceneItem.prototype.getDuration = function () {\n    var times = this.times;\n    var length = times.length;\n    return (length === 0 ? 0 : times[length - 1]) || this.state[DURATION];\n  };\n  /**\n    * get size of list\n    * @return {Number} length of list\n    */\n  SceneItem.prototype.size = function () {\n    return this.times.length;\n  };\n  SceneItem.prototype.setDuration = function (duration) {\n    if (!duration) {\n      return this;\n    }\n    var originalDuration = this.getDuration();\n    if (originalDuration > 0) {\n      var ratio_1 = duration / originalDuration;\n      var _a = this,\n        times = _a.times,\n        items_1 = _a.items;\n      var obj_1 = {};\n      this.times = times.map(function (time) {\n        var time2 = toFixed(time * ratio_1);\n        obj_1[time2] = items_1[time];\n        return time2;\n      });\n      this.items = obj_1;\n    } else {\n      this.newFrame(duration);\n    }\n    return this;\n  };\n  SceneItem.prototype.setId = function (id) {\n    var state = this.state;\n    var elements = this.elements;\n    var length = elements.length;\n    state.id = id || makeId(!!length);\n    if (length && !state[SELECTOR]) {\n      var sceneId_1 = toId(this.getId());\n      state[SELECTOR] = \"[\".concat(DATA_SCENE_ID, \"=\\\"\").concat(sceneId_1, \"\\\"]\");\n      elements.forEach(function (element) {\n        element.setAttribute(DATA_SCENE_ID, sceneId_1);\n      });\n    }\n    return this;\n  };\n  /**\n    * Set properties to the sceneItem at that time\n    * @param {Number} time - time\n    * @param {...String|Object} [properties] - property names or values\n    * @return {SceneItem} An instance itself\n    * @example\n  item.set(0, \"a\", \"b\") // item.getFrame(0).set(\"a\", \"b\")\n  console.log(item.get(0, \"a\")); // \"b\"\n    */\n  SceneItem.prototype.set = function (time) {\n    var _this = this;\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    if (isSceneItem(time)) {\n      return this.set(0, time);\n    } else if (isArray(time)) {\n      var length_1 = time.length;\n      for (var i = 0; i < length_1; ++i) {\n        var t = length_1 === 1 ? 0 : this.getUnitTime(\"\".concat(i / (length_1 - 1) * 100, \"%\"));\n        this.set(t, time[i]);\n      }\n    } else if (isObject(time)) {\n      var _loop_1 = function (t) {\n        var value = time[t];\n        splitComma(t).forEach(function (eachTime) {\n          var realTime = _this.getUnitTime(eachTime);\n          if (isNaN(realTime)) {\n            getNames(value, [eachTime]).forEach(function (names) {\n              var _a;\n              var innerValue = getValueByNames(names.slice(1), value);\n              var arr = isArray(innerValue) ? innerValue : [getValueByNames(names, _this.target), innerValue];\n              var length = arr.length;\n              for (var i = 0; i < length; ++i) {\n                (_a = _this.newFrame(\"\".concat(i / (length - 1) * 100, \"%\"))).set.apply(_a, __spreadArray(__spreadArray([], names, false), [arr[i]], false));\n              }\n            });\n          } else {\n            _this.set(realTime, value);\n          }\n        });\n      };\n      for (var t in time) {\n        _loop_1(t);\n      }\n    } else if (!isUndefined(time)) {\n      var value_1 = args[0];\n      splitComma(time + \"\").forEach(function (eachTime) {\n        var realTime = _this.getUnitTime(eachTime);\n        if (isSceneItem(value_1)) {\n          var delay = value_1.getDelay();\n          var frames_1 = value_1.toObject(!_this.hasFrame(realTime + delay));\n          var duration = value_1.getDuration();\n          var direction = value_1.getDirection();\n          var isReverse = direction.indexOf(\"reverse\") > -1;\n          for (var frameTime in frames_1) {\n            var nextTime = isReverse ? duration - parseFloat(frameTime) : parseFloat(frameTime);\n            _this.set(realTime + nextTime, frames_1[frameTime]);\n          }\n        } else if (args.length === 1 && isArray(value_1)) {\n          value_1.forEach(function (item) {\n            _this.set(realTime, item);\n          });\n        } else {\n          var frame = _this.newFrame(realTime);\n          frame.set.apply(frame, args);\n        }\n      });\n    }\n    this.needUpdate = true;\n    return this;\n  };\n  /**\n    * Get properties of the sceneItem at that time\n    * @param {Number} time - time\n    * @param {...String|Object} args property's name or properties\n    * @return {Number|String|PropertyObejct} property value\n    * @example\n  item.get(0, \"a\"); // item.getFrame(0).get(\"a\");\n  item.get(0, \"transform\", \"translate\"); // item.getFrame(0).get(\"transform\", \"translate\");\n    */\n  SceneItem.prototype.get = function (time) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    var frame = this.getFrame(time);\n    return frame && frame.get.apply(frame, args);\n  };\n  /**\n    * get properties orders\n    * @param - property names\n    * @example\n    item.getOrders([\"display\"]) // => []\n    item.getOrders([\"transform\"]) // => [\"translate\", \"scale\"]\n    */\n  SceneItem.prototype.getOrders = function (names) {\n    this.needUpdate && this.update();\n    return this.nameMap.get(names);\n  };\n  /**\n    * set properties orders\n    * @param - property names\n    * @param - orders\n    * @example\n    item.getOrders([\"transform\"]) // => [\"translate\", \"scale\"]\n    item.setOrders([\"transform\"], [\"scale\", \"tralsate\"])\n    */\n  SceneItem.prototype.setOrders = function (names, orders) {\n    this.needUpdate && this.update();\n    var result = this.nameMap.set(names, orders);\n    this.updateFrameOrders();\n    return result;\n  };\n  /**\n    * get properties order object\n    * @example\n    console.log(item.getOrderObject());\n    */\n  SceneItem.prototype.getOrderObject = function () {\n    return this.nameMap.getObject();\n  };\n  /**\n    * set properties orders object\n    * @param - properties orders object\n    * @example\n    item.setOrderObject({\n        \"\": [\"transform\"],\n        \"transform\": [\"scale\", \"tralsate\"],\n    });\n    */\n  SceneItem.prototype.setOrderObject = function (obj) {\n    this.nameMap.setObject(obj);\n    this.updateFrameOrders();\n  };\n  /**\n    * remove properties to the sceneItem at that time\n    * @param {Number} time - time\n    * @param {...String|Object} [properties] - property names or values\n    * @return {SceneItem} An instance itself\n    * @example\n  item.remove(0, \"a\");\n    */\n  SceneItem.prototype.remove = function (time) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    if (args.length) {\n      var frame = this.getFrame(time);\n      frame && frame.remove.apply(frame, args);\n    } else {\n      this.removeFrame(time);\n    }\n    this.needUpdate = true;\n    return this;\n  };\n  /**\n    * Append the item or object at the last time.\n    * @param - the scene item or item object\n    * @return An instance itself\n    * @example\n  item.append(new SceneItem({\n    0: {\n        opacity: 0,\n    },\n    1: {\n        opacity: 1,\n    }\n  }));\n  item.append({\n    0: {\n        opacity: 0,\n    },\n    1: {\n        opacity: 1,\n    }\n  });\n  item.set(item.getDuration(), {\n    0: {\n        opacity: 0,\n    },\n    1: {\n        opacity: 1,\n    }\n  });\n    */\n  SceneItem.prototype.append = function (item) {\n    if (isSceneItem(item)) {\n      this.set(this.getDuration(), item);\n    } else {\n      this.append(new SceneItem(item));\n    }\n    return this;\n  };\n  /**\n    * Push the front frames for the time and prepend the scene item or item object.\n    * @param - the scene item or item object\n    * @return An instance itself\n    */\n  SceneItem.prototype.prepend = function (item) {\n    if (isSceneItem(item)) {\n      var unshiftTime = item.getDuration() + item.getDelay();\n      var firstFrame = this.getFrame(0);\n      // remove first frame\n      this.removeFrame(0);\n      this.unshift(unshiftTime);\n      this.set(0, item);\n      this.set(unshiftTime + THRESHOLD, firstFrame);\n    } else {\n      this.prepend(new SceneItem(item));\n    }\n    return this;\n  };\n  /**\n   * Push out the amount of time.\n   * @param - time to push\n   * @example\n  item.get(0); // frame 0\n  item.unshift(3);\n  item.get(3) // frame 0\n   */\n  SceneItem.prototype.unshift = function (time) {\n    var _a = this,\n      times = _a.times,\n      items = _a.items;\n    var obj = {};\n    this.times = times.map(function (t) {\n      var time2 = toFixed(time + t);\n      obj[time2] = items[t];\n      return time2;\n    });\n    this.items = obj;\n    return this;\n  };\n  /**\n   * Get the frames in the item in object form.\n   * @return {}\n   * @example\n  item.toObject();\n  // {0: {display: \"none\"}, 1: {display: \"block\"}}\n   */\n  SceneItem.prototype.toObject = function (isStartZero) {\n    if (isStartZero === void 0) {\n      isStartZero = true;\n    }\n    var obj = {};\n    var delay = this.getDelay();\n    this.forEach(function (frame, time) {\n      obj[(!time && !isStartZero ? THRESHOLD : 0) + delay + time] = frame.clone();\n    });\n    return obj;\n  };\n  /**\n   * Specifies an element to synchronize items' keyframes.\n   * @param {string} selectors - Selectors to find elements in items.\n   * @return {SceneItem} An instance itself\n   * @example\n  item.setSelector(\"#id.class\");\n   */\n  SceneItem.prototype.setSelector = function (target) {\n    if (isFunction(target)) {\n      this.setElement(target(this.getId(), 0));\n    } else {\n      this.setElement(target);\n    }\n    return this;\n  };\n  /**\n   * Get the elements connected to SceneItem.\n   */\n  SceneItem.prototype.getElements = function () {\n    return this.elements;\n  };\n  /**\n   * Specifies an element to synchronize item's keyframes.\n   * @param - elements to synchronize item's keyframes.\n   * @param - Make sure that you have peusdo.\n   * @return {SceneItem} An instance itself\n   * @example\n  item.setElement(document.querySelector(\"#id.class\"));\n  item.setElement(document.querySelectorAll(\".class\"));\n   */\n  SceneItem.prototype.setElements = function (target) {\n    return this.setElement(target);\n  };\n  /**\n   * Specifies an element to synchronize item's keyframes.\n   * @param - elements to synchronize item's keyframes.\n   * @param - Make sure that you have peusdo.\n   * @return {SceneItem} An instance itself\n   * @example\n  item.setElement(document.querySelector(\"#id.class\"));\n  item.setElement(document.querySelectorAll(\".class\"));\n   */\n  SceneItem.prototype.setElement = function (target) {\n    var state = this.state;\n    var elements = [];\n    if (!target) {\n      return this;\n    } else if (target === true || isString(target)) {\n      var selector = target === true ? \"\".concat(state.id) : target;\n      var matches = /([\\s\\S]+)(:+[a-zA-Z]+)$/g.exec(selector);\n      elements = toArray($(matches ? matches[1] : selector, true));\n      state[SELECTOR] = selector;\n    } else {\n      elements = target instanceof Element ? [target] : toArray(target);\n    }\n    if (!elements.length) {\n      return this;\n    }\n    this.elements = elements;\n    this.setId(this.getId());\n    this.target = elements[0].style;\n    this.targetFunc = function (frame) {\n      var attributes = frame.get(\"attribute\");\n      if (attributes) {\n        var _loop_2 = function (name_2) {\n          elements.forEach(function (el) {\n            el.setAttribute(name_2, attributes[name_2]);\n          });\n        };\n        for (var name_2 in attributes) {\n          _loop_2(name_2);\n        }\n      }\n      if (frame.has(\"html\")) {\n        var html_1 = frame.get(\"html\");\n        elements.forEach(function (el) {\n          el.innerHTML = html_1;\n        });\n      }\n      var cssText = frame.toCSSText();\n      if (state.cssText !== cssText) {\n        state.cssText = cssText;\n        elements.forEach(function (el) {\n          el.style.cssText += cssText;\n        });\n        return frame;\n      }\n    };\n    return this;\n  };\n  SceneItem.prototype.setTarget = function (target) {\n    this.target = target;\n    this.targetFunc = function (frame) {\n      var obj = frame.get();\n      for (var name_3 in obj) {\n        target[name_3] = obj[name_3];\n      }\n    };\n    return this;\n  };\n  /**\n    * add css styles of items's element to the frame at that time.\n    * @param - Time to synchronize and set css\n    * @param - elements to synchronize item's keyframes.\n    * @return {SceneItem} An instance itself\n    * @example\n  item.setElement(document.querySelector(\"#id.class\"));\n  item.setCSS(0, [\"opacity\"]);\n  item.setCSS(0, [\"opacity\", \"width\", \"height\"]);\n    */\n  SceneItem.prototype.setCSS = function (time, properties) {\n    if (properties === void 0) {\n      properties = [];\n    }\n    this.set(time, fromCSS(this.elements, properties));\n    return this;\n  };\n  SceneItem.prototype.setTime = function (time, isTick, isParent, parentEasing) {\n    var _this = this;\n    _super.prototype.setTime.call(this, time, isTick, isParent, function () {\n      var iterationTime = _this.getIterationTime();\n      var easing = _this.getEasing() || parentEasing;\n      var frame = _this.getNowFrame(iterationTime, easing);\n      var currentTime = _this.getTime();\n      _this.temp = frame;\n      /**\n       * This event is fired when timeupdate and animate.\n       * @event SceneItem#animate\n       * @param {Number} param.currentTime The total time that the animator is running.\n       * @param {Number} param.time The iteration time during duration that the animator is running.\n       * @param {Frame} param.frame frame of that time.\n       */\n      _this.trigger(\"animate\", {\n        frame: frame,\n        currentTime: currentTime,\n        time: iterationTime\n      });\n      _this.targetFunc && _this.targetFunc(frame);\n    });\n    return this;\n  };\n  /**\n    * update property names used in frames.\n    * @return {SceneItem} An instance itself\n    * @example\n  item.update();\n    */\n  SceneItem.prototype.update = function () {\n    var prevNameMap = this.nameMap;\n    var names = {};\n    this.forEach(function (frame) {\n      updateFrame(names, frame.properties);\n    });\n    var nameMap = new OrderMap(NAME_SEPARATOR);\n    function pushKeys(map, stack) {\n      var keys = getKeys(map);\n      sortOrders(keys, prevNameMap.get(stack));\n      nameMap.set(stack, keys);\n      keys.forEach(function (key) {\n        var nextMap = map[key];\n        if (isObject(nextMap)) {\n          pushKeys(nextMap, __spreadArray(__spreadArray([], stack, true), [key], false));\n        }\n      });\n    }\n    pushKeys(names, []);\n    this.nameMap = nameMap;\n    this.forEach(function (frame) {\n      frame.setOrderObject(nameMap.orderMap);\n    });\n    this.needUpdate = false;\n    return this;\n  };\n  /**\n    * Create and add a frame to the sceneItem at that time\n    * @param {Number} time - frame's time\n    * @return {Frame} Created frame.\n    * @example\n  item.newFrame(time);\n    */\n  SceneItem.prototype.newFrame = function (time) {\n    var frame = this.getFrame(time);\n    if (frame) {\n      return frame;\n    }\n    frame = new Frame();\n    this.setFrame(time, frame);\n    return frame;\n  };\n  /**\n    * Add a frame to the sceneItem at that time\n    * @param {Number} time - frame's time\n    * @return {SceneItem} An instance itself\n    * @example\n  item.setFrame(time, frame);\n    */\n  SceneItem.prototype.setFrame = function (time, frame) {\n    var realTime = this.getUnitTime(time);\n    this.items[realTime] = frame;\n    addTime(this.times, realTime);\n    this.needUpdate = true;\n    return this;\n  };\n  /**\n    * get sceneItem's frame at that time\n    * @param {Number} time - frame's time\n    * @return {Frame} sceneItem's frame at that time\n    * @example\n  const frame = item.getFrame(time);\n    */\n  SceneItem.prototype.getFrame = function (time) {\n    return this.items[this.getUnitTime(time)];\n  };\n  /**\n    * remove sceneItem's frame at that time\n    * @param - frame's time\n    * @return {SceneItem} An instance itself\n    * @example\n  item.removeFrame(time);\n    */\n  SceneItem.prototype.removeFrame = function (time) {\n    var realTime = this.getUnitTime(time);\n    var items = this.items;\n    var index = this.times.indexOf(realTime);\n    delete items[realTime];\n    // remove time\n    if (index > -1) {\n      this.times.splice(index, 1);\n    }\n    this.needUpdate = true;\n    return this;\n  };\n  /**\n    * check if the item has a frame at that time\n    * @param {Number} time - frame's time\n    * @return {Boolean} true: the item has a frame // false: not\n    * @example\n  if (item.hasFrame(10)) {\n    // has\n  } else {\n    // not\n  }\n    */\n  SceneItem.prototype.hasFrame = function (time) {\n    return this.getUnitTime(time) in this.items;\n  };\n  /**\n    * Check if keyframes has propery's name\n    * @param - property's time\n    * @return {boolean} true: if has property, false: not\n    * @example\n  item.hasName([\"transform\", \"translate\"]); // true or not\n    */\n  SceneItem.prototype.hasName = function (args) {\n    this.needUpdate && this.update();\n    return !!this.nameMap.get(args);\n  };\n  /**\n    * merge frame of the previous time at the next time.\n  * @param - The time of the frame to merge\n  * @param - The target frame\n    * @return {SceneItem} An instance itself\n    * @example\n  // getFrame(1) contains getFrame(0)\n  item.merge(0, 1);\n    */\n  SceneItem.prototype.mergeFrame = function (time, frame) {\n    if (frame) {\n      var toFrame = this.newFrame(time);\n      toFrame.merge(frame);\n    }\n    return this;\n  };\n  /**\n    * Get frame of the current time\n    * @param {Number} time - the current time\n    * @param {function} easing - the speed curve of an animation\n    * @return {Frame} frame of the current time\n    * @example\n  let item = new SceneItem({\n    0: {\n        display: \"none\",\n    },\n    1: {\n        display: \"block\",\n        opacity: 0,\n    },\n    2: {\n        opacity: 1,\n    }\n  });\n  // opacity: 0.7; display:\"block\";\n  const frame = item.getNowFrame(1.7);\n    */\n  SceneItem.prototype.getNowFrame = function (time, parentEasing, isAccurate) {\n    var _this = this;\n    this.needUpdate && this.update();\n    var frame = new Frame();\n    var _a = getNearTimeIndex(this.times, time),\n      left = _a[0],\n      right = _a[1];\n    var realEasing = this.getEasing() || parentEasing;\n    var nameMap = this.nameMap;\n    if (this.hasName([TIMING_FUNCTION])) {\n      var nowEasing = this.getNowValue(time, [TIMING_FUNCTION], left, right, false, 0, true);\n      isFunction(nowEasing) && (realEasing = nowEasing);\n    }\n    if (isAccurate) {\n      var prevFrame_1 = this.getFrame(time);\n      var prevOrderMap = prevFrame_1.orderMap.filter([], function (orders) {\n        return prevFrame_1.has.apply(prevFrame_1, orders);\n      });\n      for (var name_4 in ROLES) {\n        var orders = nameMap.get([name_4]);\n        if (prevOrderMap.get([name_4]) && orders) {\n          prevOrderMap.set([name_4], orders);\n        }\n      }\n      nameMap = prevOrderMap;\n    }\n    var names = nameMap.gets([]);\n    frame.setOrderObject(nameMap.orderMap);\n    names.forEach(function (properties) {\n      var value = _this.getNowValue(time, properties, left, right, isAccurate, realEasing, isFixed(properties));\n      if (isUndefined(value)) {\n        return;\n      }\n      frame.set(properties, value);\n    });\n    return frame;\n  };\n  /**\n   * Get the current computed frame.\n   * (If needUpdate is true, get a new computed frame, not the temp that has already been saved.)\n   */\n  SceneItem.prototype.getCurrentFrame = function (needUpdate, parentEasing) {\n    var iterationTime = this.getIterationTime();\n    var frame = needUpdate || this.needUpdate || !this.temp ? this.getComputedFrame(iterationTime, parentEasing) : this.temp;\n    this.temp = frame;\n    return frame;\n  };\n  /**\n   * Get the computed frame corresponding to the time.\n   */\n  SceneItem.prototype.getComputedFrame = function (time, parentEasing, isAccurate) {\n    return this.getNowFrame(time, parentEasing, isAccurate);\n  };\n  SceneItem.prototype.load = function (properties, options) {\n    var _a;\n    if (properties === void 0) {\n      properties = {};\n    }\n    if (options === void 0) {\n      options = properties.options;\n    }\n    options && this.setOptions(options);\n    if (isArray(properties)) {\n      this.set(properties);\n    } else if (properties.keyframes) {\n      this.set(properties.keyframes);\n    } else {\n      for (var time in properties) {\n        if (time !== \"options\") {\n          this.set((_a = {}, _a[time] = properties[time], _a));\n        }\n      }\n    }\n    if (options && options[DURATION]) {\n      this.setDuration(options[DURATION]);\n    }\n    return this;\n  };\n  /**\n     * clone SceneItem.\n     * @return {SceneItem} An instance of clone\n     * @example\n     * item.clone();\n     */\n  SceneItem.prototype.clone = function () {\n    var item = new SceneItem();\n    item.setOptions(this.state);\n    item.setOrderObject(this.nameMap.orderMap);\n    this.forEach(function (frame, time) {\n      item.setFrame(time, frame.clone());\n    });\n    return item;\n  };\n  /**\n     * executes a provided function once for each scene item.\n     * @param - Function to execute for each element, taking three arguments\n     * @return {Keyframes} An instance itself\n     */\n  SceneItem.prototype.forEach = function (callback) {\n    var times = this.times;\n    var items = this.items;\n    times.forEach(function (time) {\n      callback(items[time], time, items);\n    });\n    return this;\n  };\n  SceneItem.prototype.setOptions = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n    _super.prototype.setOptions.call(this, options);\n    var id = options.id,\n      selector = options.selector,\n      elements = options.elements,\n      element = options.element,\n      target = options.target;\n    id && this.setId(id);\n    if (target) {\n      this.setTarget(target);\n    } else if (selector) {\n      this.setSelector(selector);\n    } else if (elements || element) {\n      this.setElement(elements || element);\n    }\n    return this;\n  };\n  SceneItem.prototype.toCSS = function (playCondition, parentDuration, states) {\n    if (playCondition === void 0) {\n      playCondition = {\n        className: START_ANIMATION\n      };\n    }\n    if (parentDuration === void 0) {\n      parentDuration = this.getDuration();\n    }\n    if (states === void 0) {\n      states = [];\n    }\n    var itemState = this.state;\n    var selector = itemState[SELECTOR];\n    if (!selector) {\n      return \"\";\n    }\n    var originalDuration = this.getDuration();\n    itemState[DURATION] = originalDuration;\n    states.push(itemState);\n    var reversedStates = toArray(states).reverse();\n    var id = toId(getRealId(this));\n    var superParent = states[0];\n    var infiniteIndex = findIndex(reversedStates, function (state) {\n      return state[ITERATION_COUNT] === INFINITE || !isFinite(state[DURATION]);\n    }, states.length - 1);\n    var finiteStates = reversedStates.slice(0, infiniteIndex);\n    var duration = parentDuration || finiteStates.reduce(function (prev, cur) {\n      return (cur[DELAY] + prev * cur[ITERATION_COUNT]) / cur[PLAY_SPEED];\n    }, originalDuration);\n    var delay = reversedStates.slice(infiniteIndex).reduce(function (prev, cur) {\n      return (prev + cur[DELAY]) / cur[PLAY_SPEED];\n    }, 0);\n    var easingName = find(reversedStates, function (state) {\n      return state[EASING] && state[EASING_NAME];\n    }, itemState)[EASING_NAME];\n    var iterationCount = reversedStates[infiniteIndex][ITERATION_COUNT];\n    var fillMode = superParent[FILL_MODE];\n    var direction = reversedStates[infiniteIndex][DIRECTION];\n    var cssText = makeAnimationProperties({\n      fillMode: fillMode,\n      direction: direction,\n      iterationCount: iterationCount,\n      delay: \"\".concat(delay, \"s\"),\n      name: \"\".concat(PREFIX, \"KEYFRAMES_\").concat(id),\n      duration: \"\".concat(duration / superParent[PLAY_SPEED], \"s\"),\n      timingFunction: easingName\n    });\n    var selectors = splitComma(selector).map(function (sel) {\n      var matches = /([\\s\\S]+)(:+[a-zA-Z]+)$/g.exec(sel);\n      if (matches) {\n        return [matches[1], matches[2]];\n      } else {\n        return [sel, \"\"];\n      }\n    });\n    var className = playCondition.className;\n    var selectorCallback = playCondition.selector;\n    var preselector = isFunction(selectorCallback) ? selectorCallback(this, selector) : selectorCallback;\n    return \"\\n    \".concat(preselector || selectors.map(function (_a) {\n      var sel = _a[0],\n        peusdo = _a[1];\n      return \"\".concat(sel, \".\").concat(className).concat(peusdo);\n    }), \" {\").concat(cssText, \"}\\n    \").concat(selectors.map(function (_a) {\n      var sel = _a[0],\n        peusdo = _a[1];\n      return \"\".concat(sel, \".\").concat(PAUSE_ANIMATION).concat(peusdo);\n    }), \" {\").concat(ANIMATION, \"-play-state: paused;}\\n    @\").concat(KEYFRAMES, \" \").concat(PREFIX, \"KEYFRAMES_\").concat(id, \"{\").concat(this._toKeyframes(duration, finiteStates, direction), \"}\");\n  };\n  /**\n   * Export the CSS of the items to the style.\n   * @param - Add a selector or className to play.\n   * @return {SceneItem} An instance itself\n   */\n  SceneItem.prototype.exportCSS = function (playCondition, duration, options) {\n    if (!this.elements.length) {\n      return \"\";\n    }\n    var css = this.toCSS(playCondition, duration, options);\n    var isParent = options && !isUndefined(options[ITERATION_COUNT]);\n    if (!isParent) {\n      if (this.styledInjector) {\n        this.styledInjector.destroy();\n        this.styledInjector = null;\n      }\n      this.styled = styled(css);\n      this.styledInjector = this.styled.inject(this.getAnimationElement(), {\n        original: true\n      });\n    }\n    return this;\n  };\n  SceneItem.prototype.pause = function () {\n    _super.prototype.pause.call(this);\n    isPausedCSS(this) && this.pauseCSS();\n    return this;\n  };\n  SceneItem.prototype.pauseCSS = function () {\n    this.elements.forEach(function (element) {\n      addClass(element, PAUSE_ANIMATION);\n    });\n    return this;\n  };\n  SceneItem.prototype.endCSS = function () {\n    this.elements.forEach(function (element) {\n      removeClass(element, PAUSE_ANIMATION);\n      removeClass(element, START_ANIMATION);\n    });\n    setPlayCSS(this, false);\n    return this;\n  };\n  SceneItem.prototype.end = function () {\n    isEndedCSS(this) && this.endCSS();\n    _super.prototype.end.call(this);\n    return this;\n  };\n  /**\n    * Play using the css animation and keyframes.\n    * @param - Check if you want to export css.\n    * @param [playClassName=\"startAnimation\"] - Add a class name to play.\n    * @param - The shorthand properties for six of the animation properties.\n    * @see {@link https://www.w3schools.com/cssref/css3_pr_animation.asp}\n    * @example\n  item.playCSS();\n  item.playCSS(false, \"startAnimation\", {\n    direction: \"reverse\",\n    fillMode: \"forwards\",\n  });\n    */\n  SceneItem.prototype.playCSS = function (isExportCSS, playClassName, properties) {\n    if (isExportCSS === void 0) {\n      isExportCSS = true;\n    }\n    if (properties === void 0) {\n      properties = {};\n    }\n    playCSS(this, isExportCSS, playClassName, properties);\n    return this;\n  };\n  SceneItem.prototype.getAnimationElement = function () {\n    return this.elements[0];\n  };\n  SceneItem.prototype.addPlayClass = function (isPaused, playClassName, properties) {\n    if (properties === void 0) {\n      properties = {};\n    }\n    var elements = this.elements;\n    var length = elements.length;\n    var cssText = makeAnimationProperties(properties);\n    if (!length) {\n      return;\n    }\n    if (isPaused) {\n      elements.forEach(function (element) {\n        removeClass(element, PAUSE_ANIMATION);\n      });\n    } else {\n      elements.forEach(function (element) {\n        element.style.cssText += cssText;\n        if (hasClass(element, START_ANIMATION)) {\n          removeClass(element, START_ANIMATION);\n        }\n      });\n      elements.forEach(function (element) {\n        element.clientWidth;\n      });\n      elements.forEach(function (element) {\n        addClass(element, START_ANIMATION);\n      });\n    }\n    return elements[0];\n  };\n  /**\n    * Clear All Frames\n    * @return {SceneItem} An instance itself\n    */\n  SceneItem.prototype.clear = function () {\n    this.times = [];\n    this.items = {};\n    this.nameMap = new OrderMap(NAME_SEPARATOR);\n    if (this.styledInjector) {\n      this.styledInjector.destroy();\n    }\n    this.styled = null;\n    this.styledInjector = null;\n    this.temp = null;\n    this.needUpdate = true;\n    return this;\n  };\n  SceneItem.prototype.getNowValue = function (time, properties, left, right, isAccurate, easing, usePrevValue) {\n    var times = this.times;\n    var length = times.length;\n    var prevTime;\n    var nextTime;\n    var prevFrame;\n    var nextFrame;\n    var isUndefinedLeft = isUndefined(left);\n    var isUndefinedRight = isUndefined(right);\n    if (isUndefinedLeft || isUndefinedRight) {\n      var indicies = getNearTimeIndex(times, time);\n      isUndefinedLeft && (left = indicies[0]);\n      isUndefinedRight && (right = indicies[1]);\n    }\n    for (var i = left; i >= 0; --i) {\n      var frame = this.getFrame(times[i]);\n      if (frame.has.apply(frame, properties)) {\n        prevTime = times[i];\n        prevFrame = frame;\n        break;\n      }\n    }\n    var prevValue = prevFrame && prevFrame.raw.apply(prevFrame, properties);\n    if (isAccurate && !isRole([properties[0]])) {\n      return prevTime === time ? prevValue : undefined;\n    }\n    if (usePrevValue) {\n      return prevValue;\n    }\n    for (var i = right; i < length; ++i) {\n      var frame = this.getFrame(times[i]);\n      if (frame.has.apply(frame, properties)) {\n        nextTime = times[i];\n        nextFrame = frame;\n        break;\n      }\n    }\n    var nextValue = nextFrame && nextFrame.raw.apply(nextFrame, properties);\n    if (!prevFrame || isUndefined(prevValue)) {\n      return nextValue;\n    }\n    if (!nextFrame || isUndefined(nextValue) || prevValue === nextValue) {\n      return prevValue;\n    }\n    return dotValue(time, Math.max(prevTime, 0), nextTime, prevValue, nextValue, easing);\n  };\n  SceneItem.prototype._toKeyframes = function (duration, states, direction) {\n    var _this = this;\n    var frames = {};\n    var times = this.times.slice();\n    if (!times.length) {\n      return \"\";\n    }\n    var originalDuration = this.getDuration();\n    !this.getFrame(0) && times.unshift(0);\n    !this.getFrame(originalDuration) && times.push(originalDuration);\n    var entries = getEntries(times, states);\n    var lastEntry = entries[entries.length - 1];\n    // end delay time\n    lastEntry[0] < duration && addEntry(entries, duration, lastEntry[1]);\n    var prevTime = -1;\n    return entries.map(function (_a) {\n      var time = _a[0],\n        keytime = _a[1];\n      if (!frames[keytime]) {\n        frames[keytime] = (!_this.hasFrame(keytime) || keytime === 0 || keytime === originalDuration ? _this.getNowFrame(keytime) : _this.getNowFrame(keytime, 0, true)).toCSSText();\n      }\n      var frameTime = time / duration * 100;\n      if (frameTime - prevTime < THRESHOLD) {\n        frameTime += THRESHOLD;\n      }\n      prevTime = frameTime;\n      return \"\".concat(Math.min(frameTime, 100), \"%{\\n                \").concat(time === 0 && !isDirectionReverse(0, 1, direction) ? \"\" : frames[keytime], \"\\n            }\");\n    }).join(\"\");\n  };\n  SceneItem.prototype.updateFrameOrders = function () {\n    var nameMap = this.nameMap.orderMap;\n    this.forEach(function (frame) {\n      frame.setOrderObject(nameMap);\n    });\n  };\n  return SceneItem;\n}(Animator);\n\n/**\n * manage sceneItems and play Scene.\n * @extends Animator\n * @sort 1\n */\nvar Scene = /*#__PURE__*/function (_super) {\n  __extends(Scene, _super);\n  /**\n  * @param - properties\n  * @param - options\n  * @example\n  const scene = new Scene({\n    item1: {\n      0: {\n        display: \"none\",\n      },\n      1: {\n        display: \"block\",\n        opacity: 0,\n      },\n      2: {\n        opacity: 1,\n      },\n    },\n    item2: {\n      2: {\n        opacity: 1,\n      },\n    }\n  });\n    */\n  function Scene(properties, options) {\n    var _this = _super.call(this) || this;\n    _this.items = {};\n    _this.orderMap = new OrderMap(NAME_SEPARATOR);\n    _this.load(properties, options);\n    return _this;\n  }\n  Scene.prototype.getDuration = function () {\n    var time = 0;\n    this.forEach(function (item) {\n      time = Math.max(time, item.getTotalDuration() / item.getPlaySpeed());\n    });\n    return time || this.state[DURATION];\n  };\n  Scene.prototype.setDuration = function (duration) {\n    this.items;\n    var sceneDuration = this.getDuration();\n    if (duration === 0 || !isFinite(sceneDuration)) {\n      return this;\n    }\n    if (sceneDuration === 0) {\n      this.forEach(function (item) {\n        item.setDuration(duration);\n      });\n    } else {\n      var ratio_1 = duration / sceneDuration;\n      this.forEach(function (item) {\n        item.setDelay(item.getDelay() * ratio_1);\n        item.setDuration(item.getDuration() * ratio_1);\n      });\n    }\n    _super.prototype.setDuration.call(this, duration);\n    return this;\n  };\n  /**\n  * get item in scene by name\n  * @param - The item's name\n  * @return {Scene | SceneItem} item\n  * @example\n  const item = scene.getItem(\"item1\")\n  */\n  Scene.prototype.getItem = function (name) {\n    return this.items[name];\n  };\n  /**\n  * create item in scene\n  * @param {} name - name of item to create\n  * @param {} options - The option object of SceneItem\n  * @return {} Newly created item\n  * @example\n  const item = scene.newItem(\"item1\")\n  */\n  Scene.prototype.newItem = function (name, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    if (this.items[name]) {\n      return this.items[name];\n    }\n    var item = new SceneItem();\n    this.setItem(name, item);\n    item.setOptions(options);\n    return item;\n  };\n  /**\n  * remove item in scene\n  * @param - name of item to remove\n  * @return  An instance itself\n  * @example\n  const item = scene.newItem(\"item1\")\n   scene.removeItem(\"item1\");\n  */\n  Scene.prototype.removeItem = function (name) {\n    delete this.items[name];\n    this.orderMap.remove([name]);\n    return this;\n  };\n  /**\n  * add a sceneItem to the scene\n  * @param - name of item to create\n  * @param - sceneItem\n  * @example\n  const item = scene.newItem(\"item1\")\n  */\n  Scene.prototype.setItem = function (name, item) {\n    item.setId(name);\n    this.items[name] = item;\n    this.orderMap.add([name]);\n    return this;\n  };\n  /**\n  * Get the current computed frames.\n  * (If needUpdate is true, get a new computed frames, not the temp that has already been saved.)\n  */\n  Scene.prototype.getCurrentFrames = function (needUpdate, parentEasing) {\n    var easing = this.getEasing() || parentEasing;\n    var frames = {};\n    this.forEach(function (item) {\n      var id = item.getId();\n      if (isScene(item)) {\n        frames[id] = item.getCurrentFrames(needUpdate, easing);\n      } else {\n        frames[id] = item.getCurrentFrame(needUpdate, easing);\n      }\n    });\n    this.temp = frames;\n    return frames;\n  };\n  /**\n  * Get the current flatted computed frames.\n  * (If needUpdate is true, get a new computed frames, not the temp that has already been saved.)\n  * If there is a scene in the scene, you can get a flatted frame map.\n  * @example\n  * import Scene, { NAME_SEPARATOR } from \"scenejs\";\n  *\n  * {\n  *   \"a\": Frame,\n  *   \"b\": {\n  *     \"b1\": Frame,\n  *     \"b2\": Frame,\n  *   },\n  * }\n  * const frames = scene.getCurrentFrames();\n  * {\n  *   \"a\": Frame,\n  *   \"b_///_b1\": Frame,\n  *   \"b_///_b2\": Frame,\n  * }\n  * const frames = scene.getCurrentFlattedFrames();\n  *\n  */\n  Scene.prototype.getCurrentFlattedFrames = function (needUpdate, parentEasing) {\n    var frames = this.getCurrentFrames(needUpdate, parentEasing);\n    return flatSceneObject(frames, NAME_SEPARATOR);\n  };\n  Scene.prototype.setTime = function (time, isTick, isParent, parentEasing) {\n    var _this = this;\n    _super.prototype.setTime.call(this, time, isTick, isParent, function () {\n      var iterationTime = _this.getIterationTime();\n      var easing = _this.getEasing() || parentEasing;\n      _this.forEach(function (item) {\n        item.setTime(iterationTime * item.getPlaySpeed() - item.getDelay(), isTick, true, easing);\n      });\n      var frames = _this.getCurrentFrames(false, parentEasing);\n      /**\n       * This event is fired when timeupdate and animate.\n       * @event Scene#animate\n       * @param {object} param The object of data to be sent to an event.\n       * @param {number} param.currentTime The total time that the animator is running.\n       * @param {number} param.time The iteration time during duration that the animator is running.\n       * @param {object} param.frames frames of that time.\n       * @example\n      const scene = new Scene({\n      a: {\n      0: {\n      opacity: 0,\n      },\n      1: {\n      opacity: 1,\n      }\n      },\n      b: {\n      0: {\n      opacity: 0,\n      },\n      1: {\n      opacity: 1,\n      }\n      }\n      }).on(\"animate\", e => {\n      console.log(e.frames);\n      // {a: Frame, b: Frame}\n      console.log(e.frames.a.get(\"opacity\"));\n      });\n           */\n      _this.trigger(\"animate\", {\n        frames: frames,\n        currentTime: _this.getTime(),\n        time: iterationTime\n      });\n    });\n    return this;\n  };\n  /**\n   * executes a provided function once for each scene item.\n   * @param - Function to execute for each element, taking three arguments\n   * @return {Scene} An instance itself\n   */\n  Scene.prototype.forEach = function (func) {\n    var items = this.items;\n    this.getOrders().forEach(function (id, index) {\n      func(items[id], id, index, items);\n    });\n    return this;\n  };\n  Scene.prototype.toCSS = function (playCondition, duration, parentStates) {\n    if (duration === void 0) {\n      duration = this.getDuration();\n    }\n    if (parentStates === void 0) {\n      parentStates = [];\n    }\n    var totalDuration = !duration || !isFinite(duration) ? 0 : duration;\n    var styles = [];\n    var state = this.state;\n    state[DURATION] = this.getDuration();\n    this.forEach(function (item) {\n      styles.push(item.toCSS(playCondition, totalDuration, parentStates.concat(state)));\n    });\n    return styles.join(\"\");\n  };\n  /**\n   * Export the CSS of the items to the style.\n   * @param - Add a selector or className to play.\n   * @return {Scene} An instance itself\n   */\n  Scene.prototype.exportCSS = function (playCondition, duration, parentStates) {\n    var css = this.toCSS(playCondition, duration, parentStates);\n    if (!parentStates || !parentStates.length) {\n      if (this.styledInjector) {\n        this.styledInjector.destroy();\n        this.styledInjector = null;\n      }\n      this.styled = styled(css);\n      this.styledInjector = this.styled.inject(this.getAnimationElement(), {\n        original: true\n      });\n      // && exportCSS(getRealId(this), css);\n    }\n\n    return this;\n  };\n  Scene.prototype.append = function (item) {\n    item.setDelay(item.getDelay() + this.getDuration());\n    this.setItem(getRealId(item), item);\n  };\n  Scene.prototype.pauseCSS = function () {\n    return this.forEach(function (item) {\n      item.pauseCSS();\n    });\n  };\n  Scene.prototype.pause = function () {\n    _super.prototype.pause.call(this);\n    isPausedCSS(this) && this.pauseCSS();\n    this.forEach(function (item) {\n      item.pause();\n    });\n    return this;\n  };\n  Scene.prototype.endCSS = function () {\n    this.forEach(function (item) {\n      item.endCSS();\n    });\n    setPlayCSS(this, false);\n  };\n  Scene.prototype.end = function () {\n    isEndedCSS(this) && this.endCSS();\n    _super.prototype.end.call(this);\n    return this;\n  };\n  /**\n  * get item orders\n  * @example\n  scene.getOrders() // => [\"item1\", \"item2\"]\n  */\n  Scene.prototype.getOrders = function () {\n    return this.orderMap.get([]) || [];\n  };\n  /**\n    * set item orders\n    * @param - orders\n    * @example\n    frame.setOrders([\"item2\", \"item1\"]) // => [\"item2\", \"item1\"]\n    */\n  Scene.prototype.setOrders = function (orders) {\n    return this.orderMap.set([], orders);\n  };\n  Scene.prototype.getAnimationElement = function () {\n    var animtionElement;\n    this.forEach(function (item) {\n      var el = item.getAnimationElement();\n      !animtionElement && (animtionElement = el);\n    });\n    return animtionElement;\n  };\n  Scene.prototype.addPlayClass = function (isPaused, playClassName, properties) {\n    if (properties === void 0) {\n      properties = {};\n    }\n    var animtionElement;\n    this.forEach(function (item) {\n      var el = item.addPlayClass(isPaused, playClassName, properties);\n      !animtionElement && (animtionElement = el);\n    });\n    return animtionElement;\n  };\n  /**\n  * Play using the css animation and keyframes.\n  * @param - Check if you want to export css.\n  * @param [playClassName=\"startAnimation\"] - Add a class name to play.\n  * @param - The shorthand properties for six of the animation properties.\n  * @return {Scene} An instance itself\n  * @see {@link https://www.w3schools.com/cssref/css3_pr_animation.asp}\n  * @example\n  scene.playCSS();\n  scene.playCSS(false, {\n  direction: \"reverse\",\n  fillMode: \"forwards\",\n  });\n  */\n  Scene.prototype.playCSS = function (isExportCSS, playClassName, properties) {\n    if (isExportCSS === void 0) {\n      isExportCSS = true;\n    }\n    if (properties === void 0) {\n      properties = {};\n    }\n    playCSS(this, isExportCSS, playClassName, properties);\n    return this;\n  };\n  /**\n    * Set properties to the Scene.\n    * @param - properties\n    * @return An instance itself\n    * @example\n  scene.set({\n  \".a\": {\n      0: {\n          opacity: 0,\n      },\n      1: {\n          opacity: 1,\n      },\n  },\n  });\n  // 0\n  console.log(scene.getItem(\".a\").get(0, \"opacity\"));\n  // 1\n  console.log(scene.getItem(\".a\").get(1, \"opacity\"));\n    */\n  Scene.prototype.set = function (properties) {\n    this.load(properties);\n    return this;\n  };\n  /**\n    * Clear All Items\n    * @return {Scene} An instance itself\n    */\n  Scene.prototype.clear = function () {\n    this.finish();\n    this.items = {};\n    this.orderMap = new OrderMap(NAME_SEPARATOR);\n    if (this.styledInjector) {\n      this.styledInjector.destroy();\n    }\n    this.styled = null;\n    this.styledInjector = null;\n  };\n  Scene.prototype.load = function (properties, options) {\n    if (properties === void 0) {\n      properties = {};\n    }\n    if (options === void 0) {\n      options = properties.options;\n    }\n    if (!properties) {\n      return this;\n    }\n    var selector = options && options[SELECTOR] || this.state[SELECTOR];\n    var _loop_1 = function (name_1) {\n      if (name_1 === \"options\") {\n        return \"continue\";\n      }\n      var object = properties[name_1];\n      var item = void 0;\n      if (isScene(object) || isSceneItem(object)) {\n        this_1.setItem(name_1, object);\n        item = object;\n      } else if (isFunction(object)) {\n        var elements = [];\n        if (selector && IS_WINDOW) {\n          elements = $(\"\".concat(isFunction(selector) ? selector(name_1) : name_1), true);\n        }\n        var elementsLength = elements.length;\n        var length_1 = elementsLength || object.defaultCount || 0;\n        var scene = new Scene();\n        var ids_1 = [];\n        for (var i = 0; i < length_1; ++i) {\n          var element = elements[i];\n          var subItem = scene.newItem(i);\n          subItem.setId().load(object(i, elements[i]));\n          ids_1.push(subItem.getId());\n          if (element) {\n            subItem.setElement(element);\n          }\n        }\n        if (!elementsLength) {\n          var subElements_1 = [];\n          scene.state[SELECTOR] = function (id) {\n            if (!subElements_1.length) {\n              subElements_1 = $(\"\".concat(isFunction(selector) ? selector(name_1) : name_1), true);\n            }\n            return subElements_1[ids_1.indexOf(id)];\n          };\n        }\n        this_1.setItem(name_1, scene);\n        return \"continue\";\n      } else {\n        item = this_1.newItem(name_1);\n        item.load(object);\n      }\n      selector && item.setSelector(selector);\n    };\n    var this_1 = this;\n    for (var name_1 in properties) {\n      _loop_1(name_1);\n    }\n    this.setOptions(options);\n  };\n  Scene.prototype.setOptions = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n    _super.prototype.setOptions.call(this, options);\n    var selector = options.selector;\n    if (selector) {\n      this.state[SELECTOR] = selector;\n    }\n    return this;\n  };\n  Scene.prototype.setSelector = function (target) {\n    var state = this.state;\n    var selector = target === true ? state[SELECTOR] || true : target;\n    state[SELECTOR] = selector;\n    var isItFunction = isFunction(target);\n    if (selector) {\n      this.forEach(function (item, name) {\n        item.setSelector(isItFunction ? target(name) : selector);\n      });\n    }\n    return this;\n  };\n  Scene.prototype.start = function (delay) {\n    if (delay === void 0) {\n      delay = this.state[DELAY];\n    }\n    var result = _super.prototype.start.call(this, delay);\n    if (result) {\n      this.forEach(function (item) {\n        item.start(0);\n      });\n    } else {\n      this.forEach(function (item) {\n        item.setPlayState(RUNNING);\n      });\n    }\n    return result;\n  };\n  /**\n  * version info\n  * @type {string}\n  * @example\n  * Scene.VERSION // 1.9.4\n  */\n  Scene.VERSION = \"1.9.4\";\n  return Scene;\n}(Animator);\nfunction animate(properties, options) {\n  return new Scene(properties, options).play();\n}\nfunction animateItem(properties, options) {\n  return new SceneItem(properties, options).play();\n}\nfunction getMethodNames(classConstructor) {\n  var prototype = classConstructor.prototype;\n  return getKeys(prototype).filter(function (name) {\n    var descriptor = Object.getOwnPropertyDescriptor(prototype, name);\n    return !descriptor.get && !descriptor.set && isFunction(descriptor.value || prototype[name]);\n  });\n}\nvar EMITTER_METHODS = getMethodNames(EventEmitter);\nvar ANIMATOR_METHODS = __spreadArray(__spreadArray([], EMITTER_METHODS, true), getMethodNames(Animator), true);\nvar SCENE_METHODS = __spreadArray(__spreadArray([], ANIMATOR_METHODS, true), getMethodNames(Scene), true);\nvar SCENE_REACTIVE = {\n  methods: SCENE_METHODS,\n  created: function (data) {\n    var dataProps = data.props;\n    var dataObject = isFunction(dataProps) ? dataProps() : dataProps;\n    var scene = isScene(dataObject) ? dataObject : new Scene(dataObject, data.options);\n    var obj = scene.state;\n    var observers = getObservers(obj);\n    var totalDuration = computed(function () {\n      return scene.getTotalDuration();\n    });\n    var nextObj = __assign(__assign(__assign({\n      totalDuration: totalDuration\n    }, observers), SCENE_METHODS.reduce(function (methodObject, cur) {\n      methodObject[cur] = function () {\n        var _a;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        return (_a = scene[cur]).call.apply(_a, __spreadArray([scene], args, false));\n      };\n      return methodObject;\n    }, {})), {\n      getInstance: function () {\n        return scene;\n      }\n    });\n    var nextReactiveObject = reactive(nextObj);\n    return nextReactiveObject;\n  },\n  mounted: function (data, inst) {\n    var scene = inst.getInstance();\n    var state = scene.state;\n    var selector = state.selector;\n    if (selector && !state.__REACTIVE_MOUNTED__) {\n      inst.setSelector(selector);\n      state.__REACTIVE_MOUNTED__ = true;\n      inst.forEach(function mountFlag(child) {\n        var childState = child.state;\n        if (childState.selector) {\n          childState.__REACTIVE_MOUNTED__ = true;\n        }\n        if (isScene(child)) {\n          child.forEach(mountFlag);\n        }\n      });\n    }\n  },\n  on: function (inst, eventName, callback) {\n    inst.on(eventName, callback);\n  },\n  off: function (inst, eventName, callback) {\n    inst.off(eventName, callback);\n  },\n  destroy: function (inst) {\n    var scene = inst.getInstance();\n    var state = scene.state;\n    state.__REACTIVE_MOUNTED__ = false;\n    inst.forEach(function unmountFlag(child) {\n      child.state.__REACTIVE_MOUNTED__ = false;\n      if (isScene(child)) {\n        child.forEach(unmountFlag);\n      }\n    });\n  }\n};\nvar SCENE_ITEM_METHODS = __spreadArray(__spreadArray([], ANIMATOR_METHODS, true), getMethodNames(Scene), true);\nvar SCENE_ITEM_REACTIVE = {\n  methods: SCENE_ITEM_METHODS,\n  created: function (data) {\n    var dataProps = data.props;\n    var dataObject = isFunction(dataProps) ? dataProps() : dataProps;\n    var sceneItem = isSceneItem(dataObject) ? dataObject : new SceneItem(dataObject, data.options);\n    var obj = sceneItem.state;\n    var observers = getObservers(obj);\n    var totalDuration = computed(function () {\n      return sceneItem.getTotalDuration();\n    });\n    var nextObj = __assign(__assign(__assign({\n      totalDuration: totalDuration\n    }, observers), SCENE_ITEM_METHODS.reduce(function (methodObject, cur) {\n      methodObject[cur] = function () {\n        var _a;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        return (_a = sceneItem[cur]).call.apply(_a, __spreadArray([sceneItem], args, false));\n      };\n      return methodObject;\n    }, {})), {\n      getInstance: function () {\n        return sceneItem;\n      }\n    });\n    var nextReactiveObject = reactive(nextObj);\n    return nextReactiveObject;\n  },\n  mounted: function (data, inst) {\n    var item = inst.getInstance();\n    var state = item.state;\n    var selector = state.selector;\n    if (selector && !state.__REACTIVE_MOUNTED__) {\n      inst.setSelector(selector);\n      state.__REACTIVE_MOUNTED__ = true;\n    }\n  },\n  on: function (inst, eventName, callback) {\n    inst.on(eventName, callback);\n  },\n  off: function (inst, eventName, callback) {\n    inst.off(eventName, callback);\n  },\n  destroy: function (inst) {\n    var scene = inst.getInstance();\n    var state = scene.state;\n    state.__REACTIVE_MOUNTED__ = false;\n    inst.finish();\n  }\n};\nvar FRAME_METHODS = __spreadArray(__spreadArray([], ANIMATOR_METHODS, true), getMethodNames(Frame), true);\nvar FRAME_REACTIVE = {\n  methods: FRAME_METHODS,\n  created: function (data) {\n    var nextObject = isFunction(data) ? data() : data;\n    var updateCount = observe(0);\n    var frame;\n    if (isObserver(nextObject)) {\n      frame = nextObject;\n    } else {\n      frame = observe(isFrame(nextObject) ? nextObject : new Frame(nextObject));\n    }\n    var cssText = computed(function () {\n      frame.current;\n      updateCount.current;\n      return frame.current.toCSSText();\n    });\n    var cssObject = computed(function () {\n      frame.current;\n      cssText.current;\n      return frame.current.toCSSObject();\n    });\n    var camelCasedCSSObject = computed(function () {\n      frame.current;\n      cssText.current;\n      return frame.current.toCSSObject(true);\n    });\n    var onUpdate = function () {\n      ++updateCount.current;\n    };\n    frame.subscribe(function (currentFrame, prevFrame) {\n      prevFrame.off(\"update\", onUpdate);\n      currentFrame.on(\"update\", onUpdate);\n    });\n    var nextReactiveObject = reactive(__assign({\n      cssText: cssText,\n      cssObject: cssObject,\n      camelCasedCSSObject: camelCasedCSSObject,\n      onUpdate: onUpdate\n    }, FRAME_METHODS.reduce(function (obj, cur) {\n      obj[cur] = function () {\n        var _a;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        var currentFrame = frame.current;\n        return currentFrame === null || currentFrame === void 0 ? void 0 : (_a = currentFrame[cur]).call.apply(_a, __spreadArray([currentFrame], args, false));\n      };\n      return obj;\n    }, {})));\n    return nextReactiveObject;\n  },\n  destroy: function (inst) {\n    inst.off(\"update\", inst.onUpdate);\n  }\n};\nvar NOW_FRAME_REACTIVE = __assign(__assign({}, FRAME_REACTIVE), {\n  created: function (data) {\n    var nextObject = isFunction(data) ? data() : data;\n    var frame = observe(new Frame());\n    nextObject.on(\"animate\", function (e) {\n      frame.current = e.frame;\n    });\n    return FRAME_REACTIVE.created(frame);\n  }\n});\nexport { ANIMATOR_METHODS, Animator, EASE, EASE_IN, EASE_IN_OUT, EASE_OUT, EVENTS, FIXED, FRAME_METHODS, FRAME_REACTIVE, Frame, LINEAR, NAME_SEPARATOR, NOW_FRAME_REACTIVE, OPTIONS, ROLES, SCENE_ITEM_METHODS, SCENE_ITEM_REACTIVE, SCENE_METHODS, SCENE_REACTIVE, STEP_END, STEP_START, SceneItem, animate, animateItem, bezier, Scene as default, getMethodNames, isAnimator, isFrame, isRole, isScene, isSceneItem, rgbaToHexWithOpacity, rgbaToHexa, selectorAll, setAlias, setRole, steps };","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,aAAa,GAAG,UAASC,CAAC,EAAEC,CAAC,EAAE;EAC/BF,aAAa,GAAGG,MAAM,CAACC,cAAc,IAChC;IAAEC,SAAS,EAAE;EAAE,CAAE,YAAYC,KAAK,IAAI,UAAUL,CAAC,EAAEC,CAAC,EAAE;IAAED,CAAC,CAACI,SAAS,GAAGH,CAAC;EAAC,CAAG,IAC5E,UAAUD,CAAC,EAAEC,CAAC,EAAE;IAAE,KAAK,IAAIK,CAAC,IAAIL,CAAC,EAAE,IAAIC,MAAM,CAACK,SAAS,CAACC,cAAc,CAACC,IAAI,CAACR,CAAC,EAAEK,CAAC,CAAC,EAAEN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;EAAC,CAAE;EACrG,OAAOP,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;AAC9B,CAAC;AAEM,SAASS,SAAS,CAACV,CAAC,EAAEC,CAAC,EAAE;EAC5B,IAAI,OAAOA,CAAC,KAAK,UAAU,IAAIA,CAAC,KAAK,IAAI,EACrC,MAAM,IAAIU,SAAS,CAAC,sBAAsB,GAAGC,MAAM,CAACX,CAAC,CAAC,GAAG,+BAA+B,CAAC;EAC7FF,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;EACnB,SAASY,EAAE,GAAG;IAAE,IAAI,CAACC,WAAW,GAAGd,CAAC;EAAC;EACrCA,CAAC,CAACO,SAAS,GAAGN,CAAC,KAAK,IAAI,GAAGC,MAAM,CAACa,MAAM,CAACd,CAAC,CAAC,IAAIY,EAAE,CAACN,SAAS,GAAGN,CAAC,CAACM,SAAS,EAAE,IAAIM,EAAE,EAAE,CAAC;AACxF;AAEO,IAAIG,QAAQ,GAAG,YAAW;EAC7BA,QAAQ,GAAGd,MAAM,CAACe,MAAM,IAAI,SAASD,QAAQ,CAACE,CAAC,EAAE;IAC7C,KAAK,IAAIC,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGC,SAAS,CAACC,MAAM,EAAEH,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;MACjDD,CAAC,GAAGG,SAAS,CAACF,CAAC,CAAC;MAChB,KAAK,IAAId,CAAC,IAAIa,CAAC,EAAE,IAAIjB,MAAM,CAACK,SAAS,CAACC,cAAc,CAACC,IAAI,CAACU,CAAC,EAAEb,CAAC,CAAC,EAAEY,CAAC,CAACZ,CAAC,CAAC,GAAGa,CAAC,CAACb,CAAC,CAAC;IACxF;IACQ,OAAOY,CAAC;EAChB;EACI,OAAOF,QAAQ,CAACQ,KAAK,CAAC,IAAI,EAAEF,SAAS,CAAC;AAC1C;AAcO,SAASG,UAAU,CAACC,UAAU,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,EAAE;EACtD,IAAIC,CAAC,GAAGR,SAAS,CAACC,MAAM;IAAEQ,CAAC,GAAGD,CAAC,GAAG,CAAC,GAAGH,MAAM,GAAGE,IAAI,KAAK,IAAI,GAAGA,IAAI,GAAG3B,MAAM,CAAC8B,wBAAwB,CAACL,MAAM,EAAEC,GAAG,CAAC,GAAGC,IAAI;IAAE7B,CAAC;EAC5H,IAAI,OAAOiC,OAAO,KAAK,QAAQ,IAAI,OAAOA,OAAO,CAACC,QAAQ,KAAK,UAAU,EAAEH,CAAC,GAAGE,OAAO,CAACC,QAAQ,CAACR,UAAU,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,CAAC,CAAC,KAC1H,KAAK,IAAIT,CAAC,GAAGM,UAAU,CAACH,MAAM,GAAG,CAAC,EAAEH,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE,IAAIpB,CAAC,GAAG0B,UAAU,CAACN,CAAC,CAAC,EAAEW,CAAC,GAAG,CAACD,CAAC,GAAG,CAAC,GAAG9B,CAAC,CAAC+B,CAAC,CAAC,GAAGD,CAAC,GAAG,CAAC,GAAG9B,CAAC,CAAC2B,MAAM,EAAEC,GAAG,EAAEG,CAAC,CAAC,GAAG/B,CAAC,CAAC2B,MAAM,EAAEC,GAAG,CAAC,KAAKG,CAAC;EACjJ,OAAOD,CAAC,GAAG,CAAC,IAAIC,CAAC,IAAI7B,MAAM,CAACiC,cAAc,CAACR,MAAM,EAAEC,GAAG,EAAEG,CAAC,CAAC,EAAEA,CAAC;AACjE;AA6GO,SAASK,aAAa,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,EAAE;EAC1C,IAAIA,IAAI,IAAIjB,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEoB,CAAC,GAAGF,IAAI,CAACf,MAAM,EAAEkB,EAAE,EAAErB,CAAC,GAAGoB,CAAC,EAAEpB,CAAC,EAAE,EAAE;IACjF,IAAIqB,EAAE,IAAI,EAAErB,CAAC,IAAIkB,IAAI,CAAC,EAAE;MACpB,IAAI,CAACG,EAAE,EAAEA,EAAE,GAAGpC,KAAK,CAACE,SAAS,CAACmC,KAAK,CAACjC,IAAI,CAAC6B,IAAI,EAAE,CAAC,EAAElB,CAAC,CAAC;MACpDqB,EAAE,CAACrB,CAAC,CAAC,GAAGkB,IAAI,CAAClB,CAAC,CAAC;IAC3B;EACA;EACI,OAAOiB,EAAE,CAACM,MAAM,CAACF,EAAE,IAAIpC,KAAK,CAACE,SAAS,CAACmC,KAAK,CAACjC,IAAI,CAAC6B,IAAI,CAAC,CAAC;AAC5D;AC7KA,SAASM,KAAK,CAACC,EAAU,EAAEC,EAAU,EAAE5B,CAAS;EAC9C,IAAM6B,EAAE,GAAG,CAAC,GAAG7B,CAAC;;EAGhB,OAAOA,CAAC,GAAGA,CAAC,GAAGA,CAAC,GAAG,CAAC,GAAGA,CAAC,GAAGA,CAAC,GAAG6B,EAAE,GAAGD,EAAE,GAAG,CAAC,GAAG5B,CAAC,GAAG6B,EAAE,GAAGA,EAAE,GAAGF,EAAE;AAC/D;AACA,SAASG,UAAU,CAACC,EAAU,EAAEC,EAAU,EAAEC,CAAS;;;EAGnD,IAAIjC,CAAC,GAAGiC,CAAC;EACT,IAAIC,MAAM,GAAGD,CAAC;EACd,IAAIE,EAAE,GAAG,CAAC;EAEV,OAAOC,IAAI,CAACC,GAAG,CAACF,EAAE,CAAC,GAAG,CAAC,GAAG,IAAI,EAAE;;IAE9BD,MAAM,GAAGR,KAAK,CAACK,EAAE,EAAEC,EAAE,EAAEhC,CAAC,CAAC;IACzBmC,EAAE,GAAGD,MAAM,GAAGD,CAAC;;IAEf,IAAIG,IAAI,CAACC,GAAG,CAACF,EAAE,CAAC,GAAG,CAAC,GAAG,IAAI,EAAE;MAC3B,OAAOnC,CAAC;IACT;IACDA,CAAC,IAAImC,EAAE,GAAG,CAAC;EACZ;EACD,OAAOnC,CAAC;AACV;AACA;;AAEG;AACH;;;;;;;;;;;;;AAaE;AACI,SAAUsC,MAAM,CAACP,EAAU,EAAEJ,EAAU,EAAEK,EAAU,EAAEJ,EAAU;EACnE;;;;AAIC;EACD,IAAMW,IAAI,GAAmB,UAACN,CAAS;IACrC,IAAMjC,CAAC,GAAG8B,UAAU,CAACC,EAAE,EAAEC,EAAE,EAAEQ,OAAO,CAACP,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAE9C,OAAOP,KAAK,CAACC,EAAE,EAAEC,EAAE,EAAE5B,CAAC,CAAC;EACzB,CAAC;EAEDuC,IAAI,CAACE,UAAU,GAAG,uBAAgBV,EAAE,cAAIJ,EAAE,cAAIK,EAAE,cAAIJ,EAAE,MAAG;EACzD,OAAOW,IAAI;AACb;AACA;;;;;;;;;;;;AAYE;AACc,cAAK,CAACG,KAAa,EAAEC,QAAyB;EAC5D,IAAMJ,IAAI,GAAmB,UAACK,IAAY;IACxC,IAAMC,KAAK,GAAG,CAAC,GAAGH,KAAK;IAEvB,IAAIE,IAAI,IAAI,CAAC,EAAE;MACb,OAAO,CAAC;IACT;IACD,OAAO,CAACD,QAAQ,KAAK,OAAO,GAAGE,KAAK,GAAG,CAAC,IAAIT,IAAI,CAACU,KAAK,CAACF,IAAI,GAAGC,KAAK,CAAC,GAAGA,KAAK;EAC9E,CAAC;EAEDN,IAAI,CAACE,UAAU,GAAG,gBAASC,KAAK,EAAK,qBAAQ,MAAG;EAEhD,OAAOH,IAAI;AACb;AAEA;;;;;;;;;AASE;AACK,IAAMQ,UAAU,iBAAiBC,KAAK,CAAC,CAAC,EAAE,OAAO;AACxD;;;;;;;;;AASE;AACK,IAAMC,QAAQ,iBAAiBD,KAAK,CAAC,CAAC,EAAE,KAAK;AACpD;;;;;;;;;AASE;AACW,UAAM,iBAAiBV,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AACrD;;;;;;;;;AASE;AACW,QAAI,iBAAiBA,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;AAC3D;;;;;;;;;AASE;AACW,WAAO,iBAAiBA,MAAM,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AACzD;;;;;;;;;AASE;AACW,YAAQ,iBAAiBA,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC;AAC1D;;;;;;;;;AASE;AACW,eAAW,iBAAiBA,MAAM,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC;;AChKzD,IAAMY,MAAM,GAAG,YAAY;AAC3B,IAAMC,aAAa,GAAG,eAAe;AACrC,IAAMC,eAAe,GAAG,2BAA2B;IAC7CC,KAAK,GAAe;EAAEC,SAAS,EAAE,EAAE;EAAEC,MAAM,EAAE,EAAE;EAAEC,SAAS,EAAE,EAAE;EAAEC,IAAI,EAAE;AAAI;AAChF,IAAMC,KAAK,GAAsB;EAAEC,MAAM,EAAE,CAACP,eAAe;AAAC,CAAE;AACxD,SAAK,IAAKQ,YAACR,eAAe,CAAG,OAAI,EAAEQ,WAAQ,GAAE,IAAI,EAAEA,OAAI,GAAE,IAAI;AACnE,IAAMC,OAAO,GAAG,OAAO;AACvB,IAAMC,SAAS,GAAG,QAAQ;AAE1B,IAAMC,QAAQ,GAAG,UAAU;AAC3B,IAAMC,SAAS,GAAG,UAAU;AAC5B,IAAMC,SAAS,GAAG,WAAW;AAC7B,IAAMC,eAAe,GAAG,gBAAgB;AACxC,IAAMC,KAAK,GAAG,OAAO;AACrB,IAAMC,MAAM,GAAG,QAAQ;AACvB,IAAMC,UAAU,GAAG,WAAW;AAC9B,IAAMC,WAAW,GAAG,YAAY;AAChC,IAAMC,cAAc,GAAG,eAAe;AACtC,IAAMC,MAAM,GAAG,QAAQ;AACvB,IAAMC,KAAK,GAAG,OAAO;AACrB,IAAMC,UAAU,GAAG,YAAY;AAC/B,IAAMC,OAAO,GAAG,SAAS;AACzB,IAAMC,IAAI,GAAG,MAAM;AACnB,IAAMC,OAAO,GAAG,SAAS;AACzB,IAAMC,SAAS,GAAG,WAAW;AAC7B,IAAMC,eAAe,GAAG,gBAAgB;AACxC,IAAMC,eAAe,GAAG,gBAAgB;AACxC,IAAMC,SAAS,GAAG,WAAW;AAC7B,IAAMC,OAAO,GAAG,SAAS;AACzB,IAAMC,iBAAiB,GAAG,mBAAmB;AAC7C,IAAMC,MAAM,GAAG,QAAQ;AACvB,IAAMC,QAAQ,GAAG,UAAU;AAC3B,IAAMC,UAAU,GAAG,WAAW;AAC9B,IAAMC,QAAQ,GAAG,SAAS;AAC1B,IAAMC,SAAS,GAAG,UAAU;AAC5B,IAAMC,SAAS,GAAG,UAAU;AAC5B,IAAMC,YAAY,GAAG,aAAa;AAClC,IAAMC,QAAQ,GAAG,UAAU;AAC3B,IAAMC,cAAc,GAAG,WAAW;AAClC,IAAMC,OAAO,GAAG;EACnB,QAAQ,EAAEC,MAAM;EAChB,MAAM,EAAEC,IAAI;EACZ,SAAS,EAAEC,OAAO;EAClB,UAAU,EAAEC,QAAQ;EACpB,aAAa,EAAEC,WAAW;EAC1B,YAAY,EAAEnD,UAAU;EACxB,UAAU,EAAEE;CACf;AACM,IAAMkD,cAAc,GAAG;AAE9B;;;;;;;;AAQE;AACW,WAAO,GAAe,CAACpC,QAAQ,EAAEC,SAAS,EAAEC,SAAS,EAAEC,eAAe,EAAEC,KAAK,EAAEC,MAAM,EAAEC,UAAU;AAE9G;;;;;;;;AAQE;AACW,UAAM,GAAc,CAACG,MAAM,EAAEC,KAAK,EAAEC,UAAU,EAAEC,OAAO,EAAEC,IAAI,EAAEE,SAAS;;ACtErF;;AAEE;AACF;EAQI;;;;;;;;;AASK;EACL,SAAYsB,oBAAqB,EAAEC,OAAsC;IAhBlE,IAAM,UAAW,EAAE;IACnB,IAAM,UAAW,EAAE;IACnB,IAAK,SAAW,EAAE;IAClB,IAAI,QAAW,EAAE;IACjB,IAAS,aAAW,GAAG;IAa1BA,OAAO,IAAI,IAAI,CAACC,UAAU,CAACD,OAAO,CAAC;IACnC,IAAI,CAACE,KAAK,GAAGC,QAAQ,CAACD,KAAK,CAAC,GAAGA,KAAK,CAACE,KAAK,CAAC,IAAI,CAACC,SAAS,CAAC,GAAGH,KAAK;;EAE/DH,cAAU,wBAAjB,UAAkBO,UAAwC;IACtD,KAAK,IAAMC,MAAI,IAAID,UAAU,EAAE;MAC3B,IAAI,CAACC,MAAiC,CAAC,GAAGD,UAAU,CAACC,MAAiC,CAAC;IAC1F;IACD,OAAO,IAAI;GACd;EACD;;;;;;;EAQOR,6BAAI,GAAX;IACI,OAAO,IAAI,CAACG,KAAK,CAAClG,MAAM;GAC3B;EACD;;;;;;;;;EAUO+F,cAAG,iBAAV,UAAWS,KAAa;IACpB,OAAO,IAAI,CAACN,KAAK,CAACM,KAAK,CAAC;GAC3B;EACD;;;;;;;;;;AAUK;EACET,4BAAG,GAAV,UAAWS,KAAa,EAAEN,KAAU;IAChC,IAAI,CAACA,KAAK,CAACM,KAAK,CAAC,GAAGN,KAAK;IACzB,OAAO,IAAI;GACd;EACD;;;;;;AAMK;EACEH,8BAAK,GAAZ;IACU,SAMF,IAAI;MALJM,SAAS;MACTI,MAAM;MACNC,MAAM;MACNC,KAAK;MACLC,IAAI,UACA;IACR,IAAMC,GAAG,GAAG,IAAI,CAACX,KAAK,CAACY,GAAG,CAAC,WAAC;MAAI,OAACC,gBAAgB,CAACC,CAAC,CAAC,GAAGA,CAAC,CAACC,KAAK,EAAE,GAAGD,CAAC;IAApC,CAAqC,CAAC;IACtE,OAAO,IAAIjB,cAAc,CAACc,GAAG,EAAE;MAC3BR,SAAS;MACTI,MAAM;MACNC,MAAM;MACNC,KAAK;MACLC,IAAI;IACP,EAAC;GACL;EACD;;;;;;;;;;;;AAYI;EACGb,gCAAO,GAAd;IACI,OAAO,IAAI,CAACU,MAAM,GAAG,IAAI,CAACS,IAAI,EAAE,GAAG,IAAI,CAACR,MAAM;GACjD;EACD;;;;;;;;;;;AAWK;EACEX,6BAAI,GAAX;IACI,OAAO,IAAI,CAACG,KAAK,CAACY,GAAG,CAAC,WAAC,EAAI;MAAA,OAACC,gBAAgB,CAACC,CAAC,CAAC,GAAGA,CAAC,CAACG,OAAO,EAAE,GAAGH,CAAC;IAAC,EAAC,CAACE,IAAI,CAAC,IAAI,CAACb,SAAS,CAAC;GAC3F;EACD;;;;;;;;;;;;;;;;;;;EAoBON,cAAO,qBAAd,UAAe7D,IAA0D;IACrE,IAAI,CAACgE,KAAK,CAACkB,OAAO,CAAClF,IAAI,CAAC;IACxB,OAAO,IAAI;GACd;EACL,OAAC6D;AAAD,CAAC;;ACzJD;;;AAGE;AAWI,SAAUsB,UAAU,CAACC,GAAW;EAClC,IAAMC,UAAU,GAAGC,SAAS,CAACF,GAAG,EAAE,GAAG,CAAC;EACtC,IAAMG,GAAG,GAAqC,EAAE;EAChD,IAAMC,WAAW,GAAGH,UAAU,CAACvH,MAAM;EACrC,IAAIA,MAAM,GAAG0H,WAAW;EAExB,KAAK,IAAI7H,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6H,WAAW,EAAE,EAAE7H,CAAC,EAAE;IAClC,IAAM8H,OAAO,GAAGH,SAAS,CAACD,UAAU,CAAC1H,CAAC,CAAC,EAAE,GAAG,CAAC;IAE7C,IAAI8H,OAAO,CAAC3H,MAAM,GAAG,CAAC,IAAI,CAAC2H,OAAO,CAAC,CAAC,CAAC,EAAE;MACnC,EAAE3H,MAAM;MACR;IACH;IACDyH,GAAG,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,EAAE,CAAC,GAAGC,gBAAgB,CAACF,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,EAAE,CAAC;EAC/D;EACD,OAAO;IAAEE,MAAM,EAAEL,GAAG;IAAEzH,MAAM;EAAA,CAAE;AAClC;AACA;;;;;;;;;;AAUE;AACI,SAAU+H,kBAAkB,CAAClB,GAAa;EAC5C,IAAMF,KAAK,GAAGqB,IAAI;EAElB,IAAInB,GAAG,CAAC7G,MAAM,KAAK,CAAC,EAAE;IAClB6G,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACb;EACD,OAAO,IAAId,cAAc,CAACc,GAAG,EAAE;IAC3BF,KAAK;IACLN,SAAS,EAAE,GAAG;IACdO,IAAI,EAAE,OAAO;IACbH,MAAM,EAAE,EAAG,aAAK,EAAG;IACnBC,MAAM,EAAE;EACX,EAAC;AACN;AACA;;;;;;;;;AASE;AACI,SAAUuB,qBAAqB,CAACC,IAAY;;EAExC,MAA+C,eAAY,CAACA,IAAI,CAAC;IAAvDvB,KAAK;IAAET,KAAK;IAAUiC,UAAU,YAAuB;EAEvE,IAAI,OAAOjC,KAAK,KAAK,WAAW,EAAE;IAC9B,OAAOgC,IAAI;EACd;EACD,IAAIE,YAAY,CAACC,OAAO,CAAC1B,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE;IAClC,OAAOoB,kBAAkB,CAACO,YAAY,CAACJ,IAAI,CAAC,CAAC;EAChD;;EAED,IAAMT,GAAG,GAAGI,gBAAgB,CAAC3B,KAAK,EAAES,KAAK,CAAC;EAE1C,IAAIE,GAAG,GAAG,CAACX,KAAK,CAAC;EACjB,IAAIG,SAAS,GAAG,GAAG;EACnB,IAAII,MAAM,GAAG,EAAG,aAAK,MAAG;EACxB,IAAIC,MAAM,GAAG,GAAI,kBAAU,CAAE;EAE7B,IAAIK,gBAAgB,CAACU,GAAG,CAAC,EAAE;IACvBpB,SAAS,GAAGoB,GAAG,CAACpB,SAAS;IACzBQ,GAAG,GAAGY,GAAG,CAACvB,KAAK;IACfO,MAAM,IAAIgB,GAAG,CAAChB,MAAM;IACpBC,MAAM,GAAGe,GAAG,CAACf,MAAM,GAAGA,MAAM;EAC/B;EACD,OAAO,IAAIX,cAAc,CAACc,GAAG,EAAE;IAC3BR,SAAS;IACTM,KAAK;IACLF,MAAM;IACNC,MAAM;EACT,EAAC;AACN;AAEgB,8BAAqB,CAACG,GAAU,EAAER,SAAiB;EAC/D,OAAO,IAAIN,cAAc,CAACc,GAAG,EAAE;IAC3BD,IAAI,EAAE,OAAO;IACbP,SAAS;EACZ,EAAC;AACN;AAEA;;;;;;;;;;AAUE;AACI,SAAUkC,mBAAmB,CAACrC,KAAa;EAC7C,IAAMsC,MAAM,GAAGF,YAAY,CAACpC,KAAK,CAAC;EAElC,OAAOsC,MAAM,GAAGT,kBAAkB,CAACS,MAAM,CAAC,GAAGtC,KAAK;AACtD;AAgBgB,yBAAgB,CAACA,KAAoC,EAAES,KAAgB;EACnF,IAAI,CAACR,QAAQ,CAACD,KAAK,CAAC,EAAE;IAClB,IAAIuC,OAAO,CAACvC,KAAK,CAAC,EAAE;MAChB,OAAOwC,qBAAqB,CAACxC,KAAK,EAAE,GAAG,CAAC;IAC3C;IACD,OAAOA,KAAK;EACf;EACD,IAAIyC,MAAM,GAAQC,UAAU,CAAC1C,KAAK,CAAC;EAEnC,IAAIyC,MAAM,CAAC3I,MAAM,GAAG,CAAC,EAAE;IACnB,OAAO0I,qBAAqB,CAACC,MAAM,CAAC7B,GAAG,CAAC,WAAC,EAAI;MAAA,uBAAgB,CAACE,CAAC,CAAC;IAAnB,CAAmB,CAAC,EAAE,GAAG,CAAC;EAC1E;EACD2B,MAAM,GAAGE,UAAU,CAAC3C,KAAK,CAAC;EAE1B,IAAIyC,MAAM,CAAC3I,MAAM,GAAG,CAAC,EAAE;IACnB,OAAO0I,qBAAqB,CAACC,MAAM,CAAC7B,GAAG,CAAC,WAAC,EAAI;MAAA,uBAAgB,CAACE,CAAC,CAAC;IAAnB,CAAmB,CAAC,EAAE,GAAG,CAAC;EAC1E;EACD2B,MAAM,GAAG,yBAAyB,CAACG,IAAI,CAAC5C,KAAK,CAAC;EAE9C,IAAIyC,MAAM,IAAIA,MAAM,CAAC,CAAC,CAAC,KAAKA,MAAM,CAAC,CAAC,CAAC,EAAE;;IAEnC,OAAO,IAAI5C,cAAc,CAAC,CAAC8B,gBAAgB,CAACc,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MACrDlC,MAAM,EAAEkC,MAAM,CAAC,CAAC,CAAC;MACjBjC,MAAM,EAAEiC,MAAM,CAAC,CAAC;IACnB,EAAC;EACL,OAAM,IAAIzC,KAAK,CAACmC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;;IAElC,OAAOJ,qBAAqB,CAAC/B,KAAK,CAAC;EACtC,OAAM,IAAIA,KAAK,CAAC6C,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,IAAIpC,KAAK,KAAK,KAAK,EAAE;IACnD,OAAO4B,mBAAmB,CAACrC,KAAK,CAAC;EACpC;EACD,OAAOA,KAAK;AAChB;AAEgB,iBAAQ,CAAC8C,MAAsB,EAAER,MAAyB;EAAzB;IAAAA,MAAyB;EAAA;EACtE,IAAM7B,KAAK,GAAGqC,MAAM,CAACrC,KAAK;EAE1B,IAAIA,KAAK,EAAE;IACPqC,MAAM,CAAC/C,UAAU,CAAC;MACdU,KAAK,EAAE,EAAE;MACTD,MAAM,EAAE,EAAE;MACVD,MAAM,EAAE;IACX,EAAC;IACF,IAAMP,KAAK,GAAG8C,MAAM,CAACC,IAAI,EAAE,GAAG,CAAC,GAAGD,MAAM,GAAGA,MAAM,CAACE,GAAG,CAAC,CAAC,CAAC;IAExDV,MAAM,CAAC7B,KAAK,CAAC,GAAGT,KAAK;EACxB,OAAM;IACH8C,MAAM,CAAC5B,OAAO,CAAC,aAAG;MACd+B,QAAQ,CAAC1B,GAAG,EAAEe,MAAM,CAAC;IACzB,CAAC,CAAC;EACL;EACD,OAAOA,MAAM;AACjB;ACxKgB,iBAAQ,CAACY,IAAY,EAAEC,KAAe;EAClDhG,KAAK,CAAC+F,IAAI,CAAC,GAAGC,KAAK;AACvB;SACgBC,OAAO,CAACC,KAAe,EAAEC,UAAoB,EAAEC,eAAyB;EACpF,IAAMzJ,MAAM,GAAGuJ,KAAK,CAACvJ,MAAM;EAC3B,IAAI0J,KAAK,GAAQ1G,KAAK;EACtB,IAAI2G,KAAK,GAAQC,KAAK;EAEtB,KAAK,IAAI/J,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,MAAM,GAAG,CAAC,EAAE,EAAEH,CAAC,EAAE;IACjC,CAAC6J,KAAK,CAACH,KAAK,CAAC1J,CAAC,CAAC,CAAC,KAAK6J,KAAK,CAACH,KAAK,CAAC1J,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;IAC1C6J,KAAK,GAAGA,KAAK,CAACH,KAAK,CAAC1J,CAAC,CAAC,CAAC;IACvB,IAAI4J,eAAe,EAAE;MACjB,CAACE,KAAK,CAACJ,KAAK,CAAC1J,CAAC,CAAC,CAAC,KAAK8J,KAAK,CAACJ,KAAK,CAAC1J,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;MAC1C8J,KAAK,GAAGA,KAAK,CAACJ,KAAK,CAAC1J,CAAC,CAAC,CAAC;IAC1B;EACJ;EACD4J,eAAe,KAAKE,KAAK,CAACJ,KAAK,CAACvJ,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;EACpD0J,KAAK,CAACH,KAAK,CAACvJ,MAAM,GAAG,CAAC,CAAC,CAAC,GAAGwJ,UAAU,GAAG,IAAI,GAAG,EAAE;AACrD;AACM,SAAUK,OAAO,CAAC3D,KAAU;EAC9B,IAAMU,IAAI,GAAG,OAAOV,KAAK;EAEzB,IAAIU,IAAI,KAAKkD,MAAM,EAAE;IACjB,IAAIrB,OAAO,CAACvC,KAAK,CAAC,EAAE;MAChB,OAAO6D,KAAK;IACf,OAAM,IAAIhD,gBAAgB,CAACb,KAAK,CAAC,EAAE;MAChC,OAAO8D,QAAQ;IAClB;EACJ,OAAM,IAAIpD,IAAI,KAAKqD,MAAM,IAAIrD,IAAI,KAAKsD,MAAM,EAAE;IAC3C,OAAO,OAAO;EACjB;EACD,OAAOtD,IAAI;AACf;AACM,SAAUuD,YAAY,CAAC1C,GAAQ;EACjC,OAAO2C,QAAQ,CAAC3C,GAAG,CAAC,IAAIA,GAAG,CAAClI,WAAW,KAAKZ,MAAM;AACtD;AACgB,iBAAQ,CAAC4K,KAAmB,EAAEc,KAAe;EACzD,IAAIxD,GAAG,GAAe,EAAE;EAExB,IAAIsD,YAAY,CAACZ,KAAK,CAAC,EAAE;IACrB,KAAK,IAAMhD,MAAI,IAAIgD,KAAK,EAAE;MACtBc,KAAK,CAACC,IAAI,CAAC/D,MAAI,CAAC;MAChBM,GAAG,GAAGA,GAAG,CAACzF,MAAM,CAACmJ,QAAQ,CAAChB,KAAK,CAAChD,MAAI,CAAC,EAAE8D,KAAK,CAAC,CAAC;MAC9CA,KAAK,CAACG,GAAG,EAAE;IACd;EACJ,OAAM;IACH3D,GAAG,CAACyD,IAAI,CAACD,KAAK,CAAClJ,KAAK,EAAE,CAAC;EAC1B;EACD,OAAO0F,GAAG;AACd;AACgB,oBAAW,CAAC0C,KAAmB,EAAEhC,UAAwB;EACrE,KAAK,IAAMkD,MAAI,IAAIlD,UAAU,EAAE;IAC3B,IAAMrB,KAAK,GAAGqB,UAAU,CAACkD,MAAI,CAAC;IAE9B,IAAI,CAACN,YAAY,CAACjE,KAAK,CAAC,EAAE;MACtBqD,KAAK,CAACkB,MAAI,CAAC,GAAG,IAAI;MAClB;IACH;IACD,IAAI,CAACL,QAAQ,CAACb,KAAK,CAACkB,MAAI,CAAC,CAAC,EAAE;MACxBlB,KAAK,CAACkB,MAAI,CAAC,GAAG,EAAE;IACnB;IACDC,WAAW,CAACnB,KAAK,CAACkB,MAAI,CAAC,EAAElD,UAAU,CAACkD,MAAI,CAAC,CAAC;EAC7C;EACD,OAAOlB,KAAK;AAChB;AACM,SAAUoB,OAAO,CAACC,GAAW;EAC/B,OAAO7I,IAAI,CAAC8I,KAAK,CAACD,GAAG,GAAGpH,OAAO,CAAC,GAAGA,OAAO;AAC9C;SACgBsH,eAAe,CAC3BvB,KAA6B,EAC7BhC,UAAwB,EAAEvH,MAA6B;EAA7B;IAAAA,SAAiBuJ,KAAK,CAACvJ,MAAM;EAAA;EACvD,IAAIkG,KAAK,GAAGqB,UAAU;EAEtB,KAAK,IAAI1H,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,MAAM,EAAE,EAAEH,CAAC,EAAE;IAC7B,IAAI,CAACuK,QAAQ,CAAClE,KAAK,CAAC,IAAIA,KAAK,IAAI,IAAI,EAAE;MACnC,OAAO6E,SAAS;IACnB;IACD7E,KAAK,GAAGA,KAAK,CAACqD,KAAK,CAAC1J,CAAC,CAAC,CAAC;EAC1B;EACD,OAAOqG,KAAK;AAChB;SACgB8E,cAAc,CAACtB,KAAmB,EAAEuB,IAAgB,EAAEC,MAAgB;EAClF,IAAMlL,MAAM,GAAGiL,IAAI,CAACjL,MAAM;EAC1B,IAAImL,IAAI,GAAQzB,KAAK;EAErB,IAAI1J,MAAM,KAAK,CAAC,EAAE;IACd,OAAO,KAAK;EACf;EACD,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,MAAM,EAAE,EAAEH,CAAC,EAAE;IAC7B,IAAIsL,IAAI,KAAK,IAAI,EAAE;MACf,OAAO,KAAK;IACf;IACDA,IAAI,GAAGA,IAAI,CAACF,IAAI,CAACpL,CAAC,CAAC,CAAC;IACpB,IAAI,CAACsL,IAAI,IAAK,CAACD,MAAM,IAAIC,IAAI,KAAK,IAAK,EAAE;MACrC,OAAO,KAAK;IACf;EACJ;EACD,OAAO,IAAI;AACf;AACA;;;;AAIG;AACa,eAAM,CAACF,IAAgB,EAAEC,MAAgB;EACrD,OAAOF,cAAc,CAAChI,KAAK,EAAEiI,IAAI,EAAEC,MAAM,CAAC;AAC9C;AACM,SAAUE,OAAO,CAACH,IAAgB;EACpC,OAAOD,cAAc,CAACpB,KAAK,EAAEqB,IAAI,EAAE,IAAI,CAAC;AAC5C;AAOgB,mBAAU,CAACI,IAAc,EAAEC,UAAmB;EAC1DD,IAAI,CAACE,KAAK,CAACrG,QAAQ,CAAC,GAAGoG,UAAU;AACrC;AACM,SAAUE,WAAW,CAACH,IAAuB;EAC/C,OAAOA,IAAI,CAACE,KAAK,CAACrG,QAAQ,CAAC,IAAImG,IAAI,CAACI,QAAQ,EAAE;AAClD;AACM,SAAUC,UAAU,CAACL,IAAuB;EAC9C,OAAO,CAACA,IAAI,CAACM,OAAO,EAAE,IAAIN,IAAI,CAACE,KAAK,CAACrG,QAAQ,CAAC;AAClD;AAEM,SAAU0G,MAAM,CAACC,QAAkB;EACrC,SAAU;IACN,IAAMC,EAAE,GAAG,EAAG,YAAI,CAACrJ,KAAK,CAACV,IAAI,CAACgK,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAE;IAEpD,IAAI,CAACC,SAAS,IAAI,CAACH,QAAQ,EAAE;MACzB,OAAOC,EAAE;IACZ;IACD,IAAMG,YAAY,GAAGC,CAAC,CAAC,2BAAmBJ,EAAE,QAAI,CAAC;IAEjD,IAAI,CAACG,YAAY,EAAE;MACf,OAAOH,EAAE;IACZ;EACJ;AACL;AACM,SAAUK,SAAS,CAACd,IAAuB;EAC7C,OAAOA,IAAI,CAACe,KAAK,EAAE,IAAIf,IAAI,CAACgB,KAAK,CAACT,MAAM,CAAC,KAAK,CAAC,CAAC,CAACQ,KAAK,EAAE;AAC5D;AACM,SAAUE,IAAI,CAACpE,IAAqB;EACtC,OAAO,EAAG,YAAI,CAAE,CAACqE,KAAK,CAAC,eAAe,CAAC,CAACrF,IAAI,CAAC,EAAE,CAAC;AACpD;AACM,SAAUsF,OAAO,CACnBnB,IAAuB,EAAEoB,WAAqB,EAC9CC,aAAsB,EAAEnF,UAAuB;EAAvB;IAAAA,UAAuB;EAAA;EAC/C,IAAI,CAACoF,SAAS,IAAItB,IAAI,CAACuB,YAAY,EAAE,KAAKpI,OAAO,EAAE;IAC/C;EACH;EACD,IAAMqI,SAAS,GAAGH,aAAa,IAAIhI,eAAe;EAElD,IAAI8G,WAAW,CAACH,IAAI,CAAC,EAAE;IACnBA,IAAI,CAACyB,YAAY,CAAC,IAAI,EAAED,SAAS,EAAEtF,UAAU,CAAC;EACjD,OAAM;IACH,IAAI8D,IAAI,CAACM,OAAO,EAAE,EAAE;MAChBN,IAAI,CAAC0B,OAAO,CAAC,CAAC,CAAC;IAClB;IACDN,WAAW,IAAIpB,IAAI,CAAC2B,SAAS,CAAC;MAAEH,SAAS;IAAA,CAAE,CAAC;IAC5C,IAAMI,EAAE,GAAG5B,IAAI,CAACyB,YAAY,CAAC,KAAK,EAAED,SAAS,EAAEtF,UAAU,CAAC;IAE1D,IAAI,CAAC0F,EAAE,EAAE;MACL;IACH;IACDC,iBAAiB,CAAC7B,IAAI,EAAE4B,EAAE,CAAC;IAC3BE,UAAU,CAAC9B,IAAI,EAAE,IAAI,CAAC;EACzB;EACDA,IAAI,CAAC+B,YAAY,CAAC5I,OAAO,CAAC;AAC9B;AAEgB,0BAAiB,CAAC6G,IAAc,EAAE4B,EAAW;EACzD,IAAM1B,KAAK,GAAGF,IAAI,CAACE,KAAK;EACxB,IAAM8B,QAAQ,GAAGhC,IAAI,CAACiC,WAAW,EAAE;EACnC,IAAMC,cAAc,GAAG,CAACF,QAAQ,IAAI,CAACG,QAAQ,CAACH,QAAQ,CAAC;EACvD,IAAMI,YAAY,GAAG;IACjBN,UAAU,CAAC9B,IAAI,EAAE,KAAK,CAAC;IACvBA,IAAI,CAACqC,MAAM,EAAE;EACjB,CAAC;EACD,IAAMC,cAAc,GAAG;IACnBtC,IAAI,CAACuC,OAAO,CAACrJ,IAAI,CAAC;IAElBsJ,QAAQ,CAACZ,EAAE,EAAE,iBAAiB,EAAEQ,YAAY,CAAC;IAC7CI,QAAQ,CAACZ,EAAE,EAAE,cAAc,EAAEQ,YAAY,CAAC;IAC1CI,QAAQ,CAACZ,EAAE,EAAE,oBAAoB,EAAEa,kBAAkB,CAAC;EAC1D,CAAC;EACDzC,IAAI,CAAC0C,IAAI,CAAC3J,KAAK,EAAE;IACb4J,WAAW,CAACf,EAAE,EAAE,iBAAiB,EAAEQ,YAAY,CAAC;IAChDO,WAAW,CAACf,EAAE,EAAE,cAAc,EAAEQ,YAAY,CAAC;IAC7CO,WAAW,CAACf,EAAE,EAAE,oBAAoB,EAAEa,kBAAkB,CAAC;IACzDE,WAAW,CAACf,EAAE,EAAE,gBAAgB,EAAEU,cAAc,CAAC;EACrD,CAAC,CAAC;EACF,IAAMG,kBAAkB,GAAG,UAACvK,EAAoB;IAAlB,eAAW;IACrC,IAAM0K,WAAW,GAAGC,WAAW;IAC/B,IAAMC,cAAc,GAAGZ,cAAc,GAAG,CAAC,GAAIU,WAAW,GAAGZ,QAAS;IAEpE9B,KAAK,CAAClG,YAAY,CAAC,GAAG4I,WAAW;IACjC5C,IAAI,CAAC+C,YAAY,CAACD,cAAc,CAAC;EACrC,CAAC;EACDN,QAAQ,CAACZ,EAAE,EAAE,gBAAgB,EAAEU,cAAc,CAAC;AAClD;AAEM,SAAUU,SAAS,CAACC,UAA8C;EACpE,IAAIhL,MAAkB;EAEtB,IAAI6C,QAAQ,CAACmI,UAAU,CAAC,EAAE;IACtB,IAAIA,UAAU,IAAI9I,OAAO,EAAE;MACvBlC,MAAM,GAAGkC,OAAO,CAAC8I,UAAU,CAAC;IAC/B,OAAM;MACH,IAAM7G,GAAG,GAAGI,gBAAgB,CAACyG,UAAU,CAAC;MAExC,IAAInI,QAAQ,CAACsB,GAAG,CAAC,EAAE;QACf,OAAO,CAAC;MACX,OAAM;QACH,IAAIA,GAAG,CAACd,KAAK,KAAK,cAAc,EAAE;UAC9B2H,UAAU,GAAG7G,GAAG,CAACvB,KAAK,CAACY,GAAG,CAAC,WAAC,EAAI;YAAA,iBAAU,CAACE,CAAC,CAAC;UAAb,CAAa,CAAC;UAC9C1D,MAAM,GAAGrB,MAAM,CAACqM,UAAU,CAAC,CAAC,CAAC,EAAEA,UAAU,CAAC,CAAC,CAAC,EAAEA,UAAU,CAAC,CAAC,CAAC,EAAEA,UAAU,CAAC,CAAC,CAAC,CAAC;QAC9E,OAAM,IAAI7G,GAAG,CAACd,KAAK,KAAK,OAAO,EAAE;UAC9BrD,MAAM,GAAGX,KAAK,CAAC4L,UAAU,CAAC9G,GAAG,CAACvB,KAAK,CAAC,CAAC,CAAC,CAAC,EAAEuB,GAAG,CAACvB,KAAK,CAAC,CAAC,CAAC,CAAC;QACzD,OAAM;UACH,OAAO,CAAC;QACX;MACJ;IACJ;EACJ,OAAM,IAAIuC,OAAO,CAAC6F,UAAU,CAAC,EAAE;IAC5BhL,MAAM,GAAGrB,MAAM,CAACqM,UAAU,CAAC,CAAC,CAAC,EAAEA,UAAU,CAAC,CAAC,CAAC,EAAEA,UAAU,CAAC,CAAC,CAAC,EAAEA,UAAU,CAAC,CAAC,CAAC,CAAC;EAC9E,OAAM;IACHhL,MAAM,GAAGgL,UAAU;EACtB;EAED,OAAOhL,MAAM;AACjB;AAEM,SAAUyD,gBAAgB,CAACb,KAAU;EACvC,IAAI,CAACA,KAAK,EAAE;IACR,OAAO,KAAK;EACf;EACD,IAAMlH,SAAS,GAAIkH,KAAK,CAAC3G,WAAqC,CAACP,SAAS;EAExE,OAAO,CAAC,EAAEA,SAAS,CAACiI,KAAK,IAAIjI,SAAS,CAACkK,GAAG,IAAIlK,SAAS,CAACiH,UAAU,CAAC;AACvE;AAEM,SAAUuI,OAAO,CAACtI,KAAU;EAC9B,OAAOA,KAAK,IAAI,CAAC,CAAEA,KAAK,CAAC3G,WAA4B,CAACP,SAAS,CAACyP,OAAO;AAC3E;AACM,SAAUC,WAAW,CAACxI,KAAU;EAClC,OACIA,KAAK,IAAI,CAAC,CAAEA,KAAK,CAAC3G,WAAgC,CAACP,SAAS,CAAC2P,QAAQ;AAE7E;AACM,SAAUC,OAAO,CAAC1I,KAAU;EAC9B,OAAOA,KAAK,IAAI,CAAC,CAAEA,KAAK,CAAC3G,WAA4B,CAACP,SAAS,CAAC6P,SAAS;AAC7E;AACM,SAAUC,UAAU,CAAC5I,KAAU;EACjC,OAAOA,KAAK,IAAI,CAAC,CAAEA,KAAK,CAAC3G,WAA+B,CAACP,SAAS,CAAC+P,iBAAiB;AACxF;AACgB,wBAAe,CAACtH,GAAiB,EAAEuH,SAAiB;EAChE,IAAMC,MAAM,GAAG,EAAE;EAEjB,KAAK,IAAMC,MAAI,IAAIzH,GAAG,EAAE;IACpB,IAAMvB,KAAK,GAAGuB,GAAG,CAACyH,MAAI,CAAC;IAEvB,IAAIN,OAAO,CAAC1I,KAAK,CAAC,EAAE;MAChB+I,MAAM,CAACC,MAAI,CAAC,GAAGhJ,KAAK;IACvB,OAAM,IAAIkE,QAAQ,CAAClE,KAAK,CAAC,EAAE;MACxB,IAAMiJ,OAAO,GAAGC,eAAe,CAAClJ,KAAK,EAAE8I,SAAS,CAAC;MAEjD,KAAK,IAAMK,QAAQ,IAAIF,OAAO,EAAE;QAC5BF,MAAM,CAAC,UAAGC,MAAI,SAAGF,SAAS,CAAG,gBAAQ,CAAE,CAAC,GAAGG,OAAO,CAACE,QAAQ,CAAC;MAC/D;IACJ;EACJ;EACD,OAAOJ,MAAM;AACjB;AAEgB,oBAAW,CACvBK,QAAyD,EACzDC,YAAgB;EAAhB;IAAAA,YAAgB;EAAA;EAEhB,IAAMC,YAAY,GAAGF,QAAQ,CAACG,IAAI,CAAC,EAAE,CAAoB;EACzDD,YAAY,CAACD,YAAY,GAAGA,YAAY;EAExC,OAAOC,YAAY;AACvB;AAEM,SAAUE,UAAU,CAACC,IAAY;EACnC,IAAMC,OAAO,GAAGC,oBAAoB,CAACF,IAAI,CAAC;EAC1C,IAAMG,GAAG,GAAGF,OAAO,CAACE,GAAG;EAEvB,IAAI,CAACF,OAAO,CAACE,GAAG,EAAE;IACd,OAAO,EAAE;EACZ;EACD,IAAMC,UAAU,GAAGhO,IAAI,CAACU,KAAK,CAACmN,OAAO,CAACI,OAAO,GAAG,GAAG,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC;EAEjE,OAAO,EAAG,WAAG,CAAG,kBAAU,CAAE;AAChC;AAEM,SAAUJ,oBAAoB,CAACF,IAAY;EAC7C,IAAMO,QAAQ,GAAGC,YAAY,CAACR,IAAI,CAAC;EAEnC,IAAI,CAACO,QAAQ,CAACzJ,MAAM,IAAI,EAAE,EAAE4B,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;IAC9C,OAAO;MACHyH,GAAG,EAAE,EAAE;MACPE,OAAO,EAAE;KACZ;EACJ;EAED,IAAMI,OAAO,GAAGxH,UAAU,CAACsH,QAAQ,CAAChK,KAAK,CAAC;EAC1C,IAAMmK,QAAQ,GAAGD,OAAO,CAACjP,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC2F,GAAG,CAAC,aAAG;IACxC,IAAMwJ,GAAG,GAAGC,QAAQ,CAAC3F,GAAG,EAAE,EAAE,CAAC;IAE7B,OAAO0F,GAAG,CAACL,QAAQ,CAAC,EAAE,CAAC;EAC3B,CAAC,CAAC;EAEF,OAAO;IACHH,GAAG,EAAE,WAAIO,QAAQ,CAACnJ,IAAI,CAAC,EAAE,CAAC,CAAE;IAC5B8I,OAAO,EAAEI,OAAO,CAAC,CAAC,CAAC,GAAG7B,UAAU,CAAC6B,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG;GAClD;AACL;ACjUA,SAASI,YAAY,CACjBC,MAAgB,EAAEC,MAAgB,EAAEC,MAAc;EAClD,OAAO,UAACpR,WAAc;IAClB,IAAMP,SAAS,GAAGO,WAAW,CAACP,SAAS;IAEvCyR,MAAM,CAACrJ,OAAO,CAAC,cAAI;MACfpI,SAAS,CAAC4R,QAAQ,CAAC,cAAOxH,IAAI,CAAE,CAAC,CAAC,GAAG;QACjC,OAAO,IAAI,CAACuH,MAAM,CAAC,CAACvH,IAAI,CAAC;MAC7B,CAAC;IACL,CAAC,CAAC;IACFsH,MAAM,CAACtJ,OAAO,CAAC,cAAI;MACfpI,SAAS,CAAC4R,QAAQ,CAAC,MAAO,YAAI,CAAE,CAAC,CAAC,GAAG,UAAS1K,KAAU;QACpD,IAAI,CAACyK,MAAM,CAAC,CAACvH,IAAI,CAAC,GAAGlD,KAAK;QAC1B,OAAO,IAAI;MACf,CAAC;IACL,CAAC,CAAC;EACN,CAAC;AACL;SACgB2K,kBAAkB,CAACC,SAAiB,EAAEC,cAAkC,EAAEC,SAAwB;EAC9G,IAAIA,SAAS,KAAKnM,OAAO,EAAE;IACvB,OAAO,IAAI;EACd,OAAM,IAAIkM,cAAc,KAAK/L,QAAQ,IAAI8L,SAAS,KAAKC,cAAc,IAAIA,cAAc,GAAG,CAAC,KAAK,CAAC,EAAE;IAChG,OAAOC,SAAS,MAAMF,SAAS,GAAG,CAAC,IAAI,CAAC,GAAGhM,iBAAiB,GAAGF,SAAS,CAAC;EAC5E;EACD,OAAOoM,SAAS,MAAMF,SAAS,GAAG,CAAC,IAAI,CAAC,GAAGlM,SAAS,GAAGE,iBAAiB,CAAC;AAC7E;AACA;;;;;;;;AAQE;AAEK,IAAMmM,gBAAgB,GAAG,CAC5B,IAAI,EAAEpN,eAAe,EAAEC,KAAK,EAAEH,SAAS,EACvCC,SAAS,EAAEI,UAAU,EAAEN,QAAQ,EAC/BM,UAAU,EAAEE,cAAc,EAAEe,UAAU,CACzC;AACM,IAAMiM,gBAAgB,mCACtBD,gBAAgB,UACnBlN,MAAM,EAAEE,WAAW,SACtB;AAED;;;;AAIE;AAEF;EAIU9E,SAAqC;EAI3C;;;;;;;;;;;AAWG;EACH,kBAAY6G,OAA4C;IAAxD,YACImL,iBAAO,IAmBV;IAlCOC,KAAO,WAAW,CAAC;IAgBvBA,KAAI,CAAC7F,KAAK,GAAG8F,QAAQ,CAAC;MAClBvF,EAAE,EAAE,EAAE;MACNxI,MAAM,EAAE,CAAC;MACTlB,UAAU,EAAE,QAAQ;MACpB+L,cAAc,EAAE,CAAC;MACjBmD,KAAK,EAAE,CAAC;MACRC,QAAQ,EAAE,UAAU;MACpBP,SAAS,EAAEjM,MAAM;MACjByM,SAAS,EAAE,CAAC;MACZvD,WAAW,EAAE,CAAC;MACdwD,aAAa,EAAE,CAAC,CAAC;MACjBX,SAAS,EAAE,CAAC;MACZY,QAAQ,EAAE,CAAC;MACXC,QAAQ,EAAE,CAAC;MACXC,SAAS,EAAEzN,MAAM;MACjBkJ,QAAQ,EAAE;IACb,EAAU;IACX+D,KAAI,CAACnL,UAAU,CAACD,OAAO,CAAC;;;EAE5B;;;;;;;;;;;;;AAaI;EACG6L,QAAS,uBAAhB,UAAiBvD,UAA8C;IAC3D,IAAMhL,MAAM,GAAe+K,SAAS,CAACC,UAAU,CAAC;IAChD,IAAMlM,UAAU,GAAGkB,MAAM,IAAIA,MAAM,CAACW,WAAW,CAAC,IAAI,QAAQ;IAC5D,IAAMsH,KAAK,GAAG,IAAI,CAACA,KAAK;IAExBA,KAAK,CAACxH,MAAM,CAAC,GAAGT,MAAM;IACtBiI,KAAK,CAACtH,WAAW,CAAC,GAAG7B,UAAU;IAC/B,OAAO,IAAI;GACd;EACD;;;;;;;;;;;;;;AAcI;EACGyP,QAAU,wBAAjB,UAAkB7L,OAAsC;IAAtC;MAAAA,OAAsC;IAAA;IACpD,KAAK,IAAMO,MAAI,IAAIP,OAAO,EAAE;MACxB,IAAME,KAAK,GAAGF,OAAO,CAACO,MAAI,CAAC;MAE3B,IAAIA,MAAI,KAAKxC,MAAM,EAAE;QACjB,IAAI,CAAC+N,SAAS,CAAC5L,KAAK,CAAC;QACrB;MACH,OAAM,IAAIK,MAAI,KAAK7C,QAAQ,EAAE;QAC1BwC,KAAK,IAAI,IAAI,CAAC6L,WAAW,CAAC7L,KAAK,CAAC;QAChC;MACH;MACD,IAAI8L,OAAO,CAAC3J,OAAO,CAAC9B,MAAW,CAAC,GAAG,CAAC,CAAC,EAAE;QACnC,IAAI,CAACgF,KAAK,CAAChF,MAAI,CAAC,GAAGL,KAAK;MAC3B;IACJ;IAED,OAAO,IAAI;GACd;EACD;;;;;AAKI;EACG2L,mCAAgB,GAAvB;IACI,OAAO,IAAI,CAAC9C,iBAAiB,CAAC,IAAI,CAAC;GACtC;EACD;;;;;AAKI;EACG8C,QAAiB,+BAAxB,UAAyBP,KAAe;IACpC,IAAM/F,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,IAAMlJ,KAAK,GAAGkJ,KAAK,CAAC1H,eAAe,CAAC;IACpC,IAAIxB,KAAK,KAAK2C,QAAQ,EAAE;MACpB,OAAOiN,QAAQ;IAClB;IACD,OAAO,CAACX,KAAK,GAAG/F,KAAK,CAACzH,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,CAACwJ,WAAW,EAAE,GAAGjL,KAAK;GACjE;EACD;;;;;AAKI;EACGwP,0BAAO,GAAd;IACI,IAAI,IAAI,CAACtG,KAAK,CAACnG,SAAS,CAAC,KAAK,CAAC,IAAI,IAAI,CAACmG,KAAK,CAACtG,UAAU,CAAC,KAAKd,MAAM,EAAE;MAClE,OAAO,IAAI;IACd,OAAM,IAAI,IAAI,CAAC+N,OAAO,EAAE,GAAG,IAAI,CAACnD,iBAAiB,EAAE,EAAE;MAClD,OAAO,KAAK;IACf;IACD,OAAO,IAAI;GACd;EACD;;;;;AAKI;EACG8C,2BAAQ,GAAf;IACI,OAAO,IAAI,CAACtG,KAAK,CAACtG,UAAU,CAAC,KAAKd,MAAM;GAC3C;EACM0N,QAAK,mBAAZ,UAAaP,KAAiC;IAAjC;MAAAA,KAAgB,OAAI,CAAC/F,KAAK,CAACzH,KAAK,CAAC;IAAA;IAC1C,IAAMyH,KAAK,GAAG,IAAI,CAACA,KAAK;IAExBA,KAAK,CAACtG,UAAU,CAAC,GAAGT,OAAO;IAE3B,IAAI+G,KAAK,CAACnG,SAAS,CAAC,IAAIkM,KAAK,EAAE;MAC3B;;;AAGG;MACH,IAAI,CAAC1D,OAAO,CAAiCrJ,IAAI,CAAC;MAClD,OAAO,IAAI;IACd;IACD,OAAO,KAAK;GACf;EACD;;;AAGI;EACGsN,QAAI,kBAAX,UAAYM,MAAe;IAA3B,IAiBCf;IAhBG,IAAM7F,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,IAAM+F,KAAK,GAAG/F,KAAK,CAACzH,KAAK,CAAC;IAC1B,IAAMmK,WAAW,GAAG,IAAI,CAACiE,OAAO,EAAE;IAElC3G,KAAK,CAACtG,UAAU,CAAC,GAAGT,OAAO;IAE3B,IAAI,IAAI,CAACmH,OAAO,EAAE,KAAKsC,WAAW,KAAK,CAAC,IAAIA,WAAW,IAAI,IAAI,CAACc,iBAAiB,EAAE,CAAC,EAAE;MAClF,IAAI,CAAChC,OAAO,CAAC,CAACuE,KAAK,EAAE,IAAI,CAAC;IAC7B;IAED,IAAI,CAACc,OAAO,GAAGC,qBAAqB,CAAC,UAAC9P,IAAY;MAC9CgJ,KAAK,CAACpG,SAAS,CAAC,GAAG5C,IAAI;MACvB6O,KAAI,CAACkB,IAAI,CAAC/P,IAAI,EAAE4P,MAAM,CAAC;IAC3B,CAAC,CAAC;IACF,IAAI,CAACI,KAAK,EAAE;IACZ,OAAO,IAAI;GACd;EACD;;;AAGI;EACGV,wBAAK,GAAZ;IACI,IAAMtG,KAAK,GAAG,IAAI,CAACA,KAAK;IAExB,IAAIA,KAAK,CAACtG,UAAU,CAAC,KAAKd,MAAM,EAAE;MAC9BoH,KAAK,CAACtG,UAAU,CAAC,GAAGd,MAAM;MAC1B;;;AAGG;MACH,IAAI,CAACyJ,OAAO,CAAqCzJ,MAAM,CAAC;IAC3D;IACDqO,oBAAoB,CAAC,IAAI,CAACJ,OAAO,CAAC;IAClC,OAAO,IAAI;GACd;EACD;;;AAGI;EACGP,yBAAM,GAAb;IACI,IAAI,CAAC9E,OAAO,CAAC,CAAC,CAAC;IACf,IAAI,CAACxB,KAAK,CAACnG,SAAS,CAAC,GAAG,CAAC;IACzB,IAAI,CAACqN,GAAG,EAAE;IACV,OAAO,IAAI;GACd;EACD;;;AAGG;EACIZ,sBAAG,GAAV;IACI,IAAI,CAACa,KAAK,EAAE;IACZ;;;AAGG;IACH,IAAI,CAAC9E,OAAO,CAAmCxJ,KAAK,CAAC;IACrD,OAAO,IAAI;GACd;EACD;;;;;;;;;;AAUI;EACGyN,QAAO,qBAAd,UAAetP,IAAqB,EAAEoQ,MAAgB,EAAEC,QAAkB,EAAE9J,IAAiB;IACzF,IAAM+J,cAAc,GAAG,IAAI,CAAC9D,iBAAiB,EAAE;IAC/C,IAAMxD,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,IAAMoG,QAAQ,GAAGpG,KAAK,CAACnG,SAAS,CAAC;IACjC,IAAMkM,KAAK,GAAG/F,KAAK,CAACzH,KAAK,CAAC;IAC1B,IAAImK,WAAW,GAAG0E,MAAM,GAAIpQ,IAAe,GAAG,IAAI,CAACuQ,WAAW,CAACvQ,IAAI,CAAC;IAEpEgJ,KAAK,CAACnG,SAAS,CAAC,GAAGkM,KAAK,GAAGrD,WAAW;IACtC,IAAIA,WAAW,GAAG,CAAC,EAAE;MACjBA,WAAW,GAAG,CAAC;IAClB,OAAM,IAAIA,WAAW,GAAG4E,cAAc,EAAE;MACrC5E,WAAW,GAAG4E,cAAc;IAC/B;IACDtH,KAAK,CAAClG,YAAY,CAAC,GAAG4I,WAAW;IACjC,IAAI,CAAC8E,SAAS,EAAE;IAEhB,IAAMC,UAAU,GAAGL,MAAM,IAAI,CAACC,QAAQ;IACtC,IAAMlB,QAAQ,GAAGnG,KAAK,CAACnG,SAAS,CAAC;IAEjC,IAAI4N,UAAU,IAAIrB,QAAQ,GAAGL,KAAK,IAAI/O,IAAI,IAAI,CAAC,EAAE;MAC7C,IAAI,CAACgQ,KAAK,CAAC,CAAC,CAAC;IAChB;IACDzJ,IAAI,KAAJ,YAAI,KAAJ,sBAAI,EAAI;IACR,IAAIkK,UAAU,KAAKtB,QAAQ,GAAGC,QAAQ,IAAI,IAAI,CAAChG,OAAO,EAAE,CAAC,EAAE;MACvD,IAAI,CAAC8G,GAAG,EAAE;MACV,OAAO,IAAI;IACd;IACD,IAAI,IAAI,CAACQ,OAAO,EAAE,EAAE;MAChB,OAAO,IAAI;IACd;IACD;;;;;;;AAOO;IACP,IAAI,CAACrF,OAAO,CAA6CvJ,UAAU,EAAE;MACjE4J,WAAW;MACX1L,IAAI,EAAE,IAAI,CAAC2Q,gBAAgB,EAAE;MAC7B/E,cAAc,EAAE5C,KAAK,CAAC9G,SAAS;IAClC,EAAC;IAEF,OAAO,IAAI;GACd;EACD;;;;;AAKI;EACGoN,0BAAO,GAAd;IACI,OAAO,IAAI,CAACtG,KAAK,CAAClG,YAAY,CAAC;GAClC;EACMwM,QAAW,yBAAlB,UAAmBtP,IAAqB;IACpC,IAAI4D,QAAQ,CAAC5D,IAAI,CAAC,EAAE;MAChB,IAAM8K,QAAQ,GAAG,IAAI,CAACC,WAAW,EAAE,IAAI,GAAG;MAE1C,IAAI/K,IAAI,KAAK,MAAM,EAAE;QACjB,OAAO,CAAC;MACX,OAAM,IAAIA,IAAI,KAAK,IAAI,EAAE;QACtB,OAAO8K,QAAQ;MAClB;MACK,SAAkB8F,SAAS,CAAC5Q,IAAI,CAAC;QAA/B6Q,IAAI;QAAElN,KAAK,WAAoB;MAEvC,IAAIkN,IAAI,KAAK,GAAG,EAAE;QACd,CAAC,IAAI,CAAC9F,WAAW,EAAE,IAAK,IAAI,CAACyE,WAAW,CAAC1E,QAAQ,CAAE;QACnD,OAAO1C,OAAO,CAAC4D,UAAU,CAAChM,IAAI,CAAC,GAAG,GAAG,GAAG8K,QAAQ,CAAC;MACpD,OAAM,IAAI+F,IAAI,KAAK,GAAG,EAAE;QACrB,OAAOlN,KAAK,GAAGzC,SAAS;MAC3B,OAAM;QACH,OAAOyC,KAAK;MACf;IACJ,OAAM;MACH,OAAOyE,OAAO,CAACpI,IAAI,CAAC;IACvB;GACJ;EACD;;;AAGK;EACEsP,0BAAO,GAAd;IACI,IAAMtG,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,IAAM+F,KAAK,GAAG/F,KAAK,CAACzH,KAAK,CAAC;IAC1B,IAAM4N,QAAQ,GAAGnG,KAAK,CAACnG,SAAS,CAAC;IAEjC,OAAOkM,KAAK,GAAG,CAAC,IAAKI,QAAQ,GAAGJ,KAAM;GACzC;EACMO,QAAY,0BAAnB,UAAoB1D,cAAsB;IACtC,IAAM5C,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,IAAM8H,kBAAkB,GAAGtR,IAAI,CAACU,KAAK,CAAC0L,cAAc,CAAC;IACrD,IAAMmF,iBAAiB,GAAG/H,KAAK,CAAC1H,eAAe,CAAC,KAAKmB,QAAQ,GAAGiN,QAAQ,GAAG1G,KAAK,CAAC1H,eAAe,CAAC;IAEjG,IAAI0H,KAAK,CAAC9G,SAAS,CAAC,GAAG4O,kBAAkB,IAAIA,kBAAkB,GAAGC,iBAAiB,EAAE;MACjF;;;;;;AAMQ;MACR,IAAI,CAAC1F,OAAO,CAA2CnJ,SAAS,EAAE;QAC9DwJ,WAAW,EAAE1C,KAAK,CAAClG,YAAY,CAAC;QAChC8I,cAAc,EAAEkF;MACnB,EAAC;IACL;IACD9H,KAAK,CAAC9G,SAAS,CAAC,GAAG0J,cAAc;IACjC,OAAO,IAAI;GACd;EACS0D,4BAAS,GAAnB;IACI,IAAMtG,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,IAAM4C,cAAc,GAAG5C,KAAK,CAAC1H,eAAe,CAAC;IAC7C,IAAM0N,QAAQ,GAAGhG,KAAK,CAAC5H,SAAS,CAAC;IACjC,IAAMqN,SAAS,GAAGzF,KAAK,CAAC3H,SAAS,CAAC;IAClC,IAAMyJ,QAAQ,GAAG,IAAI,CAACC,WAAW,EAAE;IACnC,IAAM/K,IAAI,GAAG,IAAI,CAAC2P,OAAO,EAAE;IAC3B,IAAMpB,SAAS,GAAGzD,QAAQ,KAAK,CAAC,GAAG,CAAC,GAAG9K,IAAI,GAAG8K,QAAQ;IACtD,IAAIkG,oBAAoB,GAAGlG,QAAQ,GAAG9K,IAAI,GAAG8K,QAAQ,GAAG,CAAC;IAEzD,IAAI,CAACA,QAAQ,EAAE;MACX,IAAI,CAACmG,gBAAgB,CAAC,CAAC,CAAC;MACxB,OAAO,IAAI;IACd;IACD,IAAI,CAACpF,YAAY,CAAC0C,SAAS,CAAC;;;IAI5B,IAAM2C,SAAS,GAAG5C,kBAAkB,CAACC,SAAS,EAAE3C,cAAc,EAAE6C,SAAS,CAAC;IAE1E,IAAM0C,gBAAgB,GAAGlG,QAAQ,CAACH,QAAQ,CAAC;IAC3C,IAAIqG,gBAAgB,IAAID,SAAS,EAAE;MAC/BF,oBAAoB,GAAGlG,QAAQ,GAAGkG,oBAAoB;IACzD;IACD,IAAIG,gBAAgB,IAAIvF,cAAc,KAAKnJ,QAAQ,EAAE;MACjD,IAAM2O,UAAU,GAAGpC,QAAQ,KAAK,MAAM,IAAIA,QAAQ,KAAK,UAAU;;MAGjE,IAAIT,SAAS,IAAI3C,cAAc,EAAE;QAC7BoF,oBAAoB,GAAGlG,QAAQ,IAAIsG,UAAU,GAAIxF,cAAc,GAAG,CAAC,IAAK,CAAC,GAAG,CAAC,CAAC;QAC9EsF,SAAS,KAAKF,oBAAoB,GAAGlG,QAAQ,GAAGkG,oBAAoB,CAAC;MACxE;IACJ;IACD,IAAI,CAACC,gBAAgB,CAACD,oBAAoB,CAAC;IAC3C,OAAO,IAAI;GACd;EACO1B,uBAAI,GAAZ,UAAa+B,GAAW,EAAE9S,EAAW;IAArC,IA0BCsQ;IAzBG,IAAI,IAAI,CAAC3F,QAAQ,EAAE,EAAE;MACjB;IACH;IACD,IAAMF,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,IAAMiG,SAAS,GAAGjG,KAAK,CAACvH,UAAU,CAAC;IACnC,IAAM2N,QAAQ,GAAGpG,KAAK,CAACpG,SAAS,CAAC;IACjC,IAAMmM,KAAK,GAAG/F,KAAK,CAACzH,KAAK,CAAC;IAC1B,IAAM4N,QAAQ,GAAGnG,KAAK,CAACnG,SAAS,CAAC;IACjC,IAAM6I,WAAW,GAAGyD,QAAQ,GAAG3P,IAAI,CAAC8R,GAAG,CAAC,IAAI,EAAED,GAAG,GAAGjC,QAAQ,CAAC,GAAG,IAAI,GAAGH,SAAS;IAEhFjG,KAAK,CAACpG,SAAS,CAAC,GAAGyO,GAAG;IAEtB,IAAI9S,EAAE,IAAIA,EAAE,IAAImN,WAAW,EAAE;MACzB,IAAI,CAAClB,OAAO,CAACjM,EAAE,GAAGwQ,KAAK,EAAE,IAAI,CAAC;MAC9B,IAAI,CAACoB,KAAK,EAAE;IACf,OAAM;MACH,IAAI,CAAC3F,OAAO,CAACkB,WAAW,GAAGqD,KAAK,EAAE,IAAI,CAAC;IAC1C;IAED,IAAI/F,KAAK,CAACtG,UAAU,CAAC,KAAKd,MAAM,EAAE;MAC9B;IACH;IACD,IAAI,CAACiO,OAAO,GAAGC,qBAAqB,CAAC,UAAC9P,IAAY;MAC9C6O,KAAI,CAACkB,IAAI,CAAC/P,IAAI,EAAEzB,EAAE,CAAC;IACvB,CAAC,CAAC;GACL;EApZC+Q,QAAQ,eADbrB,YAAY,CAACU,gBAAgB,EAAED,gBAAgB,EAAE,OAAO,CAAC,CACpD,UAAQ,CAqZb;EAAD,OAACY;CAAA,CAjZSiC,YAAY,CAiZrB;AC1cD,SAASC,iBAAiB,CAACtM,GAAoB,EAAEuM,MAAuB;EAAvB;IAAAA,MAAuB;EAAA;EACpE,IAAI,CAACvM,GAAG,EAAE;IACN,OAAO,EAAE;EACZ;EACD,IAAMwM,MAAM,GAAG,EAAE;EAEjB,IAAMC,IAAI,GAAGC,OAAO,CAAC1M,GAAG,CAAC;EAEzB2M,UAAU,CAACF,IAAI,EAAEF,MAAM,CAAC;EAExBE,IAAI,CAAC9M,OAAO,CAAC,cAAI;IACb6M,MAAM,CAAC3J,IAAI,CAAC,UAAGlB,IAAI,CAACiL,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,cAAI5M,GAAG,CAAC2B,IAAI,CAAC,MAAG,CAAC;EAC5D,CAAC,CAAC;EAEF,OAAO6K,MAAM,CAAC/M,IAAI,CAAC,GAAG,CAAC;AAC3B;AAEA;AACA,SAASD,KAAK,CAAC7G,MAAoB,EAAE+G,OAAe;EAAf;IAAAA,OAAe;EAAA;EAChD,OAAOmN,KAAK,CAAC,EAAE,EAAElU,MAAM,EAAE+G,OAAO,CAAC;AACrC;AACA,SAASmN,KAAK,CAACxT,EAAgB,EAAEC,IAAkB,EAAEoG,OAAe;EAAf;IAAAA,OAAe;EAAA;EAChE,KAAK,IAAMZ,MAAI,IAAIxF,IAAI,EAAE;IACrB,IAAMmF,KAAK,GAAGnF,IAAI,CAACwF,MAAI,CAAC;IACxB,IAAMK,IAAI,GAAGiD,OAAO,CAAC3D,KAAK,CAAC;IAE3B,IAAIU,IAAI,KAAKoD,QAAQ,EAAE;MACnBlJ,EAAE,CAACyF,MAAI,CAAC,GAAGY,OAAO,GAAGjB,KAAK,CAACiB,OAAO,EAAE,GAAGjB,KAAK,CAACe,KAAK,EAAE;IACvD,OAAM,IAAIL,IAAI,KAAK2N,QAAQ,EAAE;MAC1BzT,EAAE,CAACyF,MAAI,CAAC,GAAGY,OAAO,GAAGqN,QAAQ,CAAC,CAACjO,MAAI,CAAC,EAAEL,KAAK,CAAC,GAAGA,KAAK;IACvD,OAAM,IAAIU,IAAI,KAAKmD,KAAK,EAAE;MACvBjJ,EAAE,CAACyF,MAAI,CAAC,GAAGL,KAAK,CAAC/E,KAAK,EAAE;IAC3B,OAAM,IAAIyF,IAAI,KAAKkD,MAAM,EAAE;MACxB,IAAIM,QAAQ,CAACtJ,EAAE,CAACyF,MAAI,CAAC,CAAC,IAAI,CAACQ,gBAAgB,CAACjG,EAAE,CAACyF,MAAI,CAAC,CAAC,EAAE;QACnD+N,KAAK,CAACxT,EAAE,CAACyF,MAAI,CAAC,EAAEL,KAAK,EAAEiB,OAAO,CAAC;MAClC,OAAM;QACHrG,EAAE,CAACyF,MAAI,CAAC,GAAGU,KAAK,CAACf,KAAK,EAAEiB,OAAO,CAAC;MACnC;IACJ,OAAM;MACHrG,EAAE,CAACyF,MAAI,CAAC,GAAGxF,IAAI,CAACwF,MAAI,CAAC;IACxB;EACJ;EACD,OAAOzF,EAAE;AACb;AACA;AAEA,SAAS2T,eAAe,CAACxJ,IAAgB;EACrC,OAAOA,IAAI,CAAC,CAAC,CAAC,IAAI5H,KAAK,GAAGA,KAAK,CAAC4H,IAAI,CAAC,CAAC,CAAC,CAAC,GAAGA,IAAI;AACnD;AACA,SAASuJ,QAAQ,CAACjL,KAAiB,EAAErD,KAAU;EAC3C,IAAMU,IAAI,GAAGiD,OAAO,CAAC3D,KAAK,CAAC;EAE3B,IAAIU,IAAI,KAAKoD,QAAQ,EAAE;IACnB,OAAO9D,KAAK,CAACiB,OAAO,EAAE;EACzB,OAAM,IAAIP,IAAI,KAAK2N,QAAQ,EAAE;IAC1B,IAAIhL,KAAK,CAAC,CAAC,CAAC,KAAKxG,eAAe,EAAE;MAC9B,OAAOyR,QAAQ,CAACjL,KAAK,EAAErD,KAAK,EAAE,CAAC;IAClC;EACJ,OAAM,IAAIU,IAAI,KAAKkD,MAAM,EAAE;IACxB,OAAO7C,KAAK,CAACf,KAAK,EAAE,IAAI,CAAC;EAC5B;EACD,OAAOA,KAAK;AAChB;AAEA;;AAEE;AACF;EAAoB/G,SAAyB;EAGzC;;;;;;;;;;AAUG;EACH,eAAYoI,UAA6C;IAA7C;MAAAA,UAA6C;IAAA;IAAzD,YACI4J,iBAAO,IAIV;IAlBMC,KAAU,cAAiB,EAAE;IAC7BA,cAAQ,GAAa,IAAIsD,QAAQ,CAAC5O,cAAc,CAAC;IAcpDsL,KAAI,CAAC7J,UAAU,GAAG,EAAE;;IAEpB6J,KAAI,CAACuD,GAAG,CAACpN,UAAU,CAAC;;;EAExB;;;;;;AAMI;EACGqN,mBAAG,GAAV;IAAW,IAAmB3J;SAAnB,IAAmB4J,QAAnBA,EAAmB,qBAAnBA,EAAmB;MAAnB5J,IAAmB;;IAC1B,IAAM/E,KAAK,GAAG,IAAI,CAAC4O,GAAG,OAAR,IAAI,EAAQ7J,IAAI,CAAC;IAE/B,OAAOuJ,QAAQ,CAACC,eAAe,CAACxJ,IAAI,CAAC,EAAE/E,KAAK,CAAC;GAChD;EACD;;;;;;AAMI;EACG0O,KAAS,uBAAhB,UAAiBrL,KAAiB;IAC9B,OAAO,IAAI,CAACwL,QAAQ,CAAC7L,GAAG,CAACK,KAAK,CAAC;GAClC;EACD;;;;;;;AAOI;EACGqL,yBAAS,GAAhB,UAAiBrL,KAAiB,EAAEyK,MAAkB;IAClD,IAAMxL,MAAM,GAAG,IAAI,CAACuM,QAAQ,CAACJ,GAAG,CAACpL,KAAK,EAAEyK,MAAM,CAAC;IAE/C,IAAI,CAACgB,OAAO,EAAE;IACd,OAAOxM,MAAM;GAChB;EACD;;;;AAII;EACGoM,8BAAc,GAArB;IACI,OAAO,IAAI,CAACG,QAAQ,CAACE,SAAS,EAAE;GACnC;EACD;;;;;;;;AAQI;EACGL,KAAc,4BAArB,UAAsBnN,GAAwB;IAC1C,IAAI,CAACsN,QAAQ,CAACG,SAAS,CAACzN,GAAG,CAAC;IAC5B,IAAI,CAACuN,OAAO,EAAE;GACjB;EAED;;;;;;AAMI;EACGJ,uBAAO,GAAd;IAAe,IAAmB3J;SAAnB,IAAmB4J,QAAnBA,EAAmB,qBAAnBA,EAAmB;MAAnB5J,IAAmB;;IAC9B,IAAM/E,KAAK,GAAG,IAAI,CAAC4O,GAAG,OAAR,IAAI,EAAQ7J,IAAI,CAAC;IAC/B,IAAMiJ,IAAI,GAAGrK,OAAO,CAAC3D,KAAK,CAAC,KAAK4D,MAAM,GAAGqK,OAAO,CAACjO,KAAK,CAAC,GAAG,EAAE;IAE5DkO,UAAU,CAACF,IAAI,EAAE,IAAI,CAACa,QAAQ,CAAC7L,GAAG,CAAC+B,IAAI,CAAC,CAAC;IACzC,OAAOiJ,IAAI;GACd;EACD;;;;;;AAMI;EACGU,oBAAI,GAAX;IAAA,IAQCxD;IARW,IAAmBnG;SAAnB,IAAmB4J,QAAnBA,EAAmB,qBAAnBA,EAAmB;MAAnB5J,IAAmB;;IAC3B,IAAMtC,MAAM,GAAG,IAAI,CAACO,GAAG,OAAR,IAAI,EAAQ+B,IAAI,CAAC;IAChC,IAAMiJ,IAAI,GAAG,IAAI,CAACC,OAAO,OAAZ,IAAI,EAAYlJ,IAAI,CAAC;IAElC,OAAOiJ,IAAI,CAACpN,GAAG,CAAC,aAAG;MACf,IAAMqO,SAAS,GAAGxM,MAAM,CAACtI,GAAG,CAAC;MAC7B,OAAO;QAAEA,GAAG;QAAE6F,KAAK,EAAEiP,SAAS;QAAEC,QAAQ,EAAEhE,KAAI,CAACiE,IAAI,OAATjE,KAAI,kCAASnG,IAAI,EAAE,YAAG,CAAC;MAAA,CAAE;IACvE,CAAC,CAAC;GACL;EAEM2J,mBAAG,GAAV;IAAW,IAAmB3J;SAAnB,IAAmB4J,QAAnBA,EAAmB,qBAAnBA,EAAmB;MAAnB5J,IAAmB;;IAC1B,OAAOH,eAAe,CAAC2J,eAAe,CAACxJ,IAAI,CAAC,EAAE,IAAI,CAAC1D,UAAU,CAAC;GACjE;EACD;;;;;;AAMI;EACGqN,sBAAM,GAAb;IAAc,IAAmB3J;SAAnB,IAAmB4J,QAAnBA,EAAmB,qBAAnBA,EAAmB;MAAnB5J,IAAmB;;IAC7B,IAAMqK,MAAM,GAAGb,eAAe,CAACxJ,IAAI,CAAC;IACpC,IAAMjL,MAAM,GAAGsV,MAAM,CAACtV,MAAM;IAE5B,IAAI,CAACA,MAAM,EAAE;MACT,OAAO,IAAI;IACd;IACD,IAAI,CAAC+U,QAAQ,CAACQ,MAAM,CAACD,MAAM,CAAC;IAC5B,IAAMpP,KAAK,GAAG4E,eAAe,CAACwK,MAAM,EAAE,IAAI,CAAC/N,UAAU,EAAEvH,MAAM,GAAG,CAAC,CAAC;IAElE,IAAIoK,QAAQ,CAAClE,KAAK,CAAC,EAAE;MACjB,OAAOA,KAAK,CAACoP,MAAM,CAACtV,MAAM,GAAG,CAAC,CAAC,CAAC;IACnC;IACD,IAAI,CAACgV,OAAO,EAAE;IACd,OAAO,IAAI;GACd;EACD;;;;;;;;;;;;;;;;;;;;;;;;;EA2BOJ,mBAAG,GAAV;IAAW,IAAc3J;SAAd,IAAc4J,QAAdA,EAAc,qBAAdA,EAAc;MAAd5J,IAAc;;IACrB,IAAI,CAACuK,IAAI,OAAT,IAAI,EAASvK,IAAI,CAAE;IACnB,IAAI,CAAC+J,OAAO,EAAE;IACd,OAAO,IAAI;GACd;EACD;;;;;;;;;;;;;;;EAgBOJ,wBAAQ,GAAf;IACI,OAAOrK,QAAQ,CAAC,IAAI,CAAChD,UAAU,EAAE,EAAE,CAAC;GACvC;EACD;;;;;AAKI;EACGqN,mBAAG,GAAV;IAAW,IAAmB3J;SAAnB,IAAmB4J,QAAnBA,EAAmB,qBAAnBA,EAAmB;MAAnB5J,IAAmB;;IAC1B,IAAMqK,MAAM,GAAGb,eAAe,CAACxJ,IAAI,CAAC;IACpC,IAAMjL,MAAM,GAAGsV,MAAM,CAACtV,MAAM;IAE5B,IAAI,CAACA,MAAM,EAAE;MACT,OAAO,KAAK;IACf;IACD,OAAO,CAACyV,WAAW,CAAC3K,eAAe,CAACwK,MAAM,EAAE,IAAI,CAAC/N,UAAU,EAAEvH,MAAM,CAAC,CAAC;GACxE;EACD;;;;;AAKI;EACG4U,qBAAK,GAAZ;IACI,IAAMc,KAAK,GAAG,IAAId,KAAK,EAAE;IAEzBc,KAAK,CAACC,cAAc,CAAC,IAAI,CAACZ,QAAQ,CAACA,QAAQ,CAAC;IAC5C,OAAOW,KAAK,CAACpB,KAAK,CAAC,IAAI,CAAC;GAC3B;EACD;;;;;;AAMI;EACGM,KAAK,mBAAZ,UAAac,KAAY;IACrB,IAAMnO,UAAU,GAAG,IAAI,CAACA,UAAU;IAClC,IAAMqO,eAAe,GAAGF,KAAK,CAACnO,UAAU;IAExC,IAAIqO,eAAe,EAAE;MACjBtB,KAAK,CAAC/M,UAAU,EAAEqO,eAAe,CAAC;IACrC;IACD,OAAO,IAAI;GACd;EACD;;;;AAII;EACGhB,KAAW,yBAAlB,UAAmBiB,YAAsB;IACrC,IAAMtO,UAAU,GAAG,IAAI,CAAC2B,GAAG,EAAE;IAC7B,IAAM4M,SAAS,GAAoB,EAAE;IAErC,KAAK,IAAIrL,MAAI,IAAIlD,UAAU,EAAE;MACzB,IAAIwO,MAAM,CAAC,CAACtL,MAAI,CAAC,EAAE,IAAI,CAAC,EAAE;QACtB;MACH;MACD,IAAIvE,KAAK,GAAGqB,UAAU,CAACkD,MAAI,CAAC;MAE5B,IAAIA,MAAI,KAAK1H,eAAe,EAAE;QAC1B0H,MAAI,GAAG1H,eAAe,CAACsR,OAAO,CAAC,WAAW,EAAE1H,SAAS,CAAC;QACtDzG,KAAK,GAAG,CAACC,QAAQ,CAACD,KAAK,CAAC,GAAGA,KAAK,GAAGA,KAAK,CAACjC,WAAW,CAAC,KAAK,SAAS;MACtE;MACD,IAAI4R,YAAY,EAAE;QACdpL,MAAI,GAAGmG,QAAQ,CAACnG,MAAI,CAAC4J,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;MAC9C;MACDyB,SAAS,CAACrL,MAAI,CAAC,GAAGvE,KAAK;IAC1B;IACD,IAAMjD,SAAS,GAAG8Q,iBAAiB,CAACxM,UAAU,CAAChC,cAAc,CAAC,EAAE,IAAI,CAACwP,QAAQ,CAAC7L,GAAG,CAAC,CAAC3D,cAAc,CAAC,CAAC,CAAC;IACpG,IAAMrC,MAAM,GAAG6Q,iBAAiB,CAACxM,UAAU,CAACrE,MAAM,EAAE,IAAI,CAAC6R,QAAQ,CAAC7L,GAAG,CAAC,CAAC8M,MAAM,CAAC,CAAC,CAAC;IAEhFC,SAAS,IAAIhT,SAAS,KAAK6S,SAAS,CAACG,SAAS,CAAC,GAAGhT,SAAS,CAAC;IAC5D+S,MAAM,IAAI9S,MAAM,KAAK4S,SAAS,CAACE,MAAM,CAAC,GAAG9S,MAAM,CAAC;IAChD,OAAO4S,SAAS;GACnB;EACD;;;AAGI;EACGlB,yBAAS,GAAhB;IACI,IAAMkB,SAAS,GAAG,IAAI,CAACI,WAAW,EAAE;IACpC,IAAMC,QAAQ,GAAG,EAAE;IACnB,IAAMjC,IAAI,GAAGC,OAAO,CAAC2B,SAAS,CAAC;IAE/B1B,UAAU,CAACF,IAAI,EAAE,IAAI,CAACa,QAAQ,CAAC7L,GAAG,CAAC,EAAE,CAAC,CAAC;IACvCgL,IAAI,CAAC9M,OAAO,CAAC,cAAI;MACb+O,QAAQ,CAAC7L,IAAI,CAAC,EAAG,kBAAU,CAAClB,IAAI,EAAE,GAAG,CAAC,cAAI0M,SAAS,CAAC1M,IAAI,CAAC,MAAG,CAAC;IACjE,CAAC,CAAC;IACF,OAAO+M,QAAQ,CAACjP,IAAI,CAAC,EAAE,CAAC;GAC3B;EACD;;;;;AAKI;EACG0N,qBAAK,GAAZ;IACI,IAAMkB,SAAS,GAAG,IAAI,CAACI,WAAW,EAAE;IACpC,IAAMC,QAAQ,GAAG,EAAE;IACnB,IAAMjC,IAAI,GAAGC,OAAO,CAAC2B,SAAS,CAAC;IAE/B1B,UAAU,CAACF,IAAI,EAAE,IAAI,CAACa,QAAQ,CAAC7L,GAAG,CAAC,EAAE,CAAC,CAAC;IACvCgL,IAAI,CAAC9M,OAAO,CAAC,cAAI;MACb+O,QAAQ,CAAC7L,IAAI,CAAC,UAAGlB,IAAI,cAAI0M,SAAS,CAAC1M,IAAI,CAAC,EAAG,KAAC;IAChD,CAAC,CAAC;IACF,OAAO+M,QAAQ,CAACjP,IAAI,CAAC,EAAE,CAAC;GAC3B;EACD;;;AAGI;EACG0N,qBAAK,GAAZ;IACI,IAAI,CAACrN,UAAU,GAAG,EAAE;IACpB,IAAI,CAACwN,QAAQ,CAACqB,KAAK,EAAE;IACrB,OAAO,IAAI;GACd;EACOxB,oBAAI,GAAZ;IAAa,IAAc3J;SAAd,IAAc4J,QAAdA,EAAc,qBAAdA,EAAc;MAAd5J,IAAc;;IACvB,IAAMoL,IAAI,GAAG,IAAI;IACjB,IAAMrW,MAAM,GAAGiL,IAAI,CAACjL,MAAM;IAC1B,IAAMsV,MAAM,GAAGrK,IAAI,CAAC9J,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAChC,IAAM+E,KAAK,GAAG+E,IAAI,CAACjL,MAAM,GAAG,CAAC,CAAC;IAC9B,IAAMsW,UAAU,GAAGhB,MAAM,CAAC,CAAC,CAAC;IAE5B,IAAItV,MAAM,KAAK,CAAC,IAAI4O,OAAO,CAAC1I,KAAK,CAAC,EAAE;MAChCmQ,IAAI,CAAC/B,KAAK,CAACpO,KAAK,CAAC;IACpB,OAAM,IAAIoQ,UAAU,IAAIjT,KAAK,EAAE;MAC5BgT,IAAI,CAACE,UAAU,CAAClT,KAAK,CAACiT,UAAU,CAAC,EAAEpQ,KAAK,CAAC;IAC5C,OAAM,IAAIlG,MAAM,KAAK,CAAC,IAAIyI,OAAO,CAAC6N,UAAU,CAAC,EAAE;MAC5CD,IAAI,CAACE,UAAU,CAACD,UAAU,EAAEpQ,KAAK,CAAC;IACrC,OAAM,IAAIa,gBAAgB,CAACb,KAAK,CAAC,EAAE;MAChC,IAAI6P,MAAM,CAACT,MAAM,CAAC,EAAE;QAChBe,IAAI,CAACb,IAAI,OAATa,IAAI,kCAASf,MAAM,WAAEnM,QAAQ,CAACjD,KAAK,CAAC,CAAE;MACzC,OAAM;QACHmQ,IAAI,CAACE,UAAU,CAACjB,MAAM,EAAEpP,KAAK,CAAC;MACjC;IACJ,OAAM,IAAIuC,OAAO,CAACvC,KAAK,CAAC,EAAE;MACvBmQ,IAAI,CAACE,UAAU,CAACjB,MAAM,EAAEpP,KAAK,CAAC;IACjC,OAAM,IAAIkE,QAAQ,CAAClE,KAAK,CAAC,EAAE;MACxB,IAAI,CAACmQ,IAAI,CAACG,GAAG,OAARH,IAAI,EAAQf,MAAM,CAAC,IAAIS,MAAM,CAACT,MAAM,CAAC,EAAE;QACxCe,IAAI,CAACE,UAAU,CAACjB,MAAM,EAAE,EAAE,CAAC;MAC9B;MACD,KAAK,IAAMpG,MAAI,IAAIhJ,KAAK,EAAE;QACtBmQ,IAAI,CAACb,IAAI,CAATvV,UAAI,EAASY,sCAAM,EAAE,eAAI,EAAEqF,KAAK,CAACgJ,MAAI,CAAC,CAAE;MAC3C;IACJ,OAAM,IAAI/I,QAAQ,CAACD,KAAK,CAAC,EAAE;MACxB,IAAI6P,MAAM,CAACT,MAAM,EAAE,IAAI,CAAC,EAAE;QACtB,IAAIlK,OAAO,CAACkK,MAAM,CAAC,IAAI,CAACS,MAAM,CAACT,MAAM,CAAC,EAAE;UACpC,IAAI,CAACiB,UAAU,CAACjB,MAAM,EAAEpP,KAAK,CAAC;QACjC,OAAM;UACH,IAAMuB,GAAG,GAAGI,gBAAgB,CAAC3B,KAAK,CAAC;UAEnC,IAAIkE,QAAQ,CAAC3C,GAAG,CAAC,EAAE;YACf4O,IAAI,CAACb,IAAI,CAATvV,UAAI,kCAASqV,MAAM,WAAE7N,GAAG,CAAE;UAC7B;QACJ;QACD,OAAO,IAAI;MACd,OAAM;QACG,SAAmCJ,UAAU,CAACnB,KAAK,CAAC;UAAlD4B,MAAM;UAAU2O,YAAY,YAAsB;QAE1D,KAAK,IAAMC,MAAI,IAAI5O,MAAM,EAAE;UACvBuO,IAAI,CAACb,IAAI,CAATvV,UAAI,EAASY,sCAAM,EAAE,eAAI,EAAEiH,MAAM,CAAC4O,MAAI,CAAC,CAAE;QAC5C;QACD,IAAID,YAAY,EAAE;UACd,OAAO,IAAI;QACd;MACJ;MACDJ,IAAI,CAACE,UAAU,CAACjB,MAAM,EAAEpP,KAAK,CAAC;IACjC,OAAM;MACHmQ,IAAI,CAACE,UAAU,CAACjB,MAAM,EAAEpP,KAAK,CAAC;IACjC;GACJ;EACO0O,0BAAU,GAAlB,UAAmB+B,IAAgB,EAAEzQ,KAAU;IAC3C,IAAIqB,UAAU,GAAG,IAAI,CAACA,UAAU;IAChC,IAAMvH,MAAM,GAAG2W,IAAI,CAAC3W,MAAM;IAE1B,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,MAAM,GAAG,CAAC,EAAE,EAAEH,CAAC,EAAE;MACjC,IAAM+W,MAAI,GAAGD,IAAI,CAAC9W,CAAC,CAAC;MAEpB,EAAE+W,MAAI,IAAIrP,UAAU,CAAC,KAAKA,UAAU,CAACqP,MAAI,CAAC,GAAG,EAAE,CAAC;MAChDrP,UAAU,GAAGA,UAAU,CAACqP,MAAI,CAAC;IAChC;IACD,IAAI,CAAC5W,MAAM,EAAE;MACT;IACH;IACD,IAAM6W,SAAS,GAAGF,IAAI,CAAC3W,MAAM,GAAG,CAAC,CAAC;IAElC,IAAI,CAAC+U,QAAQ,CAAC+B,GAAG,CAACH,IAAI,CAAC;IACvB,IAAI3W,MAAM,KAAK,CAAC,IAAI6W,SAAS,KAAK9T,eAAe,EAAE;MAC/CwE,UAAU,CAACsP,SAAS,CAAC,GAAGxI,SAAS,CAACnI,KAAK,CAAC;IAC3C,OAAM;MACHqB,UAAU,CAACsP,SAAS,CAAC,GAAG1Q,QAAQ,CAACD,KAAK,CAAC,IAAI,CAACkF,OAAO,CAACuL,IAAI,CAAC,GACnD9O,gBAAgB,CAAC3B,KAAK,EAAE2Q,SAAS,CAAC,GAClC3Q,KAAK;IACd;GACJ;EACO0O,uBAAO,GAAf;IACI,IAAI,CAACmC,IAAI,CAAC,QAAQ,CAAC;GACtB;EACL,OAACnC;AAAD,CA/XA,CAAoBd,YAAY,CA+X/B;AC5cD,SAASkD,QAAQ,CAACC,EAAS,EAAEC,EAAO,EAAEC,EAAU,EAAEC,EAAU;EAC1D,IAAMpX,MAAM,GAAGkX,EAAE,CAAClX,MAAM;EAExB,OAAOiX,EAAE,CAACnQ,GAAG,CAAC,UAACuQ,EAAE,EAAExX,CAAC;IAClB,IAAIA,CAAC,IAAIG,MAAM,EAAE;MACf,OAAOqX,EAAE;IACV,OAAM;MACL,OAAOC,GAAG,CAACD,EAAE,EAAEH,EAAE,CAACrX,CAAC,CAAC,EAAEsX,EAAE,EAAEC,EAAE,CAAC;IAC9B;EACH,CAAC,CAAC;AACJ;AAEA,SAASG,QAAQ,CAACC,MAAsB,EAAEC,MAAsB,EAAEN,EAAU,EAAEC,EAAU;;EAEtF,IAAMM,MAAM,GAAGF,MAAM,CAACtR,KAAK;EAC3B,IAAMyR,MAAM,GAAGF,MAAM,CAACvR,KAAK;;EAE3B,IAAM0R,MAAM,GAAGJ,MAAM,CAAC7Q,KAAK;EAC3B,IAAMkR,MAAM,GAAGJ,MAAM,CAAC9Q,KAAK;EAE3B,IAAIiR,MAAM,KAAKC,MAAM,EAAE;;IAErB,OAAOP,GAAG,CAACE,MAAM,CAACrQ,OAAO,EAAE,EAAEsQ,MAAM,CAACtQ,OAAO,EAAE,EAAEgQ,EAAE,EAAEC,EAAE,CAAC;EACvD;EACD,IAAIM,MAAM,CAAC1X,MAAM,KAAK,CAAC,EAAE;IACvB0X,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;EACd;EACD,IAAIC,MAAM,CAAC3X,MAAM,KAAK,CAAC,EAAE;IACvB2X,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;EACd;EACD,IAAM3Q,CAAC,GAAGgQ,QAAQ,CAACU,MAAM,EAAEC,MAAM,EAAER,EAAE,EAAEC,EAAE,CAAC;EAC1C,IAAMU,UAAU,GAAGF,MAAM;EAEzB,KAAK,IAAI/X,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAE,EAAEA,CAAC,EAAE;IAC1BmH,CAAC,CAACnH,CAAC,CAAC,GAAG0Q,QAAQ,CAACvJ,CAAC,CAACnH,CAAC,CAAC,EAAE,EAAE,CAAC;EAC1B;EACD,IAAMmJ,MAAM,GAAG,IAAIjD,cAAc,CAACiB,CAAC,EAAE;IACnCJ,IAAI,EAAE,OAAO;IACbD,KAAK,EAAEmR,UAAU;IACjBrR,MAAM,EAAE,EAAG,kBAAU,EAAG;IACxBC,MAAM,EAAE;EACT,EAAC;EAEF,OAAOsC,MAAM;AACf;AAEA,SAAS+O,SAAS,CAACd,EAAkB,EAAEC,EAAkB,EAAEC,EAAU,EAAEC,EAAU;EAC/E,IAAMY,MAAM,GAAGf,EAAE,CAACrQ,IAAI;EAEtB,IAAIoR,MAAM,KAAK,OAAO,EAAE;IACtB,OAAOT,QAAQ,CAACN,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC;EAChC;EACD,IAAMM,MAAM,GAAGT,EAAE,CAAC/Q,KAAK;EACvB,IAAMyR,MAAM,GAAGT,EAAE,CAAChR,KAAK;EACvB,IAAMW,GAAG,GAAGmQ,QAAQ,CAACU,MAAM,EAAEC,MAAM,EAAER,EAAE,EAAEC,EAAE,CAAC;EAE5C,OAAO,IAAIrR,cAAc,CAACc,GAAG,EAAE;IAC7BD,IAAI,EAAEoR,MAAM;IACZ3R,SAAS,EAAE4Q,EAAE,CAAC5Q,SAAS,IAAI6Q,EAAE,CAAC7Q,SAAS;IACvCI,MAAM,EAAEwQ,EAAE,CAACxQ,MAAM,IAAIyQ,EAAE,CAACzQ,MAAM;IAC9BC,MAAM,EAAEuQ,EAAE,CAACvQ,MAAM,IAAIwQ,EAAE,CAACxQ,MAAM;IAC9BC,KAAK,EAAEsQ,EAAE,CAACtQ,KAAK,IAAIuQ,EAAE,CAACvQ;EACvB,EAAC;AACJ;AACA;;;;;;;;;;;;;AAaE;AACI,SAAU2Q,GAAG,CAACL,EAAO,EAAEC,EAAO,EAAEC,EAAU,EAAEC,EAAU;EAC1D,IAAIA,EAAE,KAAK,CAAC,EAAE;IACZ,OAAOF,EAAE;EACV,OAAM,IAAIC,EAAE,KAAK,CAAC,IAAIA,EAAE,GAAGC,EAAE,KAAK,CAAC,EAAE;;IAEpC,OAAOH,EAAE;EACV;;EAGD,IAAMgB,KAAK,GAAGpO,OAAO,CAACoN,EAAE,CAAC;EACzB,IAAMiB,KAAK,GAAGrO,OAAO,CAACqN,EAAE,CAAC;EACzB,IAAMiB,WAAW,GAAGF,KAAK,KAAK1D,QAAQ;EACtC,IAAM6D,WAAW,GAAGF,KAAK,KAAK3D,QAAQ;EAEtC,IAAI4D,WAAW,IAAIC,WAAW,EAAE;IAC9B,OAAO;MACL,OAAOd,GAAG,CAACa,WAAW,GAAGtQ,gBAAgB,CAACoP,EAAE,EAAE,CAAC,GAAGA,EAAE,EAAEmB,WAAW,GAAGvQ,gBAAgB,CAACqP,EAAE,EAAE,CAAC,GAAGA,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC;IAC1G,CAAC;EACF,OAAM,IAAIa,KAAK,KAAKC,KAAK,EAAE;IAC1B,IAAID,KAAK,KAAKjO,QAAQ,EAAE;MACtB,OAAO+N,SAAS,CAACd,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC;IACjC,OAAM,IAAIa,KAAK,KAAKlO,KAAK,EAAE;MAC1B,OAAOiN,QAAQ,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC;IAChC,OAAM,IAAIa,KAAK,KAAK,OAAO,EAAE;MAC5B,OAAOhB,EAAE;IACV;EACF,OAAM;IACL,OAAOA,EAAE;EACV;EACD,IAAMI,EAAE,GAAGlE,SAAS,CAAC,UAAG8D,EAAE,CAAE,CAAC;EAC7B,IAAMoB,EAAE,GAAGlF,SAAS,CAAC,UAAG+D,EAAE,CAAE,CAAC;EAC7B,IAAIlQ,CAAC;;EAGL,IAAIsR,KAAK,CAACjB,EAAE,CAACnR,KAAK,CAAC,IAAIoS,KAAK,CAACD,EAAE,CAACnS,KAAK,CAAC,EAAE;IACtC,OAAO+Q,EAAE;EACV,OAAM;IACLjQ,CAAC,GAAGuR,KAAS,CAAClB,EAAE,CAACnR,KAAK,EAAEmS,EAAE,CAACnS,KAAK,EAAEiR,EAAE,EAAEC,EAAE,CAAC;EAC1C;EACD,IAAM3Q,MAAM,GAAG4Q,EAAE,CAAC5Q,MAAM,IAAI4R,EAAE,CAAC5R,MAAM;EACrC,IAAM2M,IAAI,GAAGiE,EAAE,CAACjE,IAAI,IAAIiF,EAAE,CAACjF,IAAI;EAE/B,IAAI,CAAC3M,MAAM,IAAI,CAAC2M,IAAI,EAAE;IACpB,OAAOpM,CAAC;EACT;EACD,OAAOP,MAAM,GAAGO,CAAC,GAAGoM,IAAI;AAC1B;AAEgB,iBAAQ,CACtB7Q,IAAY,EACZoP,QAAgB,EAChB6G,QAAgB,EAChBC,SAAc,EACdtD,SAAc,EACd7R,MAAmB;EACnB,IAAIf,IAAI,KAAKoP,QAAQ,EAAE;IACrB,OAAO8G,SAAS;EACjB,OAAM,IAAIlW,IAAI,KAAKiW,QAAQ,EAAE;IAC5B,OAAOrD,SAAS;EACjB,OAAM,IAAI,CAAC7R,MAAM,EAAE;IAClB,OAAOgU,GAAG,CAACmB,SAAS,EAAEtD,SAAS,EAAE5S,IAAI,GAAGoP,QAAQ,EAAE6G,QAAQ,GAAGjW,IAAI,CAAC;EACnE;EACD,IAAMmW,KAAK,GAAGpV,MAAM,CAAC,CAACf,IAAI,GAAGoP,QAAQ,KAAK6G,QAAQ,GAAG7G,QAAQ,CAAC,CAAC;EAC/D,IAAMzL,KAAK,GAAGoR,GAAG,CAACmB,SAAS,EAAEtD,SAAS,EAAEuD,KAAK,EAAE,CAAC,GAAGA,KAAK,CAAC;EAEzD,OAAOxS,KAAK;AACd;AC1GA,SAASyS,gBAAgB,CAACC,KAAe,EAAErW,IAAY;EACnD,IAAMvC,MAAM,GAAG4Y,KAAK,CAAC5Y,MAAM;EAE3B,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,MAAM,EAAE,EAAEH,CAAC,EAAE;IAC7B,IAAI+Y,KAAK,CAAC/Y,CAAC,CAAC,KAAK0C,IAAI,EAAE;MACnB,OAAO,CAAC1C,CAAC,EAAEA,CAAC,CAAC;IAChB,OAAM,IAAI+Y,KAAK,CAAC/Y,CAAC,CAAC,GAAG0C,IAAI,EAAE;MACxB,OAAO,CAAC1C,CAAC,GAAG,CAAC,GAAGA,CAAC,GAAG,CAAC,GAAG,CAAC,EAAEA,CAAC,CAAC;IAChC;EACJ;EACD,OAAO,CAACG,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAG,CAAC,CAAC;AACnC;AACA,SAAS6Y,uBAAuB,CAACtR,UAAkB;EAC/C,IAAM4O,QAAQ,GAAG,EAAE;EAEnB,KAAK,IAAM5P,MAAI,IAAIgB,UAAU,EAAE;IAC3B4O,QAAQ,CAAC7L,IAAI,CAAC,EAAG,iBAAS,cAAIwO,UAAU,CAACvS,MAAI,CAAC,cAAIgB,UAAU,CAAChB,MAAI,CAAC,MAAG,CAAC;EACzE;EACD,OAAO4P,QAAQ,CAACjP,IAAI,CAAC,EAAE,CAAC;AAC5B;AACA,SAAS6R,OAAO,CAACH,KAAe,EAAErW,IAAY;EAC1C,IAAMvC,MAAM,GAAG4Y,KAAK,CAAC5Y,MAAM;EAC3B,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,MAAM,EAAE,EAAEH,CAAC,EAAE;IAC7B,IAAI0C,IAAI,GAAGqW,KAAK,CAAC/Y,CAAC,CAAC,EAAE;MACjB+Y,KAAK,CAACI,MAAM,CAACnZ,CAAC,EAAE,CAAC,EAAE0C,IAAI,CAAC;MACxB;IACH;EACJ;EACDqW,KAAK,CAAC5Y,MAAM,CAAC,GAAGuC,IAAI;AACxB;AACA,SAAS0W,QAAQ,CAACC,OAAmB,EAAE3W,IAAY,EAAE4W,OAAe;EAChE,IAAMC,SAAS,GAAGF,OAAO,CAACA,OAAO,CAAClZ,MAAM,GAAG,CAAC,CAAC;EAE7C,CAAC,CAACoZ,SAAS,IAAIA,SAAS,CAAC,CAAC,CAAC,KAAK7W,IAAI,IAAI6W,SAAS,CAAC,CAAC,CAAC,KAAKD,OAAO,KAC5DD,OAAO,CAAC5O,IAAI,CAAC,CAACK,OAAO,CAACpI,IAAI,CAAC,EAAEoI,OAAO,CAACwO,OAAO,CAAC,CAAC,CAAC;AACvD;AACgB,mBAAU,CAACP,KAAe,EAAES,MAAuB;EAC/D,IAAIH,OAAO,GAAGN,KAAK,CAAC9R,GAAG,CAAC,cAAI,EAAI;IAAA,OAAC,CAACvE,IAAI,EAAEA,IAAI,CAAC;EAAb,CAAc,CAAC;EAC/C,IAAI+W,WAAW,GAAG,EAAE;EAEpBD,MAAM,CAACjS,OAAO,CAAC,eAAK;IAChB,IAAM+G,cAAc,GAAG5C,KAAK,CAAC1H,eAAe,CAAW;IACvD,IAAMyN,KAAK,GAAG/F,KAAK,CAACzH,KAAK,CAAC;IAC1B,IAAM0N,SAAS,GAAGjG,KAAK,CAACvH,UAAU,CAAC;IACnC,IAAMgN,SAAS,GAAGzF,KAAK,CAAC3H,SAAS,CAAC;IAClC,IAAM2V,QAAQ,GAAGxX,IAAI,CAACyX,IAAI,CAACrL,cAAc,CAAC;IAC1C,IAAMsL,eAAe,GAAGP,OAAO,CAACA,OAAO,CAAClZ,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACtD,IAAMA,MAAM,GAAGkZ,OAAO,CAAClZ,MAAM;IAC7B,IAAM0Z,QAAQ,GAAGD,eAAe,GAAGtL,cAAc;IAEjD,KAAK,IAAItO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0Z,QAAQ,EAAE,EAAE1Z,CAAC,EAAE;MAC/B,IAAM4T,SAAS,GACXzC,SAAS,KAAKnM,OAAO,IACrBmM,SAAS,KAAKpM,SAAS,IAAI/E,CAAC,GAAG,CAAC,IAChCmR,SAAS,KAAKlM,iBAAiB,IAAI,EAAEjF,CAAC,GAAG,CAAC,CAAC;MAE/C,KAAK,IAAI8Z,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG3Z,MAAM,EAAE,EAAE2Z,CAAC,EAAE;QAC7B,IAAMC,KAAK,GAAGV,OAAO,CAACzF,SAAS,GAAGzT,MAAM,GAAG2Z,CAAC,GAAG,CAAC,GAAGA,CAAC,CAAC;QACrD,IAAMpX,IAAI,GAAGqX,KAAK,CAAC,CAAC,CAAC;QACrB,IAAM3L,WAAW,GAAGwL,eAAe,GAAG5Z,CAAC,IAAI4T,SAAS,GAAGgG,eAAe,GAAGG,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC,CAAC;QAC7F,IAAMR,SAAS,GAAGF,OAAO,CAACzF,SAAS,GAAGzT,MAAM,GAAG2Z,CAAC,GAAGA,CAAC,GAAG,CAAC,CAAC;QAEzD,IAAI1L,WAAW,GAAGyL,QAAQ,EAAE;UACxB,IAAIC,CAAC,KAAK,CAAC,EAAE;YACT,IAAMhI,QAAQ,GAAG8H,eAAe,GAAG5Z,CAAC,IAC/B4T,SAAS,GAAGgG,eAAe,GAAGL,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,CAAC;YAC/D,IAAMS,UAAU,GAAGtB,KAAS,CAACa,SAAS,CAAC,CAAC,CAAC,EAAE7W,IAAI,EAAEmX,QAAQ,GAAG/H,QAAQ,EAAE1D,WAAW,GAAGyL,QAAQ,CAAC;YAE7FT,QAAQ,CAACK,WAAW,EAAE,CAAChI,KAAK,GAAGmI,eAAe,GAAGtL,cAAc,IAAIqD,SAAS,EAAEqI,UAAU,CAAC;UAC5F;UACD;QACH,OAAM,IACH5L,WAAW,KAAKyL,QAAQ,IACrBJ,WAAW,CAACtZ,MAAM,IAClBsZ,WAAW,CAACA,WAAW,CAACtZ,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK0Z,QAAQ,GAAGpI,KAAK,EAChE;UACE;QACH;QACD2H,QAAQ,CAACK,WAAW,EAAE,CAAChI,KAAK,GAAGrD,WAAW,IAAIuD,SAAS,EAAEjP,IAAI,CAAC;MACjE;IACJ;;IAED+O,KAAK,IAAIgI,WAAW,CAACQ,OAAO,CAAC,CAAC,CAAC,EAAER,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAEpDJ,OAAO,GAAGI,WAAW;IACrBA,WAAW,GAAG,EAAE;EACpB,CAAC,CAAC;EAEF,OAAOJ,OAAO;AAClB;AACA;;;;;;;;;;;;;;;;AAgBE;AACF;EAAwB/Z,SAA2D;EAY/E;;;;;;;;;;;;;;;;AAgBK;EACL,SAAY4a,oBAAgB,EAAE/T,OAAmC;IAAjE,YACImL,iBAAO,IAEV;IA/BMC,KAAK,SAAa,EAAE;IACpBA,KAAK,SAAmB,EAAE;IAC1BA,aAAO,GAAG,IAAIsD,QAAQ,CAAC5O,cAAc,CAAC;IACtCsL,KAAQ,YAAqB,EAAE;IAI9BA,KAAU,cAAY,IAAI;IAuB9BA,KAAI,CAAC4I,IAAI,CAACzS,UAAU,EAAEvB,OAAO,CAAC;;;EAE3B+T,+BAAW,GAAlB;IACI,IAAMnB,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,IAAM5Y,MAAM,GAAG4Y,KAAK,CAAC5Y,MAAM;IAE3B,OAAO,CAACA,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG4Y,KAAK,CAAC5Y,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI,CAACuL,KAAK,CAAC7H,QAAQ,CAAC;GACxE;EACD;;;AAGI;EACGqW,wBAAI,GAAX;IACI,OAAO,IAAI,CAACnB,KAAK,CAAC5Y,MAAM;GAC3B;EACM+Z,SAAW,yBAAlB,UAAmB1M,QAAgB;IAC/B,IAAI,CAACA,QAAQ,EAAE;MACX,OAAO,IAAI;IACd;IACD,IAAM4M,gBAAgB,GAAG,IAAI,CAAC3M,WAAW,EAAE;IAE3C,IAAI2M,gBAAgB,GAAG,CAAC,EAAE;MACtB,IAAMC,OAAK,GAAG7M,QAAQ,GAAG4M,gBAAgB;MACnC,SAAmB,IAAI;QAArBrB,KAAK;QAAEuB,OAAK,WAAS;MAC7B,IAAMC,KAAG,GAAmB,EAAE;MAE9B,IAAI,CAACxB,KAAK,GAAGA,KAAK,CAAC9R,GAAG,CAAC,cAAI;QACvB,IAAMuT,KAAK,GAAG1P,OAAO,CAACpI,IAAI,GAAG2X,OAAK,CAAC;QAEnCE,KAAG,CAACC,KAAK,CAAC,GAAGF,OAAK,CAAC5X,IAAI,CAAC;QAExB,OAAO8X,KAAK;MAChB,CAAC,CAAC;MACF,IAAI,CAACC,KAAK,GAAGF,KAAG;IACnB,OAAM;MACH,IAAI,CAACG,QAAQ,CAAClN,QAAQ,CAAC;IAC1B;IACD,OAAO,IAAI;GACd;EACM0M,SAAK,mBAAZ,UAAajO,EAAoB;IAC7B,IAAMP,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,IAAMiP,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC9B,IAAMxa,MAAM,GAAGwa,QAAQ,CAACxa,MAAM;IAE9BuL,KAAK,CAACO,EAAE,GAAGA,EAAE,IAAIF,MAAM,CAAC,CAAC,CAAC5L,MAAM,CAAC;IAEjC,IAAIA,MAAM,IAAI,CAACuL,KAAK,CAACjG,QAAQ,CAAC,EAAE;MAC5B,IAAMmV,SAAO,GAAGnO,IAAI,CAAC,IAAI,CAACF,KAAK,EAAE,CAAC;MAElCb,KAAK,CAACjG,QAAQ,CAAC,GAAG,WAAIxC,aAAa,gBAAK2X,SAAO,QAAI;MACnDD,QAAQ,CAACpT,OAAO,CAAC,iBAAO;QACpBsT,OAAO,CAACC,YAAY,CAAC7X,aAAa,EAAE2X,SAAO,CAAC;MAChD,CAAC,CAAC;IACL;IACD,OAAO,IAAI;GACd;EAED;;;;;;;;AAQI;EACGV,SAAG,iBAAV,UAAWxX,IAAS;IAApB,IAgEC6O;IAhEqB,IAAcnG;SAAd,IAAc4J,QAAdA,EAAc,qBAAdA,EAAc;MAAd5J,IAAc;;IAChC,IAAIyD,WAAW,CAACnM,IAAI,CAAC,EAAE;MACnB,OAAO,IAAI,CAACoS,GAAG,CAAC,CAAC,EAAEpS,IAAI,CAAC;IAC3B,OAAM,IAAIkG,OAAO,CAAClG,IAAI,CAAC,EAAE;MACtB,IAAMqY,QAAM,GAAGrY,IAAI,CAACvC,MAAM;MAE1B,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+a,QAAM,EAAE,EAAE/a,CAAC,EAAE;QAC7B,IAAMF,CAAC,GAAGib,QAAM,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC9H,WAAW,CAAC,EAAG,SAAC,IAAI8H,QAAM,GAAG,CAAC,CAAC,GAAG,GAAG,EAAG,KAAC;QAE3E,IAAI,CAACjG,GAAG,CAAChV,CAAC,EAAE4C,IAAI,CAAC1C,CAAC,CAAC,CAAC;MACvB;IACJ,OAAM,IAAIuK,QAAQ,CAAC7H,IAAI,CAAC,EAAE;8BACZ5C,CAAC;QACR,IAAMuG,KAAK,GAAG3D,IAAI,CAAC5C,CAAC,CAAC;QAErBiJ,UAAU,CAACjJ,CAAC,CAAC,CAACyH,OAAO,CAAC,kBAAQ;UAC1B,IAAMyT,QAAQ,GAAGzJ,KAAI,CAAC0B,WAAW,CAACgI,QAAQ,CAAC;UAE3C,IAAIxC,KAAK,CAACuC,QAAQ,CAAC,EAAE;YACjBtQ,QAAQ,CAACrE,KAAK,EAAE,CAAC4U,QAAQ,CAAC,CAAC,CAAC1T,OAAO,CAAC,eAAK;;cACrC,IAAM2T,UAAU,GAAGjQ,eAAe,CAACvB,KAAK,CAACpI,KAAK,CAAC,CAAC,CAAC,EAAE+E,KAAK,CAAC;cACzD,IAAMW,GAAG,GAAG4B,OAAO,CAACsS,UAAU,CAAC,GAC3BA,UAAU,GAAG,CAACjQ,eAAe,CAACvB,KAAK,EAAE6H,KAAI,CAAChR,MAAM,CAAC,EAAE2a,UAAU,CAAC;cAClE,IAAM/a,MAAM,GAAG6G,GAAG,CAAC7G,MAAM;cAEzB,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,MAAM,EAAE,EAAEH,CAAC,EAAE;gBAC7B,WAAI,CAAC0a,QAAQ,CAAC,EAAG,SAAC,IAAIva,MAAM,GAAG,CAAC,CAAC,GAAG,GAAG,EAAG,KAAC,EAAC2U,GAAG,2CAAIpL,KAAK,WAAE1C,GAAG,CAAChH,CAAC,CAAC,CAAE;cACrE;YACL,CAAC,CAAC;UACL,OAAM;YACHuR,KAAI,CAACuD,GAAG,CAACkG,QAAQ,EAAE3U,KAAK,CAAC;UAC5B;QACL,CAAC,CAAC;;MApBN,KAAK,IAAMvG,CAAC,IAAI4C,IAAI;gBAAT5C,CAAC;MAqBX;IACJ,OAAM,IAAI,CAAC8V,WAAW,CAAClT,IAAI,CAAC,EAAE;MAC3B,IAAMyY,OAAK,GAAG/P,IAAI,CAAC,CAAC,CAAC;MAErBrC,UAAU,CAACrG,IAAI,GAAG,EAAE,CAAC,CAAC6E,OAAO,CAAC,kBAAQ;QAClC,IAAMyT,QAAQ,GAAGzJ,KAAI,CAAC0B,WAAW,CAACgI,QAAQ,CAAC;QAE3C,IAAIpM,WAAW,CAACsM,OAAK,CAAC,EAAE;UACpB,IAAM1J,KAAK,GAAG0J,OAAK,CAACC,QAAQ,EAAE;UAC9B,IAAMC,QAAM,GAAGF,OAAK,CAAC7R,QAAQ,CAAC,CAACiI,KAAI,CAAC+J,QAAQ,CAACN,QAAQ,GAAGvJ,KAAK,CAAC,CAAC;UAC/D,IAAMjE,QAAQ,GAAG2N,OAAK,CAAC1N,WAAW,EAAE;UACpC,IAAM0D,SAAS,GAAGgK,OAAK,CAACI,YAAY,EAAE;UACtC,IAAM3H,SAAS,GAAGzC,SAAS,CAAC3I,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;UAEnD,KAAK,IAAMgT,SAAS,IAAIH,QAAM,EAAE;YAC5B,IAAM1C,QAAQ,GAAG/E,SAAS,GAAGpG,QAAQ,GAAGkB,UAAU,CAAC8M,SAAS,CAAC,GAAG9M,UAAU,CAAC8M,SAAS,CAAC;YACrFjK,KAAI,CAACuD,GAAG,CAACkG,QAAQ,GAAGrC,QAAQ,EAAE0C,QAAM,CAACG,SAAS,CAAC,CAAC;UACnD;QACJ,OAAM,IAAIpQ,IAAI,CAACjL,MAAM,KAAK,CAAC,IAAIyI,OAAO,CAACuS,OAAK,CAAC,EAAE;UAC5CA,OAAK,CAAC5T,OAAO,CAAC,UAACiE,IAAS;YACpB+F,KAAI,CAACuD,GAAG,CAACkG,QAAQ,EAAExP,IAAI,CAAC;UAC5B,CAAC,CAAC;QACL,OAAM;UACH,IAAMqK,KAAK,GAAGtE,KAAI,CAACmJ,QAAQ,CAACM,QAAQ,CAAC;UAErCnF,KAAK,CAACf,GAAG,OAATe,KAAK,EAAQzK,IAAI,CAAE;QACtB;MACL,CAAC,CAAC;IACL;IACD,IAAI,CAACqQ,UAAU,GAAG,IAAI;IACtB,OAAO,IAAI;GACd;EACD;;;;;;;;AAQI;EACGvB,SAAG,iBAAV,UAAWxX,IAAqB;IAAE,IAAmB0I;SAAnB,IAAmB4J,QAAnBA,EAAmB,qBAAnBA,EAAmB;MAAnB5J,IAAmB;;IACjD,IAAMyK,KAAK,GAAG,IAAI,CAAC/G,QAAQ,CAACpM,IAAI,CAAC;IAEjC,OAAOmT,KAAK,IAAIA,KAAK,CAACxM,GAAG,OAATwM,KAAK,EAAQzK,IAAI,CAAC;GACrC;EACD;;;;;;AAMI;EACG8O,SAAS,uBAAhB,UAAiBxQ,KAAiB;IAC9B,IAAI,CAAC+R,UAAU,IAAI,IAAI,CAACC,MAAM,EAAE;IAEhC,OAAO,IAAI,CAACC,OAAO,CAACtS,GAAG,CAACK,KAAK,CAAC;GACjC;EACD;;;;;;;AAOI;EACGwQ,6BAAS,GAAhB,UAAiBxQ,KAAiB,EAAEyK,MAAkB;IAClD,IAAI,CAACsH,UAAU,IAAI,IAAI,CAACC,MAAM,EAAE;IAEhC,IAAM/S,MAAM,GAAG,IAAI,CAACgT,OAAO,CAAC7G,GAAG,CAACpL,KAAK,EAAEyK,MAAM,CAAC;IAE9C,IAAI,CAACyH,iBAAiB,EAAE;IAExB,OAAOjT,MAAM;GAChB;EACD;;;;AAII;EACIuR,kCAAc,GAArB;IACG,OAAO,IAAI,CAACyB,OAAO,CAACvG,SAAS,EAAE;GAClC;EACD;;;;;;;;AAQI;EACG8E,SAAc,4BAArB,UAAsBtS,GAAwB;IAC1C,IAAI,CAAC+T,OAAO,CAACtG,SAAS,CAACzN,GAAG,CAAC;IAE3B,IAAI,CAACgU,iBAAiB,EAAE;GAC3B;EAED;;;;;;;AAOI;EACG1B,SAAM,oBAAb,UAAcxX,IAAqB;IAAE,IAAmB0I;SAAnB,IAAmB4J,QAAnBA,EAAmB,qBAAnBA,EAAmB;MAAnB5J,IAAmB;;IACpD,IAAIA,IAAI,CAACjL,MAAM,EAAE;MACb,IAAM0V,KAAK,GAAG,IAAI,CAAC/G,QAAQ,CAACpM,IAAI,CAAC;MAEjCmT,KAAK,IAAIA,KAAK,CAACH,MAAM,OAAZG,KAAK,EAAWzK,IAAI,CAAC;IACjC,OAAM;MACH,IAAI,CAACyQ,WAAW,CAACnZ,IAAI,CAAC;IACzB;IACD,IAAI,CAAC+Y,UAAU,GAAG,IAAI;IACtB,OAAO,IAAI;GACd;EACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BI;EACGvB,SAAM,oBAAb,UAAc1O,IAA8B;IACxC,IAAIqD,WAAW,CAACrD,IAAI,CAAC,EAAE;MACnB,IAAI,CAACsJ,GAAG,CAAC,IAAI,CAACrH,WAAW,EAAE,EAAEjC,IAAI,CAAC;IACrC,OAAM;MACH,IAAI,CAACsQ,MAAM,CAAC,IAAI5B,SAAS,CAAC1O,IAAI,CAAC,CAAC;IACnC;IACD,OAAO,IAAI;GACd;EACD;;;;AAII;EACG0O,SAAO,qBAAd,UAAe1O,IAA8B;IACzC,IAAIqD,WAAW,CAACrD,IAAI,CAAC,EAAE;MACnB,IAAMuQ,WAAW,GAAGvQ,IAAI,CAACiC,WAAW,EAAE,GAAGjC,IAAI,CAAC4P,QAAQ,EAAE;MACxD,IAAMY,UAAU,GAAG,IAAI,CAAClN,QAAQ,CAAC,CAAC,CAAC;;MAEnC,IAAI,CAAC+M,WAAW,CAAC,CAAC,CAAC;MACnB,IAAI,CAAC5B,OAAO,CAAC8B,WAAW,CAAC;MACzB,IAAI,CAACjH,GAAG,CAAC,CAAC,EAAEtJ,IAAI,CAAC;MACjB,IAAI,CAACsJ,GAAG,CAACiH,WAAW,GAAGnY,SAAS,EAAEoY,UAAU,CAAC;IAChD,OAAM;MACH,IAAI,CAACC,OAAO,CAAC,IAAI/B,SAAS,CAAC1O,IAAI,CAAC,CAAC;IACpC;IACD,OAAO,IAAI;GACd;EACD;;;;;;;AAOG;EACI0O,SAAO,qBAAd,UAAexX,IAAY;IACjB,SAAmB,IAAI;MAArBqW,KAAK;MAAE0B,KAAK,WAAS;IAC7B,IAAM7S,GAAG,GAAmB,EAAE;IAE9B,IAAI,CAACmR,KAAK,GAAGA,KAAK,CAAC9R,GAAG,CAAC,WAAC;MACpB,IAAMuT,KAAK,GAAG1P,OAAO,CAACpI,IAAI,GAAG5C,CAAC,CAAC;MAE/B8H,GAAG,CAAC4S,KAAK,CAAC,GAAGC,KAAK,CAAC3a,CAAC,CAAC;MACrB,OAAO0a,KAAK;IAChB,CAAC,CAAC;IACF,IAAI,CAACC,KAAK,GAAG7S,GAAG;IAChB,OAAO,IAAI;GACd;EACD;;;;;;AAMG;EACIsS,SAAQ,sBAAf,UAAgBgC,WAAkB;IAAlB;MAAAA,WAAkB;IAAA;IAC9B,IAAMtU,GAAG,GAAmB,EAAE;IAC9B,IAAM6J,KAAK,GAAG,IAAI,CAAC2J,QAAQ,EAAE;IAE7B,IAAI,CAAC7T,OAAO,CAAC,UAACsO,KAAY,EAAEnT,IAAY;MACpCkF,GAAG,CAAC,CAAC,CAAClF,IAAI,IAAI,CAACwZ,WAAW,GAAGtY,SAAS,GAAG,CAAC,IAAI6N,KAAK,GAAG/O,IAAI,CAAC,GAAGmT,KAAK,CAACzO,KAAK,EAAE;IAC/E,CAAC,CAAC;IACF,OAAOQ,GAAG;GACb;EACD;;;;;;AAMG;EACIsS,SAAW,yBAAlB,UAAmB3Z,MAA4F;IAC3G,IAAI4b,UAAU,CAAC5b,MAAM,CAAC,EAAE;MACpB,IAAI,CAAC6b,UAAU,CAAC7b,MAAM,CAAC,IAAI,CAACgM,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;IAC3C,OAAM;MACH,IAAI,CAAC6P,UAAU,CAAC7b,MAAM,CAAC;IAC1B;IACD,OAAO,IAAI;GACd;EACD;;AAEG;EACI2Z,+BAAW,GAAlB;IACI,OAAO,IAAI,CAACS,QAAQ;GACvB;EACD;;;;;;;;AAQG;EACIT,SAAW,yBAAlB,UAAmB3Z,MAAwE;IACvF,OAAO,IAAI,CAAC6b,UAAU,CAAC7b,MAAM,CAAC;GACjC;EACD;;;;;;;;AAQG;EACI2Z,SAAU,wBAAjB,UAAkB3Z,MAAwE;IACtF,IAAMmL,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,IAAIiP,QAAQ,GAAqB,EAAE;IAEnC,IAAI,CAACpa,MAAM,EAAE;MACT,OAAO,IAAI;IACd,OAAM,IAAIA,MAAM,KAAK,IAAI,IAAI+F,QAAQ,CAAC/F,MAAM,CAAC,EAAE;MAC5C,IAAMyL,QAAQ,GAAGzL,MAAM,KAAK,IAAI,GAAG,EAAG,aAAK,CAAC0L,EAAE,CAAE,GAAG1L,MAAM;MACzD,IAAMuH,OAAO,GAAG,0BAA0B,CAACmB,IAAI,CAAC+C,QAAQ,CAAC;MAEzD2O,QAAQ,GAAG0B,OAAO,CAAChQ,CAAC,CAACvE,OAAO,GAAGA,OAAO,CAAC,CAAC,CAAC,GAAGkE,QAAQ,EAAE,IAAI,CAAC,CAAC;MAC5DN,KAAK,CAACjG,QAAQ,CAAC,GAAGuG,QAAQ;IAC7B,OAAM;MACH2O,QAAQ,GAAIpa,MAAM,YAAY+b,OAAO,GAAI,CAAC/b,MAAM,CAAC,GAAG8b,OAAO,CAAC9b,MAAM,CAAC;IACtE;IACD,IAAI,CAACoa,QAAQ,CAACxa,MAAM,EAAE;MAClB,OAAO,IAAI;IACd;IACD,IAAI,CAACwa,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACnO,KAAK,CAAC,IAAI,CAACD,KAAK,EAAE,CAAC;IACxB,IAAI,CAAChM,MAAM,GAAGoa,QAAQ,CAAC,CAAC,CAAC,CAAC4B,KAAK;IAC/B,IAAI,CAACC,UAAU,GAAG,UAAC3G,KAAY;MAC3B,IAAM4G,UAAU,GAAG5G,KAAK,CAACxM,GAAG,CAAC,WAAW,CAAC;MAEzC,IAAIoT,UAAU,EAAE;gCACD7R,MAAI;UACX+P,QAAQ,CAACpT,OAAO,CAAC,YAAE;YACf6F,EAAE,CAAC0N,YAAY,CAAClQ,MAAI,EAAE6R,UAAU,CAAC7R,MAAI,CAAC,CAAC;UAC3C,CAAC,CAAC;;QAHN,KAAK,IAAMA,MAAI,IAAI6R,UAAU;kBAAlB7R,MAAI;QAId;MACJ;MACD,IAAIiL,KAAK,CAACc,GAAG,CAAC,MAAM,CAAC,EAAE;QACnB,IAAM+F,MAAI,GAAG7G,KAAK,CAACxM,GAAG,CAAC,MAAM,CAAC;QAE9BsR,QAAQ,CAACpT,OAAO,CAAC,YAAE;UACf6F,EAAE,CAACuP,SAAS,GAAGD,MAAI;QACvB,CAAC,CAAC;MACL;MACD,IAAME,OAAO,GAAG/G,KAAK,CAAC7G,SAAS,EAAE;MAEjC,IAAItD,KAAK,CAACkR,OAAO,KAAKA,OAAO,EAAE;QAC3BlR,KAAK,CAACkR,OAAO,GAAGA,OAAO;QAEvBjC,QAAQ,CAACpT,OAAO,CAAC,YAAE;UACf6F,EAAE,CAACmP,KAAK,CAACK,OAAO,IAAIA,OAAO;QAC/B,CAAC,CAAC;QACF,OAAO/G,KAAK;MACf;IACL,CAAC;IACD,OAAO,IAAI;GACd;EACMqE,SAAS,uBAAhB,UAAiB3Z,MAAW;IACxB,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACic,UAAU,GAAG,UAAC3G,KAAY;MAC3B,IAAMjO,GAAG,GAAGiO,KAAK,CAACxM,GAAG,EAAE;MAEvB,KAAK,IAAMgG,MAAI,IAAIzH,GAAG,EAAE;QACpBrH,MAAM,CAAC8O,MAAI,CAAC,GAAGzH,GAAG,CAACyH,MAAI,CAAC;MAC3B;IACL,CAAC;IACD,OAAO,IAAI;GACd;EACD;;;;;;;;;AASI;EACG6K,0BAAM,GAAb,UAAcxX,IAAY,EAAEgF,UAAyB;IAAzB;MAAAA,UAAyB;IAAA;IACjD,IAAI,CAACoN,GAAG,CAACpS,IAAI,EAAEma,OAAO,CAAC,IAAI,CAAClC,QAAQ,EAAEjT,UAAU,CAAC,CAAC;IAClD,OAAO,IAAI;GACd;EACMwS,SAAO,qBAAd,UAAexX,IAAqB,EAAEoQ,MAAgB,EAAEC,QAAkB,EAAE+J,YAAyB;IAArG,IAuBCvL;IAtBGD,iBAAMpE,OAAO,CAAC7N,eAAI,EAAEyT,MAAM,EAAEC,QAAQ,EAAE;MAClC,IAAMnB,aAAa,GAAGL,KAAI,CAAC8B,gBAAgB,EAAE;MAC7C,IAAM5P,MAAM,GAAG8N,KAAI,CAAC/C,SAAS,EAAE,IAAIsO,YAAY;MAC/C,IAAMjH,KAAK,GAAGtE,KAAI,CAACwL,WAAW,CAACnL,aAAa,EAAEnO,MAAM,CAAC;MACrD,IAAM2K,WAAW,GAAGmD,KAAI,CAACc,OAAO,EAAE;MAElCd,KAAI,CAACyL,IAAI,GAAGnH,KAAK;MACjB;;;;;;AAMG;MACHtE,KAAI,CAACxD,OAAO,CAAC,SAAS,EAAE;QACpB8H,KAAK;QACLzH,WAAW;QACX1L,IAAI,EAAEkP;MACT,EAAC;MACFL,KAAI,CAACiL,UAAU,IAAIjL,KAAI,CAACiL,UAAU,CAAC3G,KAAK,CAAC;IAC7C,CAAC,CAAC;IACF,OAAO,IAAI;GACd;EACD;;;;;AAKI;EACGqE,0BAAM,GAAb;IACI,IAAM+C,WAAW,GAAG,IAAI,CAACtB,OAAO;IAChC,IAAMjS,KAAK,GAAG,EAAE;IAChB,IAAI,CAACnC,OAAO,CAAC,eAAK;MACdsD,WAAW,CAACnB,KAAK,EAAEmM,KAAK,CAACnO,UAAU,CAAC;IACxC,CAAC,CAAC;IAEF,IAAMiU,OAAO,GAAG,IAAI9G,QAAQ,CAAC5O,cAAc,CAAC;IAE5C,SAASiX,QAAQ,CAACjW,GAAiB,EAAEuD,KAAiB;MAClD,IAAM6J,IAAI,GAAGC,OAAO,CAACrN,GAAG,CAAC;MAEzBsN,UAAU,CAACF,IAAI,EAAE4I,WAAW,CAAC5T,GAAG,CAACmB,KAAK,CAAC,CAAC;MAExCmR,OAAO,CAAC7G,GAAG,CAACtK,KAAK,EAAE6J,IAAI,CAAC;MACxBA,IAAI,CAAC9M,OAAO,CAAC,aAAG;QACZ,IAAM4V,OAAO,GAAGlW,GAAG,CAACzG,GAAG,CAAC;QACxB,IAAI+J,QAAQ,CAAC4S,OAAO,CAAC,EAAE;UACnBD,QAAQ,CAACC,OAAO,kCAAM3S,KAAK,EAAE,WAAG,UAAE;QACrC;MACL,CAAC,CAAC;;IAEN0S,QAAQ,CAACxT,KAAK,EAAE,EAAE,CAAC;IAEnB,IAAI,CAACiS,OAAO,GAAGA,OAAO;IAEtB,IAAI,CAACpU,OAAO,CAAC,eAAK;MACdsO,KAAK,CAACC,cAAc,CAAC6F,OAAO,CAACzG,QAAQ,CAAC;IAC1C,CAAC,CAAC;IACF,IAAI,CAACuG,UAAU,GAAG,KAAK;IACvB,OAAO,IAAI;GACd;EACD;;;;;;AAMI;EACGvB,SAAQ,sBAAf,UAAgBxX,IAAqB;IACjC,IAAImT,KAAK,GAAG,IAAI,CAAC/G,QAAQ,CAACpM,IAAI,CAAC;IAE/B,IAAImT,KAAK,EAAE;MACP,OAAOA,KAAK;IACf;IACDA,KAAK,GAAG,IAAId,KAAK,EAAE;IAEnB,IAAI,CAACqI,QAAQ,CAAC1a,IAAI,EAAEmT,KAAK,CAAC;IAC1B,OAAOA,KAAK;GACf;EACD;;;;;;AAMI;EACGqE,4BAAQ,GAAf,UAAgBxX,IAAqB,EAAEmT,KAAY;IAC/C,IAAMmF,QAAQ,GAAG,IAAI,CAAC/H,WAAW,CAACvQ,IAAI,CAAC;IAEvC,IAAI,CAAC+X,KAAK,CAACO,QAAQ,CAAC,GAAGnF,KAAK;IAC5BqD,OAAO,CAAC,IAAI,CAACH,KAAK,EAAEiC,QAAQ,CAAC;IAC7B,IAAI,CAACS,UAAU,GAAG,IAAI;IACtB,OAAO,IAAI;GACd;EAED;;;;;;AAMI;EACGvB,SAAQ,sBAAf,UAAgBxX,IAAqB;IACjC,OAAO,IAAI,CAAC+X,KAAK,CAAC,IAAI,CAACxH,WAAW,CAACvQ,IAAI,CAAC,CAAC;GAC5C;EAED;;;;;;AAMI;EACGwX,SAAW,yBAAlB,UAAmBxX,IAAqB;IACpC,IAAMsY,QAAQ,GAAG,IAAI,CAAC/H,WAAW,CAACvQ,IAAI,CAAC;IACvC,IAAM+X,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,IAAM9T,KAAK,GAAG,IAAI,CAACoS,KAAK,CAACvQ,OAAO,CAACwS,QAAQ,CAAC;IAE1C,OAAOP,KAAK,CAACO,QAAQ,CAAC;;IAGtB,IAAIrU,KAAK,GAAG,CAAC,CAAC,EAAE;MACZ,IAAI,CAACoS,KAAK,CAACI,MAAM,CAACxS,KAAK,EAAE,CAAC,CAAC;IAC9B;IACD,IAAI,CAAC8U,UAAU,GAAG,IAAI;IACtB,OAAO,IAAI;GACd;EACD;;;;;;;;;;AAUI;EACGvB,SAAQ,sBAAf,UAAgBxX,IAAqB;IACjC,OAAO,IAAI,CAACuQ,WAAW,CAACvQ,IAAI,CAAC,IAAI,IAAI,CAAC+X,KAAK;GAC9C;EACD;;;;;;AAMI;EACGP,SAAO,qBAAd,UAAe9O,IAAc;IACzB,IAAI,CAACqQ,UAAU,IAAI,IAAI,CAACC,MAAM,EAAE;IAChC,OAAO,CAAC,CAAC,IAAI,CAACC,OAAO,CAACtS,GAAG,CAAC+B,IAAI,CAAC;GAClC;EACD;;;;;;;;AAQI;EACG8O,8BAAU,GAAjB,UAAkBxX,IAAqB,EAAEmT,KAAY;IACjD,IAAIA,KAAK,EAAE;MACP,IAAMwH,OAAO,GAAG,IAAI,CAAC3C,QAAQ,CAAChY,IAAI,CAAC;MAEnC2a,OAAO,CAAC5I,KAAK,CAACoB,KAAK,CAAC;IACvB;IACD,OAAO,IAAI;GACd;EACD;;;;;;;;;;;;;;;;;;;;AAoBI;EACGqE,+BAAW,GAAlB,UAAmBxX,IAAY,EAAEoa,YAAyB,EAAEQ,UAAoB;IAAhF,IAsCC/L;IArCG,IAAI,CAACkK,UAAU,IAAI,IAAI,CAACC,MAAM,EAAE;IAChC,IAAM7F,KAAK,GAAG,IAAId,KAAK,EAAE;IACnB,MAAgB,mBAAgB,CAAC,IAAI,CAACgE,KAAK,EAAErW,IAAI,CAAC;MAAjD6a,IAAI;MAAEC,KAAK,QAAsC;IACxD,IAAIC,UAAU,GAAG,IAAI,CAACjP,SAAS,EAAE,IAAIsO,YAAY;IACjD,IAAInB,OAAO,GAAG,IAAI,CAACA,OAAO;IAE1B,IAAI,IAAI,CAAC+B,OAAO,CAAC,CAACxa,eAAe,CAAC,CAAC,EAAE;MACjC,IAAMya,SAAS,GAAG,IAAI,CAACC,WAAW,CAAClb,IAAI,EAAE,CAACQ,eAAe,CAAC,EAAEqa,IAAI,EAAEC,KAAK,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,CAAC;MAExFrB,UAAU,CAACwB,SAAS,CAAC,KAAKF,UAAU,GAAGE,SAAS,CAAC;IACpD;IACD,IAAIL,UAAU,EAAE;MACZ,IAAMO,WAAS,GAAG,IAAI,CAAC/O,QAAQ,CAACpM,IAAI,CAAC;MACrC,IAAMob,YAAY,GAAGD,WAAS,CAAC3I,QAAQ,CAAC7R,MAAM,CAAC,EAAE,EAAE,gBAAM;QACrD,OAAOwa,WAAS,CAAClH,GAAG,OAAbkH,WAAS,EAAQ1J,MAAM,CAAE;MACpC,CAAC,CAAC;MAEF,KAAK,IAAM0C,MAAI,IAAI1T,KAAK,EAAE;QACtB,IAAMgR,MAAM,GAAGwH,OAAO,CAACtS,GAAG,CAAC,CAACwN,MAAI,CAAC,CAAC;QAClC,IAAIiH,YAAY,CAACzU,GAAG,CAAC,CAACwN,MAAI,CAAC,CAAC,IAAI1C,MAAM,EAAE;UACpC2J,YAAY,CAAChJ,GAAG,CAAC,CAAC+B,MAAI,CAAC,EAAE1C,MAAM,CAAC;QACnC;MACJ;MACDwH,OAAO,GAAGmC,YAAY;IACzB;IACD,IAAMpU,KAAK,GAAGiS,OAAO,CAACnG,IAAI,CAAC,EAAE,CAAC;IAE9BK,KAAK,CAACC,cAAc,CAAC6F,OAAO,CAACzG,QAAQ,CAAC;IACtCxL,KAAK,CAACnC,OAAO,CAAC,oBAAU;MACpB,IAAMlB,KAAK,GAAGkL,KAAI,CAACqM,WAAW,CAAClb,IAAI,EAAEgF,UAAU,EAAE6V,IAAI,EAAEC,KAAK,EAAEF,UAAU,EAAEG,UAAU,EAAElS,OAAO,CAAC7D,UAAU,CAAC,CAAC;MAE1G,IAAIkO,WAAW,CAACvP,KAAK,CAAC,EAAE;QACpB;MACH;MACDwP,KAAK,CAACf,GAAG,CAACpN,UAAU,EAAErB,KAAK,CAAC;IAChC,CAAC,CAAC;IACF,OAAOwP,KAAK;GACf;EACD;;;AAGG;EACIqE,mCAAe,GAAtB,UAAuBuB,UAAoB,EAAEqB,YAAyB;IAClE,IAAMlL,aAAa,GAAG,IAAI,CAACyB,gBAAgB,EAAE;IAE7C,IAAMwC,KAAK,GAAG4F,UAAU,IAAI,IAAI,CAACA,UAAU,IAAI,CAAC,IAAI,CAACuB,IAAI,GACnD,IAAI,CAACe,gBAAgB,CAACnM,aAAa,EAAEkL,YAAY,CAAC,GAClD,IAAI,CAACE,IAAI;IAEf,IAAI,CAACA,IAAI,GAAGnH,KAAK;IAEjB,OAAOA,KAAK;GACf;EACD;;AAEG;EACIqE,oCAAgB,GAAvB,UAAwBxX,IAAY,EAAEoa,YAAyB,EAAEQ,UAAoB;IACjF,OAAO,IAAI,CAACP,WAAW,CAACra,IAAI,EAAEoa,YAAY,EAAEQ,UAAU,CAAC;GAC1D;EACMpD,wBAAI,GAAX,UAAYxS,UAAoB,EAAEvB,OAA4B;;IAAlD;MAAAuB,UAAoB;IAAA;IAAE;MAAAvB,UAAUuB,UAAU,CAACvB,OAAO;IAAA;IAC1DA,OAAO,IAAI,IAAI,CAACC,UAAU,CAACD,OAAO,CAAC;IAEnC,IAAIyC,OAAO,CAAClB,UAAU,CAAC,EAAE;MACrB,IAAI,CAACoN,GAAG,CAACpN,UAAU,CAAC;IACvB,OAAM,IAAIA,UAAU,CAACsW,SAAS,EAAE;MAC7B,IAAI,CAAClJ,GAAG,CAACpN,UAAU,CAACsW,SAAS,CAAC;IACjC,OAAM;MACH,KAAK,IAAMtb,IAAI,IAAIgF,UAAU,EAAE;QAC3B,IAAIhF,IAAI,KAAK,SAAS,EAAE;UACpB,IAAI,CAACoS,GAAG,WACJpR,GAAChB,IAAI,IAAGgF,UAAU,CAAChF,IAAI,CAAC,MAC1B;QACL;MACJ;IACJ;IACD,IAAIyD,OAAO,IAAIA,OAAO,CAACtC,QAAQ,CAAC,EAAE;MAC9B,IAAI,CAACqO,WAAW,CAAC/L,OAAO,CAACtC,QAAQ,CAAC,CAAC;IACtC;IACD,OAAO,IAAI;GACd;EACD;;;;;AAKK;EACEqW,yBAAK,GAAZ;IACI,IAAM1O,IAAI,GAAG,IAAI0O,SAAS,EAAE;IAE5B1O,IAAI,CAACpF,UAAU,CAAC,IAAI,CAACsF,KAAK,CAAC;IAC3BF,IAAI,CAACsK,cAAc,CAAC,IAAI,CAAC6F,OAAO,CAACzG,QAAQ,CAAC;IAE1C,IAAI,CAAC3N,OAAO,CAAC,UAACsO,KAAY,EAAEnT,IAAY;MACpC8I,IAAI,CAAC4R,QAAQ,CAAC1a,IAAI,EAAEmT,KAAK,CAACzO,KAAK,EAAE,CAAC;IACtC,CAAC,CAAC;IACF,OAAOoE,IAAI;GACd;EACD;;;;AAIK;EACE0O,SAAO,qBAAd,UAAezK,QAAoE;IAC/E,IAAMsJ,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,IAAM0B,KAAK,GAAG,IAAI,CAACA,KAAK;IAExB1B,KAAK,CAACxR,OAAO,CAAC,cAAI;MACdkI,QAAQ,CAACgL,KAAK,CAAC/X,IAAI,CAAC,EAAEA,IAAI,EAAE+X,KAAK,CAAC;IACtC,CAAC,CAAC;IACF,OAAO,IAAI;GACd;EACMP,SAAU,wBAAjB,UAAkB/T,OAAuC;IAAvC;MAAAA,OAAuC;IAAA;IACrDmL,iBAAMlL,UAAU,YAACD,OAAO,CAAC;IACjB,MAAE,GAA0CA,OAAO,CAAjD8F;MAAED,QAAQ,GAAgC7F,OAAO,CAAvC6F;MAAE2O,QAAQ,GAAsBxU,OAAO,CAA7BwU;MAAEE,OAAO,GAAa1U,OAAO,QAApB;MAAE5F,MAAM,GAAK4F,OAAO,OAAZ;IAE/C8F,EAAE,IAAI,IAAI,CAACO,KAAK,CAACP,EAAE,CAAC;IACpB,IAAI1L,MAAM,EAAE;MACR,IAAI,CAAC0d,SAAS,CAAC1d,MAAM,CAAC;IACzB,OAAM,IAAIyL,QAAQ,EAAE;MACjB,IAAI,CAACkS,WAAW,CAAClS,QAAQ,CAAC;IAC7B,OAAM,IAAI2O,QAAQ,IAAIE,OAAO,EAAE;MAC5B,IAAI,CAACuB,UAAU,CAACzB,QAAQ,IAAIE,OAAO,CAAC;IACvC;IACD,OAAO,IAAI;GACd;EACMX,yBAAK,GAAZ,UACIiE,aAA6D,EAC7DC,cAAmC,EAAE5E,MAA4B;IADjE;MAAA2E;QAAiCnR,SAAS,EAAEnI;MAAe,CAAE;IAAA;IAC7D;MAAAuZ,iBAAiB,IAAI,CAAC3Q,WAAW,EAAE;IAAA;IAAE;MAAA+L,MAA4B;IAAA;IACjE,IAAM6E,SAAS,GAAG,IAAI,CAAC3S,KAAK;IAC5B,IAAMM,QAAQ,GAAGqS,SAAS,CAAC5Y,QAAQ,CAAC;IAEpC,IAAI,CAACuG,QAAQ,EAAE;MACX,OAAO,EAAE;IACZ;IACD,IAAMoO,gBAAgB,GAAG,IAAI,CAAC3M,WAAW,EAAE;IAC3C4Q,SAAS,CAACxa,QAAQ,CAAC,GAAGuW,gBAAgB;IACtCZ,MAAM,CAAC/O,IAAI,CAAC4T,SAAS,CAAC;IAEtB,IAAMC,cAAc,GAAGjC,OAAO,CAAC7C,MAAM,CAAC,CAAC+E,OAAO,EAAE;IAChD,IAAMtS,EAAE,GAAGQ,IAAI,CAACH,SAAS,CAAC,IAAI,CAAC,CAAC;IAChC,IAAMkS,WAAW,GAAGhF,MAAM,CAAC,CAAC,CAAC;IAC7B,IAAMiF,aAAa,GAAGC,SAAS,CAACJ,cAAc,EAAE,eAAK;MACjD,OAAO5S,KAAK,CAAC1H,eAAe,CAAC,KAAKmB,QAAQ,IAAI,CAACwI,QAAQ,CAACjC,KAAK,CAAC7H,QAAQ,CAAC,CAAC;IAC5E,CAAC,EAAE2V,MAAM,CAACrZ,MAAM,GAAG,CAAC,CAAC;IACrB,IAAMwe,YAAY,GAAGL,cAAc,CAAChd,KAAK,CAAC,CAAC,EAAEmd,aAAa,CAAC;IAC3D,IAAMjR,QAAQ,GAAG4Q,cAAc,IAAIO,YAAY,CAACC,MAAM,CAAC,UAACC,IAAI,EAAEC,GAAG;MAC7D,OAAO,CAACA,GAAG,CAAC7a,KAAK,CAAC,GAAG4a,IAAI,GAAIC,GAAG,CAAC9a,eAAe,CAAY,IAAI8a,GAAG,CAAC3a,UAAU,CAAC;KAClF,EAAEiW,gBAAgB,CAAC;IACpB,IAAM3I,KAAK,GAAG6M,cAAc,CAAChd,KAAK,CAACmd,aAAa,CAAC,CAACG,MAAM,CAAC,UAACC,IAAI,EAAEC,GAAG;MAC/D,OAAO,CAACD,IAAI,GAAGC,GAAG,CAAC7a,KAAK,CAAC,IAAI6a,GAAG,CAAC3a,UAAU,CAAC;KAC/C,EAAE,CAAC,CAAC;IACL,IAAM5B,UAAU,GAAGwc,IAAI,CAACT,cAAc,EAAE,eAAK,EAAI;MAAA,OAAC5S,KAAK,CAACxH,MAAM,CAAC,IAAIwH,KAAK,CAACtH,WAAW,CAAC;IAAC,GAAEia,SAAS,CAAC,CAACja,WAAW,CAAC;IAC/G,IAAMkK,cAAc,GAAGgQ,cAAc,CAACG,aAAa,CAAC,CAACza,eAAe,CAAC;IACrE,IAAM0N,QAAQ,GAAG8M,WAAW,CAAC1a,SAAS,CAAC;IACvC,IAAMqN,SAAS,GAAGmN,cAAc,CAACG,aAAa,CAAC,CAAC1a,SAAS,CAAC;IAC1D,IAAM6Y,OAAO,GAAG5D,uBAAuB,CAAC;MACpCtH,QAAQ;MACRP,SAAS;MACT7C,cAAc;MACdmD,KAAK,EAAE,EAAG,aAAK,EAAG;MAClBlI,IAAI,EAAE,UAAGvG,MAAM,uBAAaiJ,EAAE,CAAE;MAChCuB,QAAQ,EAAE,UAAGA,QAAQ,GAAGgR,WAAW,CAACra,UAAU,CAAC,EAAG;MAClD6a,cAAc,EAAEzc;IACnB,EAAC;IACF,IAAM0c,SAAS,GAAGlW,UAAU,CAACiD,QAAQ,CAAC,CAAC/E,GAAG,CAAC,aAAG;MAC1C,IAAMa,OAAO,GAAG,0BAA0B,CAACmB,IAAI,CAACiW,GAAG,CAAC;MAEpD,IAAIpX,OAAO,EAAE;QACT,OAAO,CAACA,OAAO,CAAC,CAAC,CAAC,EAAEA,OAAO,CAAC,CAAC,CAAC,CAAC;MAClC,OAAM;QACH,OAAO,CAACoX,GAAG,EAAE,EAAE,CAAC;MACnB;IACL,CAAC,CAAC;IACF,IAAMlS,SAAS,GAAGmR,aAAa,CAACnR,SAAS;IACzC,IAAMmS,gBAAgB,GAAGhB,aAAa,CAACnS,QAAQ;IAC/C,IAAMoT,WAAW,GAAGjD,UAAU,CAACgD,gBAAgB,CAAC,GAAGA,gBAAgB,CAAC,IAAI,EAAEnT,QAAQ,CAAC,GAAGmT,gBAAgB;IAEtG,OAAO,gBACTC,WAAW,IAAIH,SAAS,CAAChY,GAAG,CAAC,UAACvD,EAAa;UAAZwb,GAAG;QAAEG,MAAM;MAAM,iBAAGH,GAAG,cAAIlS,SAAS,SAAGqS,MAAM,CAAE;KAAA,CAAC,eAAKzC,OAAO,oBAC3FqC,SAAS,CAAChY,GAAG,CAAC,UAACvD,EAAa;UAAZwb,GAAG;QAAEG,MAAM;MAAM,iBAAGH,GAAG,cAAIpa,eAAe,SAAGua,MAAM,CAAE;KAAA,CAAC,eAAKvS,SAAS,yCACnFwS,SAAS,EAAI,kBAAM,uBAAarT,EAAE,cAAI,IAAI,CAACsT,YAAY,CAAC/R,QAAQ,EAAEmR,YAAY,EAAExN,SAAS,CAAC,MAAG;GAC/F;EACD;;;;AAIG;EACI+I,6BAAS,GAAhB,UACIiE,aAA6B,EAC7B3Q,QAAiB,EAAErH,OAAyB;IAC5C,IAAI,CAAC,IAAI,CAACwU,QAAQ,CAACxa,MAAM,EAAE;MACvB,OAAO,EAAE;IACZ;IACD,IAAMqf,GAAG,GAAG,IAAI,CAACC,KAAK,CAACtB,aAAa,EAAE3Q,QAAQ,EAAErH,OAAO,CAAC;IACxD,IAAM4M,QAAQ,GAAG5M,OAAO,IAAI,CAACyP,WAAW,CAACzP,OAAO,CAACnC,eAAe,CAAC,CAAC;IAElE,IAAI,CAAC+O,QAAQ,EAAE;MACX,IAAI,IAAI,CAAC2M,cAAc,EAAE;QACrB,IAAI,CAACA,cAAc,CAACC,OAAO,EAAE;QAC7B,IAAI,CAACD,cAAc,GAAG,IAAI;MAC7B;MACD,IAAI,CAACE,MAAM,GAAGA,MAAM,CAACJ,GAAG,CAAC;MACzB,IAAI,CAACE,cAAc,GAAG,IAAI,CAACE,MAAM,CAACC,MAAM,CAAC,IAAI,CAACC,mBAAmB,EAAE,EAAE;QAAEC,QAAQ,EAAE;MAAI,CAAE,CAAC;IAC3F;IACD,OAAO,IAAI;GACd;EACM7F,yBAAK,GAAZ;IACI5I,MAAM,gBAAK,WAAE;IACb3F,WAAW,CAAC,IAAI,CAAC,IAAI,IAAI,CAACqU,QAAQ,EAAE;IACpC,OAAO,IAAI;GACd;EACM9F,4BAAQ,GAAf;IACI,IAAI,CAACS,QAAQ,CAACpT,OAAO,CAAC,iBAAO;MACzB0Y,QAAQ,CAACpF,OAAO,EAAE/V,eAAe,CAAC;IACtC,CAAC,CAAC;IACF,OAAO,IAAI;GACd;EACMoV,0BAAM,GAAb;IACI,IAAI,CAACS,QAAQ,CAACpT,OAAO,CAAC,iBAAO;MACzB2Y,WAAW,CAACrF,OAAO,EAAE/V,eAAe,CAAC;MACrCob,WAAW,CAACrF,OAAO,EAAEhW,eAAe,CAAC;IACzC,CAAC,CAAC;IACFyI,UAAU,CAAC,IAAI,EAAE,KAAK,CAAC;IACvB,OAAO,IAAI;GACd;EACM4M,uBAAG,GAAV;IACIrO,UAAU,CAAC,IAAI,CAAC,IAAI,IAAI,CAACsU,MAAM,EAAE;IACjC7O,MAAM,cAAG,WAAE;IACX,OAAO,IAAI;GACd;EACD;;;;;;;;;;;;AAYI;EACG4I,2BAAO,GAAd,UAAetN,WAAkB,EAAEC,aAAsB,EAAEnF,UAAuB;IAAnE;MAAAkF,WAAkB;IAAA;IAA0B;MAAAlF,UAAuB;IAAA;IAC9EiF,OAAO,CAAC,IAAI,EAAEC,WAAW,EAAEC,aAAa,EAAEnF,UAAU,CAAC;IACrD,OAAO,IAAI;GACd;EACMwS,uCAAmB,GAA1B;IACI,OAAO,IAAI,CAACS,QAAQ,CAAC,CAAC,CAAC;GAC1B;EACMT,gCAAY,GAAnB,UAAoBtO,QAAiB,EAAEiB,aAAsB,EAAEnF,UAAuB;IAAvB;MAAAA,UAAuB;IAAA;IAClF,IAAMiT,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC9B,IAAMxa,MAAM,GAAGwa,QAAQ,CAACxa,MAAM;IAC9B,IAAMyc,OAAO,GAAG5D,uBAAuB,CAACtR,UAAU,CAAC;IAEnD,IAAI,CAACvH,MAAM,EAAE;MACT;IACH;IACD,IAAIyL,QAAQ,EAAE;MACV+O,QAAQ,CAACpT,OAAO,CAAC,iBAAO;QACpB2Y,WAAW,CAACrF,OAAO,EAAE/V,eAAe,CAAC;MACzC,CAAC,CAAC;IACL,OAAM;MACH6V,QAAQ,CAACpT,OAAO,CAAC,iBAAO;QACpBsT,OAAO,CAAC0B,KAAK,CAACK,OAAO,IAAIA,OAAO;QAEhC,IAAIwD,QAAQ,CAACvF,OAAO,EAAEhW,eAAe,CAAC,EAAE;UACpCqb,WAAW,CAACrF,OAAO,EAAEhW,eAAe,CAAC;QACxC;MACL,CAAC,CAAC;MACF8V,QAAQ,CAACpT,OAAO,CAAC,iBAAO;QACpBsT,OAAO,CAACwF,WAAW;MACvB,CAAC,CAAC;MACF1F,QAAQ,CAACpT,OAAO,CAAC,iBAAO;QACpB0Y,QAAQ,CAACpF,OAAO,EAAEhW,eAAe,CAAC;MACtC,CAAC,CAAC;IACL;IACD,OAAO8V,QAAQ,CAAC,CAAC,CAAC;GACrB;EACD;;;AAGI;EACGT,yBAAK,GAAZ;IACI,IAAI,CAACnB,KAAK,GAAG,EAAE;IACf,IAAI,CAAC0B,KAAK,GAAG,EAAE;IACf,IAAI,CAACkB,OAAO,GAAG,IAAI9G,QAAQ,CAAC5O,cAAc,CAAC;IAE3C,IAAI,IAAI,CAACyZ,cAAc,EAAE;MACrB,IAAI,CAACA,cAAc,CAACC,OAAO,EAAE;IAChC;IACD,IAAI,CAACC,MAAM,GAAG,IAAI;IAClB,IAAI,CAACF,cAAc,GAAG,IAAI;IAC1B,IAAI,CAAC1C,IAAI,GAAG,IAAI;IAChB,IAAI,CAACvB,UAAU,GAAG,IAAI;IACtB,OAAO,IAAI;GACd;EACMvB,+BAAW,GAAlB,UACIxX,IAAY,EACZgF,UAAsB,EACtB6V,IAAa,EACbC,KAAc,EACdF,UAAoB,EACpB7Z,MAAmB,EACnB6c,YAAsB;IAEtB,IAAMvH,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,IAAM5Y,MAAM,GAAG4Y,KAAK,CAAC5Y,MAAM;IAE3B,IAAI2R,QAAgB;IACpB,IAAI6G,QAAgB;IACpB,IAAI4H,SAAgB;IACpB,IAAIC,SAAgB;IACpB,IAAMC,eAAe,GAAG7K,WAAW,CAAC2H,IAAI,CAAC;IACzC,IAAMmD,gBAAgB,GAAG9K,WAAW,CAAC4H,KAAK,CAAC;IAC3C,IAAIiD,eAAe,IAAIC,gBAAgB,EAAE;MACrC,IAAMC,QAAQ,GAAG7H,gBAAgB,CAACC,KAAK,EAAErW,IAAI,CAAC;MAC9C+d,eAAe,KAAKlD,IAAI,GAAGoD,QAAQ,CAAC,CAAC,CAAC,CAAC;MACvCD,gBAAgB,KAAKlD,KAAK,GAAGmD,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC5C;IAED,KAAK,IAAI3gB,CAAC,GAAGud,IAAI,EAAEvd,CAAC,IAAI,CAAC,EAAE,EAAEA,CAAC,EAAE;MAC5B,IAAM6V,KAAK,GAAG,IAAI,CAAC/G,QAAQ,CAACiK,KAAK,CAAC/Y,CAAC,CAAC,CAAC;MAErC,IAAI6V,KAAK,CAACc,GAAG,OAATd,KAAK,EAAQnO,UAAU,CAAG;QAC1BoK,QAAQ,GAAGiH,KAAK,CAAC/Y,CAAC,CAAC;QACnBugB,SAAS,GAAG1K,KAAK;QACjB;MACH;IACJ;IACD,IAAM+C,SAAS,GAAG2H,SAAS,IAAIA,SAAS,CAACtL,GAAG,OAAbsL,SAAS,EAAQ7Y,UAAU,CAAC;IAE3D,IAAI4V,UAAU,IAAI,CAACpH,MAAM,CAAC,CAACxO,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MACxC,OAAOoK,QAAQ,KAAKpP,IAAI,GAAGkW,SAAS,GAAG1N,SAAS;IACnD;IACD,IAAIoV,YAAY,EAAE;MACd,OAAO1H,SAAS;IACnB;IACD,KAAK,IAAI5Y,CAAC,GAAGwd,KAAK,EAAExd,CAAC,GAAGG,MAAM,EAAE,EAAEH,CAAC,EAAE;MACjC,IAAM6V,KAAK,GAAG,IAAI,CAAC/G,QAAQ,CAACiK,KAAK,CAAC/Y,CAAC,CAAC,CAAC;MAErC,IAAI6V,KAAK,CAACc,GAAG,OAATd,KAAK,EAAQnO,UAAU,CAAG;QAC1BiR,QAAQ,GAAGI,KAAK,CAAC/Y,CAAC,CAAC;QACnBwgB,SAAS,GAAG3K,KAAK;QACjB;MACH;IACJ;IACD,IAAMP,SAAS,GAAGkL,SAAS,IAAIA,SAAS,CAACvL,GAAG,OAAbuL,SAAS,EAAQ9Y,UAAU,CAAC;IAE3D,IAAI,CAAC6Y,SAAS,IAAI3K,WAAW,CAACgD,SAAS,CAAC,EAAE;MACtC,OAAOtD,SAAS;IACnB;IACD,IAAI,CAACkL,SAAS,IAAI5K,WAAW,CAACN,SAAS,CAAC,IAAIsD,SAAS,KAAKtD,SAAS,EAAE;MACjE,OAAOsD,SAAS;IACnB;IACD,OAAOgI,QAAQ,CAACle,IAAI,EAAER,IAAI,CAAC2e,GAAG,CAAC/O,QAAQ,EAAE,CAAC,CAAC,EAAE6G,QAAQ,EAAEC,SAAS,EAAEtD,SAAS,EAAE7R,MAAM,CAAC;GACvF;EACOyW,gCAAY,GAApB,UAAqB1M,QAAgB,EAAEgM,MAAuB,EAAErI,SAAwB;IAAxF,IAkCCI;IAjCG,IAAMuP,MAAM,GAAoB,EAAE;IAClC,IAAM/H,KAAK,GAAG,IAAI,CAACA,KAAK,CAACzX,KAAK,EAAE;IAEhC,IAAI,CAACyX,KAAK,CAAC5Y,MAAM,EAAE;MACf,OAAO,EAAE;IACZ;IACD,IAAMia,gBAAgB,GAAG,IAAI,CAAC3M,WAAW,EAAE;IAC1C,CAAC,IAAI,CAACqB,QAAQ,CAAC,CAAC,CAAC,IAAKiK,KAAK,CAACkB,OAAO,CAAC,CAAC,CAAC;IACtC,CAAC,IAAI,CAACnL,QAAQ,CAACsL,gBAAgB,CAAC,IAAKrB,KAAK,CAACtO,IAAI,CAAC2P,gBAAgB,CAAC;IAClE,IAAMf,OAAO,GAAG0H,UAAU,CAAChI,KAAK,EAAES,MAAM,CAAC;IACzC,IAAMwH,SAAS,GAAG3H,OAAO,CAACA,OAAO,CAAClZ,MAAM,GAAG,CAAC,CAAC;;IAG7C6gB,SAAS,CAAC,CAAC,CAAC,GAAGxT,QAAQ,IAAI4L,QAAQ,CAACC,OAAO,EAAE7L,QAAQ,EAAEwT,SAAS,CAAC,CAAC,CAAC,CAAC;IACpE,IAAIlP,QAAQ,GAAG,CAAC,CAAC;IAEjB,OAAOuH,OAAO,CAACpS,GAAG,CAAC,UAACvD,EAAe;UAAdhB,IAAI;QAAE4W,OAAO;MAC9B,IAAI,CAACwH,MAAM,CAACxH,OAAO,CAAC,EAAE;QAClBwH,MAAM,CAACxH,OAAO,CAAC,GACX,CAAC,CAAC/H,KAAI,CAAC+J,QAAQ,CAAChC,OAAO,CAAC,IAAIA,OAAO,KAAK,CAAC,IAAIA,OAAO,KAAKc,gBAAgB,GACrE7I,KAAI,CAACwL,WAAW,CAACzD,OAAO,CAAC,GAAG/H,KAAI,CAACwL,WAAW,CAACzD,OAAO,EAAE,CAAC,EAAE,IAAI,CAAC,EAAEtK,SAAS,EAAE;MACtF;MAED,IAAIwM,SAAS,GAAG9Y,IAAI,GAAG8K,QAAQ,GAAG,GAAG;MAErC,IAAIgO,SAAS,GAAG1J,QAAQ,GAAGlO,SAAS,EAAE;QAClC4X,SAAS,IAAI5X,SAAS;MACzB;MACDkO,QAAQ,GAAG0J,SAAS;MACpB,OAAO,EAAG,YAAI,CAACxH,GAAG,CAACwH,SAAS,EAAE,GAAG,CAAC,iCAC5B9Y,IAAI,KAAK,CAAC,IAAI,CAACsO,kBAAkB,CAAC,CAAC,EAAE,CAAC,EAAEG,SAAS,CAAC,GAAG,EAAE,GAAG2P,MAAM,CAACxH,OAAO,CAAC,oBAC7E;IACN,CAAC,CAAC,CAACjS,IAAI,CAAC,EAAE,CAAC;GACd;EACO6S,qCAAiB,GAAzB;IACI,IAAMyB,OAAO,GAAG,IAAI,CAACA,OAAO,CAACzG,QAAQ;IAErC,IAAI,CAAC3N,OAAO,CAAC,eAAK;MACdsO,KAAK,CAACC,cAAc,CAAC6F,OAAO,CAAC;IACjC,CAAC,CAAC;GACL;EACL,OAACzB;AAAD,CA1hCA,CAAwBlI,QAAQ,CA0hC/B;;ACjqCD;;;;AAIG;AACH;EAAoB1S,SAA+C;EAa/D;;;;;;;;;;;;;;;;;;;;;;;AAuBI;EACJ,SAAY2hB,gBAA+D,EAAE9a,OAA+B;IAA5G,YACImL,iBAAO,IAEV;IAhCMC,KAAK,SAA+B,EAAE;IACtCA,cAAQ,GAAG,IAAIsD,QAAQ,CAAC5O,cAAc,CAAC;IA8B1CsL,KAAI,CAAC4I,IAAI,CAACzS,UAAU,EAAEvB,OAAO,CAAC;;;EAE3B8a,2BAAW,GAAlB;IACI,IAAIve,IAAI,GAAG,CAAC;IAEZ,IAAI,CAAC6E,OAAO,CAAC,cAAI;MACb7E,IAAI,GAAGR,IAAI,CAAC2e,GAAG,CAACne,IAAI,EAAE8I,IAAI,CAAC0V,gBAAgB,EAAE,GAAG1V,IAAI,CAAC2V,YAAY,EAAE,CAAC;IACxE,CAAC,CAAC;IACF,OAAOze,IAAI,IAAI,IAAI,CAACgJ,KAAK,CAAC7H,QAAQ,CAAC;GACtC;EACMod,KAAW,yBAAlB,UAAmBzT,QAAgB;IACjB,IAAI,CAACiN;IACnB,IAAM2G,aAAa,GAAG,IAAI,CAAC3T,WAAW,EAAE;IAExC,IAAID,QAAQ,KAAK,CAAC,IAAI,CAACG,QAAQ,CAACyT,aAAa,CAAC,EAAE;MAC5C,OAAO,IAAI;IACd;IACD,IAAIA,aAAa,KAAK,CAAC,EAAE;MACrB,IAAI,CAAC7Z,OAAO,CAAC,cAAI;QACbiE,IAAI,CAAC0G,WAAW,CAAC1E,QAAQ,CAAC;MAC9B,CAAC,CAAC;IACL,OAAM;MACH,IAAM6M,OAAK,GAAG7M,QAAQ,GAAG4T,aAAa;MAEtC,IAAI,CAAC7Z,OAAO,CAAC,cAAI;QACbiE,IAAI,CAAC6V,QAAQ,CAAC7V,IAAI,CAAC4P,QAAQ,EAAE,GAAGf,OAAK,CAAC;QACtC7O,IAAI,CAAC0G,WAAW,CAAC1G,IAAI,CAACiC,WAAW,EAAE,GAAG4M,OAAK,CAAC;MAChD,CAAC,CAAC;IACL;IACD/I,iBAAMY,WAAW,YAAC1E,QAAQ,CAAC;IAC3B,OAAO,IAAI;GACd;EAED;;;;;;AAME;EACKyT,KAAO,qBAAd,UAAe1X,IAAqB;IAChC,OAAO,IAAI,CAACkR,KAAK,CAAClR,IAAI,CAAC;GAC1B;EACD;;;;;;;AAOE;EACK0X,uBAAO,GAAd,UAAe1X,IAAqB,EAAEpD,OAAuC;IAAvC;MAAAA,OAAuC;IAAA;IACzE,IAAI,IAAI,CAACsU,KAAK,CAAClR,IAAI,CAAC,EAAE;MAClB,OAAO,IAAI,CAACkR,KAAK,CAAClR,IAAI,CAAC;IAC1B;IACD,IAAMiC,IAAI,GAAG,IAAI0O,SAAS,EAAE;IAE5B,IAAI,CAACoH,OAAO,CAAC/X,IAAI,EAAEiC,IAAI,CAAC;IACxBA,IAAI,CAACpF,UAAU,CAACD,OAAO,CAAC;IAExB,OAAOqF,IAAI;GACd;EACD;;;;;;;;EASOyV,KAAU,wBAAjB,UAAkB1X,IAAqB;IACnC,OAAO,IAAI,CAACkR,KAAK,CAAClR,IAAI,CAAC;IAEvB,IAAI,CAAC2L,QAAQ,CAACQ,MAAM,CAAC,CAACnM,IAAI,CAAC,CAAC;IAC5B,OAAO,IAAI;GACd;EACD;;;;;;AAME;EACK0X,uBAAO,GAAd,UAAe1X,IAAqB,EAAEiC,IAAuB;IACzDA,IAAI,CAACgB,KAAK,CAACjD,IAAI,CAAC;IAChB,IAAI,CAACkR,KAAK,CAAClR,IAAI,CAAC,GAAGiC,IAAI;IAEvB,IAAI,CAAC0J,QAAQ,CAAC+B,GAAG,CAAC,CAAC1N,IAAI,CAAC,CAAC;IACzB,OAAO,IAAI;GACd;EACD;;;AAGE;EACK0X,gCAAgB,GAAvB,UAAwBxF,UAAoB,EAAEqB,YAAyB;IACnE,IAAMrZ,MAAM,GAAG,IAAI,CAAC+K,SAAS,EAAE,IAAIsO,YAAY;IAC/C,IAAMgE,MAAM,GAAiB,EAAE;IAE/B,IAAI,CAACvZ,OAAO,CAAC,cAAI;MACb,IAAM0E,EAAE,GAAGT,IAAI,CAACe,KAAK,EAAE;MAEvB,IAAIoC,OAAO,CAACnD,IAAI,CAAC,EAAE;QACfsV,MAAM,CAAC7U,EAAE,CAAC,GAAGT,IAAI,CAAC+V,gBAAgB,CAAC9F,UAAU,EAAEhY,MAAM,CAAC;MACzD,OAAM;QACHqd,MAAM,CAAC7U,EAAE,CAAC,GAAGT,IAAI,CAACgW,eAAe,CAAC/F,UAAU,EAAEhY,MAAM,CAAC;MACxD;IACL,CAAC,CAAC;IACF,IAAI,CAACuZ,IAAI,GAAG8D,MAAM;IAElB,OAAOA,MAAM;GAChB;EACD;;;;;;;;;;;;;;;;;;;;;;AAsBC;EACMG,uCAAuB,GAA9B,UAA+BxF,UAAoB,EAAEqB,YAAyB;IAC1E,IAAMgE,MAAM,GAAG,IAAI,CAACS,gBAAgB,CAAC9F,UAAU,EAAEqB,YAAY,CAAC;IAE9D,OAAOvN,eAAe,CAACuR,MAAM,EAAE7a,cAAc,CAAC;GACjD;EACMgb,KAAO,qBAAd,UAAeve,IAAqB,EAAEoQ,MAAgB,EAAEC,QAAkB,EAAE+J,YAAyB;IAArG,IAiDCvL;IAhDGD,iBAAMpE,OAAO,CAAC7N,eAAI,EAAEyT,MAAM,EAAEC,QAAQ,EAAE;MAClC,IAAMnB,aAAa,GAAGL,KAAI,CAAC8B,gBAAgB,EAAE;MAC7C,IAAM5P,MAAM,GAAG8N,KAAI,CAAC/C,SAAS,EAAE,IAAIsO,YAAY;MAE/CvL,KAAI,CAAChK,OAAO,CAAC,cAAI;QACbiE,IAAI,CAAC0B,OAAO,CAAC0E,aAAa,GAAGpG,IAAI,CAAC2V,YAAY,EAAE,GAAG3V,IAAI,CAAC4P,QAAQ,EAAE,EAAEtI,MAAM,EAAE,IAAI,EAAErP,MAAM,CAAC;MAC7F,CAAC,CAAC;MAEF,IAAMqd,MAAM,GAAGvP,KAAI,CAACgQ,gBAAgB,CAAC,KAAK,EAAEzE,YAAY,CAAC;MAEzD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BO;MACPvL,KAAI,CAACxD,OAAO,CAAC,SAAS,EAAE;QACpB+S,MAAM;QACN1S,WAAW,EAAEmD,KAAI,CAACc,OAAO,EAAE;QAC3B3P,IAAI,EAAEkP;MACT,EAAC;IACN,CAAC,CAAC;IACF,OAAO,IAAI;GACd;EACD;;;;AAIG;EACIqP,KAAO,qBAAd,UACI5e,IAKS;IAET,IAAMoY,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,IAAI,CAACgH,SAAS,EAAE,CAACla,OAAO,CAAC,UAAC0E,EAAE,EAAEtF,KAAK;MAC/BtE,IAAI,CAACoY,KAAK,CAACxO,EAAE,CAAC,EAAEA,EAAE,EAAEtF,KAAK,EAAE8T,KAAK,CAAC;IACrC,CAAC,CAAC;IACF,OAAO,IAAI;GACd;EACMwG,qBAAK,GAAZ,UACI9C,aAA6B,EAC7B3Q,QAAqC,EAAEkU,YAAkC;IAAzE;MAAAlU,WAAmB,IAAI,CAACC,WAAW,EAAE;IAAA;IAAE;MAAAiU,YAAkC;IAAA;IACzE,IAAMC,aAAa,GAAG,CAACnU,QAAQ,IAAI,CAACG,QAAQ,CAACH,QAAQ,CAAC,GAAG,CAAC,GAAGA,QAAQ;IACrE,IAAMvF,MAAM,GAAa,EAAE;IAC3B,IAAMyD,KAAK,GAAG,IAAI,CAACA,KAAK;IAExBA,KAAK,CAAC7H,QAAQ,CAAC,GAAG,IAAI,CAAC4J,WAAW,EAAE;IAEpC,IAAI,CAAClG,OAAO,CAAC,cAAI;MACbU,MAAM,CAACwC,IAAI,CAACe,IAAI,CAACiU,KAAK,CAACtB,aAAa,EAAEwD,aAAa,EAAED,YAAY,CAACngB,MAAM,CAACmK,KAAK,CAAC,CAAC,CAAC;IACrF,CAAC,CAAC;IACF,OAAOzD,MAAM,CAACZ,IAAI,CAAC,EAAE,CAAC;GACzB;EACD;;;;AAIG;EACI4Z,yBAAS,GAAhB,UACI9C,aAA6B,EAAE3Q,QAAiB,EAAEkU,YAA8B;IAChF,IAAMlC,GAAG,GAAG,IAAI,CAACC,KAAK,CAACtB,aAAa,EAAE3Q,QAAQ,EAAEkU,YAAY,CAAC;IAE7D,IAAI,CAACA,YAAY,IAAI,CAACA,YAAY,CAACvhB,MAAM,EAAE;MACvC,IAAI,IAAI,CAACuf,cAAc,EAAE;QACrB,IAAI,CAACA,cAAc,CAACC,OAAO,EAAE;QAC7B,IAAI,CAACD,cAAc,GAAG,IAAI;MAC7B;MACD,IAAI,CAACE,MAAM,GAAGA,MAAM,CAACJ,GAAG,CAAC;MACzB,IAAI,CAACE,cAAc,GAAG,IAAI,CAACE,MAAM,CAACC,MAAM,CAAC,IAAI,CAACC,mBAAmB,EAAE,EAAE;QAAEC,QAAQ,EAAE;MAAI,CAAE,CAAC;;IAE3F;;IACD,OAAO,IAAI;GACd;EACMkB,KAAM,oBAAb,UAAczV,IAAuB;IACjCA,IAAI,CAAC6V,QAAQ,CAAC7V,IAAI,CAAC4P,QAAQ,EAAE,GAAG,IAAI,CAAC3N,WAAW,EAAE,CAAC;IACnD,IAAI,CAAC6T,OAAO,CAAChV,SAAS,CAACd,IAAI,CAAC,EAAEA,IAAI,CAAC;GACtC;EACMyV,wBAAQ,GAAf;IACI,OAAO,IAAI,CAAC1Z,OAAO,CAAC,cAAI;MACpBiE,IAAI,CAACwU,QAAQ,EAAE;IACnB,CAAC,CAAC;GACL;EACMiB,qBAAK,GAAZ;IACI3P,MAAM,gBAAK,WAAE;IAEb3F,WAAW,CAAC,IAAI,CAAC,IAAI,IAAI,CAACqU,QAAQ,EAAE;IACpC,IAAI,CAACzY,OAAO,CAAC,cAAI;MACbiE,IAAI,CAACqH,KAAK,EAAE;IAChB,CAAC,CAAC;IACF,OAAO,IAAI;GACd;EACMoO,sBAAM,GAAb;IACI,IAAI,CAAC1Z,OAAO,CAAC,cAAI;MACbiE,IAAI,CAAC2U,MAAM,EAAE;IACjB,CAAC,CAAC;IACF7S,UAAU,CAAC,IAAI,EAAE,KAAK,CAAC;GAC1B;EACM2T,mBAAG,GAAV;IACIpV,UAAU,CAAC,IAAI,CAAC,IAAI,IAAI,CAACsU,MAAM,EAAE;IACjC7O,MAAM,cAAG,WAAE;IACX,OAAO,IAAI;GACd;EACD;;;;AAIA;EACO2P,yBAAS,GAAhB;IACI,OAAO,IAAI,CAAC/L,QAAQ,CAAC7L,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE;GACrC;EACD;;;;;AAKI;EACG4X,KAAS,uBAAhB,UAAiB9M,MAAkB;IAC/B,OAAO,IAAI,CAACe,QAAQ,CAACJ,GAAG,CAAC,EAAE,EAAEX,MAAM,CAAC;GACvC;EACM8M,mCAAmB,GAA1B;IACI,IAAIW,eAA+B;IAEnC,IAAI,CAACra,OAAO,CAAC,cAAI;MACb,IAAM6F,EAAE,GAAG5B,IAAI,CAACsU,mBAAmB,EAAE;MAErC,CAAC8B,eAAe,KAAKA,eAAe,GAAGxU,EAAE,CAAC;IAC9C,CAAC,CAAC;IACF,OAAOwU,eAAe;GACzB;EACMX,4BAAY,GAAnB,UAAoBrV,QAAiB,EAAEiB,aAAsB,EAAEnF,UAAuB;IAAvB;MAAAA,UAAuB;IAAA;IAClF,IAAIka,eAA+B;IAEnC,IAAI,CAACra,OAAO,CAAC,cAAI;MACb,IAAM6F,EAAE,GAAG5B,IAAI,CAACyB,YAAY,CAACrB,QAAQ,EAAEiB,aAAa,EAAEnF,UAAU,CAAC;MAEjE,CAACka,eAAe,KAAKA,eAAe,GAAGxU,EAAE,CAAC;IAC9C,CAAC,CAAC;IACF,OAAOwU,eAAe;GACzB;EACD;;;;;;;;;;;;;AAaE;EACKX,uBAAO,GAAd,UAAerU,WAAkB,EAAEC,aAAsB,EAAEnF,UAAuC;IAAnF;MAAAkF,WAAkB;IAAA;IAA0B;MAAAlF,UAAuC;IAAA;IAC9FiF,OAAO,CAAC,IAAI,EAAEC,WAAW,EAAEC,aAAa,EAAEnF,UAAU,CAAC;IACrD,OAAO,IAAI;GACd;EAED;;;;;;;;;;;;;;;;;;;AAmBI;EACGuZ,KAAG,iBAAV,UAAWvZ,UAAe;IACtB,IAAI,CAACyS,IAAI,CAACzS,UAAU,CAAC;IACrB,OAAO,IAAI;GACd;EACD;;;AAGI;EACGuZ,qBAAK,GAAZ;IACI,IAAI,CAACpT,MAAM,EAAE;IACb,IAAI,CAAC4M,KAAK,GAAG,EAAE;IACf,IAAI,CAACvF,QAAQ,GAAG,IAAIL,QAAQ,CAAC5O,cAAc,CAAC;IAE5C,IAAI,IAAI,CAACyZ,cAAc,EAAE;MACrB,IAAI,CAACA,cAAc,CAACC,OAAO,EAAE;IAChC;IACD,IAAI,CAACC,MAAM,GAAG,IAAI;IAClB,IAAI,CAACF,cAAc,GAAG,IAAI;GAC7B;EACMuB,oBAAI,GAAX,UAAYvZ,UAAoB,EAAEvB,OAA4B;IAAlD;MAAAuB,UAAoB;IAAA;IAAE;MAAAvB,UAAUuB,UAAU,CAACvB,OAAO;IAAA;IAC1D,IAAI,CAACuB,UAAU,EAAE;MACb,OAAO,IAAI;IACd;IACD,IAAMsE,QAAQ,GAAG7F,OAAO,IAAIA,OAAO,CAACV,QAAQ,CAAC,IAAI,IAAI,CAACiG,KAAK,CAACjG,QAAQ,CAAC;4BAC1DiB,MAAI;MACX,IAAIA,MAAI,KAAK,SAAS,EAAE;;MAEvB;MACD,IAAMyC,MAAM,GAAGzB,UAAU,CAAChB,MAAI,CAAC;MAC/B,IAAI8E,IAAI;MAER,IAAImD,OAAO,CAACxF,MAAM,CAAC,IAAI0F,WAAW,CAAC1F,MAAM,CAAC,EAAE;QACxC0Y,OAAKP,OAAO,CAAC5a,MAAI,EAAEyC,MAAM,CAAC;QAC1BqC,IAAI,GAAGrC,MAAM;MAChB,OAAM,IAAIgT,UAAU,CAAChT,MAAM,CAAC,EAAE;QAC3B,IAAIwR,QAAQ,GAAiC,EAAE;QAE/C,IAAI3O,QAAQ,IAAIG,SAAS,EAAE;UACvBwO,QAAQ,GAAGtO,CAAC,CACR,UAAG8P,UAAU,CAACnQ,QAAQ,CAAC,GAAGA,QAAQ,CAACtF,MAAI,CAAC,GAAGA,MAAI,CAAE,EACjD,IAAI,CACP;QACJ;QACD,IAAMob,cAAc,GAAGnH,QAAQ,CAACxa,MAAM;QACtC,IAAM4a,QAAM,GAAG+G,cAAc,IAAK3Y,MAA0B,CAACuG,YAAY,IAAI,CAAC;QAC9E,IAAMqS,KAAK,GAAG,IAAId,KAAK,EAAE;QAEzB,IAAMe,KAAG,GAA2B,EAAE;QACtC,KAAK,IAAIhiB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+a,QAAM,EAAE,EAAE/a,CAAC,EAAE;UAC7B,IAAM6a,OAAO,GAAGF,QAAQ,CAAC3a,CAAC,CAAC;UAC3B,IAAMiiB,OAAO,GAAGF,KAAK,CAACG,OAAO,CAACliB,CAAC,CAAc;UAE7CiiB,OAAO,CAACzV,KAAK,EAAE,CAAC2N,IAAI,CAAChR,MAAM,CAACnJ,CAAC,EAAE2a,QAAQ,CAAC3a,CAAC,CAAC,CAAC,CAAC;UAE5CgiB,KAAG,CAACvX,IAAI,CAACwX,OAAO,CAAC1V,KAAK,EAAE,CAAC;UACzB,IAAIsO,OAAO,EAAE;YACToH,OAAO,CAAC7F,UAAU,CAACvB,OAAO,CAAC;UAC9B;QACJ;QACD,IAAI,CAACiH,cAAc,EAAE;UACjB,IAAIK,aAAW,GAAiC,EAAE;UAElDJ,KAAK,CAACrW,KAAK,CAACjG,QAAQ,CAAC,GAAG,UAACwG,EAAU;YAC/B,IAAI,CAACkW,aAAW,CAAChiB,MAAM,EAAE;cACrBgiB,aAAW,GAAG9V,CAAC,CAAC,UAAG8P,UAAU,CAACnQ,QAAQ,CAAC,GAAGA,QAAQ,CAACtF,MAAI,CAAC,GAAGA,MAAI,CAAE,EAAE,IAAI,CAAC;YAC3E;YAED,OAAOyb,aAAW,CAACH,KAAG,CAACxZ,OAAO,CAACyD,EAAE,CAAC,CAAC;UACvC,CAAC;QACJ;QACD4V,OAAKP,OAAO,CAAC5a,MAAI,EAAEqb,KAAK,CAAC;;MAE5B,OAAM;QACHvW,IAAI,GAAGqW,MAAK,QAAO,CAACnb,MAAI,CAAC;QACzB8E,IAAI,CAAC2O,IAAI,CAAChR,MAAM,CAAC;MACpB;MACD6C,QAAQ,IAAIR,IAAI,CAAC0S,WAAW,CAAClS,QAAQ,CAAC;;;IApD1C,KAAK,IAAMtF,MAAI,IAAIgB,UAAU;cAAlBhB,MAAI;IAqDd;IACD,IAAI,CAACN,UAAU,CAACD,OAAO,CAAC;GAC3B;EACM8a,KAAU,wBAAjB,UAAkB9a,OAAiC;IAAjC;MAAAA,OAAiC;IAAA;IAC/CmL,iBAAMlL,UAAU,YAACD,OAAO,CAAC;IAEzB,IAAM6F,QAAQ,GAAG7F,OAAO,CAAC6F,QAAQ;IAEjC,IAAIA,QAAQ,EAAE;MACV,IAAI,CAACN,KAAK,CAACjG,QAAQ,CAAC,GAAGuG,QAAQ;IAClC;IACD,OAAO,IAAI;GACd;EACMiV,KAAW,yBAAlB,UAAmB1gB,MAA8E;IAC7F,IAAMmL,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,IAAMM,QAAQ,GAAGzL,MAAM,KAAK,IAAI,GAAGmL,KAAK,CAACjG,QAAQ,CAAC,IAAI,IAAI,GAAGlF,MAAM;IAEnEmL,KAAK,CAACjG,QAAQ,CAAC,GAAGuG,QAAQ;IAC1B,IAAMoW,YAAY,GAAGjG,UAAU,CAAC5b,MAAM,CAAC;IACvC,IAAIyL,QAAQ,EAAE;MACV,IAAI,CAACzE,OAAO,CAAC,UAACiE,IAAI,EAAEjC,IAAI;QACpBiC,IAAI,CAAC0S,WAAW,CAACkE,YAAY,GAAI7hB,MAA0C,CAACgJ,IAAI,CAAC,GAAGyC,QAAQ,CAAC;MACjG,CAAC,CAAC;IACL;IACD,OAAO,IAAI;GACd;EACMiV,KAAK,mBAAZ,UAAaxP,KAAiC;IAAjC;MAAAA,KAAgB,OAAI,CAAC/F,KAAK,CAACzH,KAAK,CAAC;IAAA;IAC1C,IAAM0E,MAAM,GAAG2I,iBAAMoB,KAAK,CAACrT,gBAAK,CAAC;IAEjC,IAAIsJ,MAAM,EAAE;MACR,IAAI,CAACpB,OAAO,CAAC,cAAI;QACbiE,IAAI,CAACkH,KAAK,CAAC,CAAC,CAAC;MACjB,CAAC,CAAC;IACL,OAAM;MACH,IAAI,CAACnL,OAAO,CAAC,cAAI;QACbiE,IAAI,CAAC+B,YAAY,CAAC5I,OAAO,CAAC;MAC9B,CAAC,CAAC;IACL;IACD,OAAOgE,MAAM;GAChB;EAtfD;;;;;AAKE;EACYsY,KAAO,WAAW,OAAe;EAifnD,OAACA;CAAA,CAxfmBjP,QAAQ,CAwf3B;ACzgBe,gBAAO,CAACtK,UAAyB,EAAEvB,OAA+B;EAC9E,OAAO,IAAI8a,KAAK,CAACvZ,UAAU,EAAEvB,OAAO,CAAC,CAACkc,IAAI,EAAE;AAChD;AACgB,oBAAW,CAAC3a,UAAyB,EAAEvB,OAAmC;EACtF,OAAO,IAAI+T,SAAS,CAACxS,UAAU,EAAEvB,OAAO,CAAC,CAACkc,IAAI,EAAE;AACpD;ACHM,SAAUC,cAAc,CAACC,gBAA6C;EACxE,IAAMpjB,SAAS,GAAGojB,gBAAgB,CAACpjB,SAAS;EAE5C,OAAOmV,OAAO,CAACnV,SAAS,CAAC,CAACkE,MAAM,CAAC,cAAI;IACjC,IAAMmf,UAAU,GAAG1jB,MAAM,CAAC8B,wBAAwB,CAACzB,SAAS,EAAEoK,IAAI,CAAC;IAEnE,OAAO,CAACiZ,UAAU,CAACnZ,GAAG,IAAI,CAACmZ,UAAU,CAAC1N,GAAG,IAAIqH,UAAU,CAACqG,UAAU,CAACnc,KAAK,IAAIlH,SAAS,CAACoK,IAAI,CAAC,CAAC;EAChG,CAAC,CAAC;AACN;AAEA,IAAMkZ,eAAe,GAAGH,cAAc,CAACrO,YAAY,CAAC;AAEvC,oBAAgB,GACtBjT,+CAAe,EACf,qBAAc,CAACgR,QAAQ,CAAC;ACblB,iBAAa,GACnBhR,gDAAgB,EAChB,qBAAc,CAACigB,KAAK,CAAC;AAgCf,kBAAc,GAMvB;EACAyB,OAAO,EAAEC,aAAkD;EAC3DC,OAAO,EAAP,UAAQC,IAAuB;IAC3B,IAAMC,SAAS,GAAGD,IAAI,CAACE,KAAK;IAC5B,IAAMC,UAAU,GAAG7G,UAAU,CAAC2G,SAAS,CAAC,GAAGA,SAAS,EAAE,GAAGA,SAAS;IAClE,IAAMf,KAAK,GAAGpT,OAAO,CAACqU,UAAU,CAAC,GAC3BA,UAAU,GACV,IAAI/B,KAAK,CAAC+B,UAAU,EAAEH,IAAI,CAAC1c,OAAO,CAAC;IACzC,IAAMyB,GAAG,GAAGma,KAAK,CAACrW,KAA6C;IAC/D,IAAMuX,SAAS,GAAGC,YAAY,CAACtb,GAAG,CAAC;IAEnC,IAAM+Z,aAAa,GAAGwB,QAAQ,CAAC;MAC3B,OAAOpB,KAAK,CAACb,gBAAgB,EAAE;IACnC,CAAC,CAAC;IACF,IAAM5R,OAAO;MACTqS,aAAa;IAAA,GACVsB,SAAS,GACTN,aAAa,CAAC/D,MAAM,CAAC,UAACwE,YAAY,EAAEtE,GAAG;MACtCsE,YAAY,CAACtE,GAAG,CAAC,GAAG;;QAAC,IAAO1T;aAAP,IAAO4J,QAAPA,EAAO,qBAAPA,EAAO;UAAP5J,IAAO;;QACxB,OAAO,WAAK,CAAC0T,GAAG,CAAC,EAACzf,IAAI,0BAAC0iB,KAAK,GAAK3W,IAAI,EAAE;MAC3C,CAAC;MACD,OAAOgY,YAAY;IACvB,CAAC,EAAE,EAAE,CAAC;MACNC,WAAW;QACP,OAAOtB,KAAK;MAChB;IAAC,EACJ;IAED,IAAMuB,kBAAkB,GAAG9R,QAAQ,CAAClC,OAAO,CAA0B;IAErE,OAAOgU,kBAAkB;GAC5B;EACDC,OAAO,EAAP,UAAQV,IAAI,EAAEW,IAAI;IACd,IAAMzB,KAAK,GAAGyB,IAAI,CAACH,WAAW,EAAE;IAChC,IAAM3X,KAAK,GAAGqW,KAAK,CAACrW,KAAK;IACzB,IAAMM,QAAQ,GAAGN,KAAK,CAACM,QAAQ;IAE/B,IAAIA,QAAQ,IAAI,CAAEN,KAAa,CAAC+X,oBAAoB,EAAE;MAClDD,IAAI,CAACtF,WAAW,CAAClS,QAAQ,CAAC;MACzBN,KAAa,CAAC+X,oBAAoB,GAAG,IAAI;MAC1CD,IAAI,CAACjc,OAAO,CAAC,SAASmc,SAAS,CAACC,KAAwB;QACpD,IAAMC,UAAU,GAAGD,KAAK,CAACjY,KAAK;QAE9B,IAAIkY,UAAU,CAAC5X,QAAQ,EAAE;UACpB4X,UAAkB,CAACH,oBAAoB,GAAG,IAAI;QAClD;QACD,IAAI9U,OAAO,CAACgV,KAAK,CAAC,EAAE;UAChBA,KAAK,CAACpc,OAAO,CAACmc,SAAS,CAAC;QAC3B;MACL,CAAC,CAAC;IACL;GACJ;EACDG,EAAE,EAAC,cAAI,EAAEC,SAAS,EAAErU,QAAQ;IACxB+T,IAAI,CAACK,EAAE,CAACC,SAAS,EAAErU,QAAQ,CAAC;GAC/B;EACDsU,GAAG,EAAC,cAAI,EAAED,SAAS,EAAErU,QAAQ;IACzB+T,IAAI,CAACO,GAAG,CAACD,SAAS,EAAErU,QAAQ,CAAC;GAChC;EACDkQ,OAAO,EAAP,UAAQ6D,IAAI;IACR,IAAMzB,KAAK,GAAGyB,IAAI,CAACH,WAAW,EAAE;IAChC,IAAM3X,KAAK,GAAGqW,KAAK,CAACrW,KAAK;IAExBA,KAAa,CAAC+X,oBAAoB,GAAG,KAAK;IAE3CD,IAAI,CAACjc,OAAO,CAAC,SAASyc,WAAW,CAACL,KAAwB;MACrDA,KAAK,CAACjY,KAAa,CAAC+X,oBAAoB,GAAG,KAAK;MAEjD,IAAI9U,OAAO,CAACgV,KAAK,CAAC,EAAE;QAChBA,KAAK,CAACpc,OAAO,CAACyc,WAAW,CAAC;MAC7B;IACL,CAAC,CAAC;;;AC9GG,sBAAkB,GACxBhjB,gDAAgB,EAChB,qBAAc,CAACigB,KAAK,CAAC;AAkCf,uBAAmB,GAM5B;EACAyB,OAAO,EAAEuB,kBAA2D;EACpErB,OAAO,EAAP,UAAQC,IAA2B;IAC/B,IAAMC,SAAS,GAAGD,IAAI,CAACE,KAAK;IAC5B,IAAMC,UAAU,GAAG7G,UAAU,CAAC2G,SAAS,CAAC,GAAGA,SAAS,EAAE,GAAGA,SAAS;IAClE,IAAMoB,SAAS,GAAGrV,WAAW,CAACmU,UAAU,CAAC,GACnCA,UAAU,GACV,IAAI9I,SAAS,CAAC8I,UAAU,EAAEH,IAAI,CAAC1c,OAAO,CAAC;IAC7C,IAAMyB,GAAG,GAAGsc,SAAS,CAACxY,KAA6C;IACnE,IAAMuX,SAAS,GAAGC,YAAY,CAACtb,GAAG,CAAC;IACnC,IAAM+Z,aAAa,GAAGwB,QAAQ,CAAC;MAC3B,OAAOe,SAAS,CAAChD,gBAAgB,EAAE;IACvC,CAAC,CAAC;IACF,IAAM5R,OAAO;MACTqS,aAAa;IAAA,GACVsB,SAAS,GACTgB,kBAAkB,CAACrF,MAAM,CAAC,UAACwE,YAAY,EAAEtE,GAAG;MAC3CsE,YAAY,CAACtE,GAAG,CAAC,GAAG;;QAAC,IAAO1T;aAAP,IAAO4J,QAAPA,EAAO,qBAAPA,EAAO;UAAP5J,IAAO;;QACxB,OAAO,eAAS,CAAC0T,GAAG,CAAC,EAACzf,IAAI,0BAAC6kB,SAAS,GAAK9Y,IAAI,EAAE;MACnD,CAAC;MACD,OAAOgY,YAAY;IACvB,CAAC,EAAE,EAAE,CAAC;MACNC,WAAW;QACP,OAAOa,SAAS;MACpB;IAAC,EACJ;IAED,IAAMZ,kBAAkB,GAAG9R,QAAQ,CAAClC,OAAO,CAA8B;IAEzE,OAAOgU,kBAAkB;GAC5B;EACDC,OAAO,EAAP,UAAQV,IAAI,EAAEW,IAAI;IACd,IAAMhY,IAAI,GAAGgY,IAAI,CAACH,WAAW,EAAE;IAC/B,IAAM3X,KAAK,GAAGF,IAAI,CAACE,KAAK;IACxB,IAAMM,QAAQ,GAAGN,KAAK,CAACM,QAAQ;IAE/B,IAAIA,QAAQ,IAAI,CAAEN,KAAa,CAAC+X,oBAAoB,EAAE;MAClDD,IAAI,CAACtF,WAAW,CAAClS,QAAQ,CAAC;MACzBN,KAAa,CAAC+X,oBAAoB,GAAG,IAAI;IAC7C;GACJ;EACDI,EAAE,EAAC,cAAI,EAAEC,SAAS,EAAErU,QAAQ;IACxB+T,IAAI,CAACK,EAAE,CAACC,SAAS,EAAErU,QAAQ,CAAC;GAC/B;EACDsU,GAAG,EAAC,cAAI,EAAED,SAAS,EAAErU,QAAQ;IACzB+T,IAAI,CAACO,GAAG,CAACD,SAAS,EAAErU,QAAQ,CAAC;GAChC;EACDkQ,OAAO,EAAP,UAAQ6D,IAAI;IACR,IAAMzB,KAAK,GAAGyB,IAAI,CAACH,WAAW,EAAE;IAChC,IAAM3X,KAAK,GAAGqW,KAAK,CAACrW,KAAK;IAExBA,KAAa,CAAC+X,oBAAoB,GAAG,KAAK;IAC3CD,IAAI,CAAC3V,MAAM,EAAE;;;AChGR,iBAAa,GACnB7M,gDAAgB,EAChB,qBAAc,CAAC+T,KAAK,CAAC;AAqCf,kBAAc,GAMvB;EACA2N,OAAO,EAAEyB,aAAkD;EAC3DvB,OAAO,EAAP,UAAQC,IAAuB;IAC3B,IAAMuB,UAAU,GAAGjI,UAAU,CAAC0G,IAAI,CAAC,GAAGA,IAAI,EAAE,GAAGA,IAAI;IACnD,IAAMwB,WAAW,GAAGC,OAAO,CAAC,CAAC,CAAC;IAC9B,IAAIzO,KAAsB;IAE1B,IAAI0O,UAAU,CAACH,UAAU,CAAC,EAAE;MACxBvO,KAAK,GAAGuO,UAAU;IACrB,OAAM;MACHvO,KAAK,GAAGyO,OAAO,CAACvV,OAAO,CAACqV,UAAU,CAAC,GAAGA,UAAU,GAAG,IAAIrP,KAAK,CAACqP,UAAU,CAAC,CAAC;IAC5E;IAED,IAAMxH,OAAO,GAAGuG,QAAQ,CAAC;MACrBtN,KAAK,CAAC2O,OAAO;MACbH,WAAW,CAACG,OAAO;MAEnB,OAAO3O,KAAK,CAAC2O,OAAO,CAACxV,SAAS,EAAE;IACpC,CAAC,CAAC;IACF,IAAMiH,SAAS,GAAGkN,QAAQ,CAAC;MACvBtN,KAAK,CAAC2O,OAAO;MACb5H,OAAO,CAAC4H,OAAO;MAEf,OAAO3O,KAAK,CAAC2O,OAAO,CAACnO,WAAW,EAAE;IACtC,CAAC,CAAC;IACF,IAAMoO,mBAAmB,GAAGtB,QAAQ,CAAC;MACjCtN,KAAK,CAAC2O,OAAO;MACb5H,OAAO,CAAC4H,OAAO;MAEf,OAAO3O,KAAK,CAAC2O,OAAO,CAACnO,WAAW,CAAC,IAAI,CAAC;IAC1C,CAAC,CAAC;IAEF,IAAMqO,QAAQ,GAAG;MACb,EAAEL,WAAW,CAACG,OAAO;IACzB,CAAC;IAED3O,KAAK,CAAC8O,SAAS,CAAC,UAACC,YAAY,EAAErE,SAAS;MACpCA,SAAS,CAACwD,GAAG,CAAC,QAAQ,EAAEW,QAAQ,CAAC;MACjCE,YAAY,CAACf,EAAE,CAAC,QAAQ,EAAEa,QAAQ,CAAC;IACvC,CAAC,CAAC;IACF,IAAMpB,kBAAkB,GAAG9R,QAAQ;MAC/BoL,OAAO;MACP3G,SAAS;MACTwO,mBAAmB;MACnBC,QAAQ;IAAA,GACLP,aAAa,CAACvF,MAAM,CAAC,UAAChX,GAAG,EAAEkX,GAAG;MAC7BlX,GAAG,CAACkX,GAAG,CAAC,GAAG;;QAAC,IAAO1T;aAAP,IAAO4J,QAAPA,EAAO,qBAAPA,EAAO;UAAP5J,IAAO;;QACf,IAAMwZ,YAAY,GAAG/O,KAAK,CAAC2O,OAAO;QAElC,OAAOI,YAAY,aAAZA,YAAY,6BAAZA,YAAY,CAAG9F,GAAG,CAAE,MAAI,CAAC1e,qCAAY,CAAK,MAAI,SAAC;MAC1D,CAAC;MACD,OAAOwH,GAAG;IACd,CAAC,EAAE,EAAE,CAAC,EACiB;IAE3B,OAAO0b,kBAAkB;GAC5B;EACD3D,OAAO,YAAC6D,IAAI;IACRA,IAAI,CAACO,GAAG,CAAC,QAAQ,EAAEP,IAAI,CAACkB,QAAQ,CAAC;;;ACtG5B,sBAAkB,GAAG9kB,sBAC3BilB,cAAc,CACjB;EAAAjC,OAAO,EAAP,UAAQC,IAAkB;IACtB,IAAMuB,UAAU,GAAGjI,UAAU,CAAC0G,IAAI,CAAC,GAAGA,IAAI,EAAE,GAAGA,IAAI;IACnD,IAAMhN,KAAK,GAAGyO,OAAO,CAAC,IAAIvP,KAAK,EAAE,CAAC;IAElCqP,UAAU,CAACP,EAAE,CAAC,SAAS,EAAE,WAAC;MACtBhO,KAAK,CAAC2O,OAAO,GAAGM,CAAC,CAACjP,KAAK;IAC3B,CAAC,CAAC;IAEF,OAAOgP,cAAc,CAACjC,OAAO,CAAC/M,KAAK,CAAC;EACxC;AAAC","names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","TypeError","String","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__spreadArray","to","from","pack","l","ar","slice","concat","cubic","y1","y2","t2","solveFromX","x1","x2","x","solveX","dx","Math","abs","bezier","func","between","easingName","count","position","time","level","floor","STEP_START","steps","STEP_END","PREFIX","DATA_SCENE_ID","TIMING_FUNCTION","ROLES","transform","filter","attribute","html","ALIAS","easing","_a","MAXIMUM","THRESHOLD","DURATION","FILL_MODE","DIRECTION","ITERATION_COUNT","DELAY","EASING","PLAY_SPEED","EASING_NAME","ITERATION_TIME","PAUSED","ENDED","TIMEUPDATE","ANIMATE","PLAY","RUNNING","ITERATION","START_ANIMATION","PAUSE_ANIMATION","ALTERNATE","REVERSE","ALTERNATE_REVERSE","NORMAL","INFINITE","PLAY_STATE","PLAY_CSS","PREV_TIME","TICK_TIME","CURRENT_TIME","SELECTOR","TRANSFORM_NAME","EASINGS","LINEAR","EASE","EASE_IN","EASE_OUT","EASE_IN_OUT","NAME_SEPARATOR","PropertyObject","options","setOptions","value","isString","split","separator","newOptions","name_1","index","prefix","suffix","model","type","arr","map","isPropertyObject","v","clone","join","toValue","forEach","splitStyle","str","properties","splitText","obj","totalLength","matches","trim","toPropertyObject","styles","arrayToColorObject","RGBA","stringToBracketObject","text","afterModel","COLOR_MODELS","indexOf","stringToRGBA","stringToColorObject","result","isArray","arrayToPropertyObject","values","splitComma","splitSpace","exec","charAt","object","size","get","toObject","name","alias","setRole","names","isProperty","isFixedProperty","roles","fixed","FIXED","getType","OBJECT","ARRAY","PROPERTY","STRING","NUMBER","isPureObject","isObject","stack","push","getNames","pop","name_2","updateFrame","toFixed","num","round","getValueByNames","undefined","isInProperties","args","isLast","role","isFixed","item","isActivate","state","isPausedCSS","isPaused","isEndedCSS","isEnded","makeId","selector","id","random","IS_WINDOW","checkElement","$","getRealId","getId","setId","toId","match","playCSS","isExportCSS","playClassName","ANIMATION","getPlayState","className","addPlayClass","setTime","exportCSS","el","addAnimationEvent","setPlayCSS","setPlayState","duration","getDuration","isZeroDuration","isFinite","animationend","finish","animationstart","trigger","addEvent","animationiteration","once","removeEvent","currentTime","elapsedTime","iterationCount","setIteration","getEasing","curveArray","parseFloat","isScene","getItem","isSceneItem","getFrame","isFrame","toCSSText","isAnimator","getActiveDuration","seperator","newObj","name_3","nextObj","flatSceneObject","nextName","callback","defaultCount","nextCallback","bind","rgbaToHexa","rgba","hexInfo","rgbaToHexWithOpacity","hex","opacityHex","opacity","toString","rgbaInfo","splitBracket","rgbaArr","rgbaNums","dec","parseInt","GetterSetter","getter","setter","parent","camelize","isDirectionReverse","iteration","iteraiontCount","direction","ANIMATOR_SETTERS","ANIMATOR_GETTERS","_super","_this","reactive","delay","fillMode","playSpeed","iterationTime","tickTime","prevTime","playState","Animator","setEasing","setDuration","OPTIONS","Infinity","getTime","toTime","timerId","requestAnimationFrame","tick","start","cancelAnimationFrame","end","pause","isTick","isParent","activeDuration","getUnitTime","calculate","isSelfTick","isDelay","getIterationTime","splitUnit","unit","passIterationCount","maxIterationCount","currentIterationTime","setIterationTime","isReverse","isFiniteDuration","isForwards","now","min","EventEmitter","toInnerProperties","orders","arrObj","keys","getKeys","sortOrders","replace","merge","FUNCTION","getValue","getPropertyName","OrderMap","set","Frame","_i","raw","orderMap","_update","getObject","setObject","nextValue","children","gets","params","remove","_set","isUndefined","frame","setOrderObject","frameProperties","useCamelCase","cssObject","isRole","FILTER","TRANSFORM","toCSSObject","cssArray","clear","self","firstParam","_setByPath","has","stylesLength","name_4","path","name_5","lastParam","add","emit","dotArray","a1","a2","b1","b2","v1","dot","dotColor","color1","color2","value1","value2","model1","model2","colorModel","dotObject","a1Type","type1","type2","isFunction1","isFunction2","v2","isNaN","dotNumber","nextTime","prevValue","ratio","getNearTimeIndex","times","makeAnimationProperties","decamelize","addTime","splice","addEntry","entries","keytime","prevEntry","states","nextEntries","intCount","ceil","currentDuration","lastTime","j","entry","divideTime","unshift","SceneItem","load","originalDuration","ratio_1","items_1","obj_1","time2","items","newFrame","elements","sceneId_1","element","setAttribute","length_1","realTime","eachTime","innerValue","value_1","getDelay","frames_1","hasFrame","getDirection","frameTime","needUpdate","update","nameMap","updateFrameOrders","removeFrame","append","unshiftTime","firstFrame","prepend","isStartZero","isFunction","setElement","toArray","Element","style","targetFunc","attributes","html_1","innerHTML","cssText","fromCSS","parentEasing","getNowFrame","temp","prevNameMap","pushKeys","nextMap","setFrame","toFrame","isAccurate","left","right","realEasing","hasName","nowEasing","getNowValue","prevFrame_1","prevOrderMap","getComputedFrame","keyframes","setTarget","setSelector","playCondition","parentDuration","itemState","reversedStates","reverse","superParent","infiniteIndex","findIndex","finiteStates","reduce","prev","cur","find","timingFunction","selectors","sel","selectorCallback","preselector","peusdo","KEYFRAMES","_toKeyframes","css","toCSS","styledInjector","destroy","styled","inject","getAnimationElement","original","pauseCSS","addClass","removeClass","endCSS","hasClass","clientWidth","usePrevValue","prevFrame","nextFrame","isUndefinedLeft","isUndefinedRight","indicies","dotValue","max","frames","getEntries","lastEntry","Scene","getTotalDuration","getPlaySpeed","sceneDuration","setDelay","setItem","getCurrentFrames","getCurrentFrame","getOrders","parentStates","totalDuration","animtionElement","this_1","elementsLength","scene","ids_1","subItem","newItem","subElements_1","isItFunction","play","getMethodNames","classConstructor","descriptor","EMITTER_METHODS","methods","SCENE_METHODS","created","data","dataProps","props","dataObject","observers","getObservers","computed","methodObject","getInstance","nextReactiveObject","mounted","inst","__REACTIVE_MOUNTED__","mountFlag","child","childState","on","eventName","off","unmountFlag","SCENE_ITEM_METHODS","sceneItem","FRAME_METHODS","nextObject","updateCount","observe","isObserver","current","camelCasedCSSObject","onUpdate","subscribe","currentFrame","FRAME_REACTIVE","e"],"sources":["C:\\Users\\SSAFY\\Desktop\\S08P12C106\\최유경\\testing-app\\node_modules\\tslib\\tslib.es6.js","C:\\Users\\SSAFY\\Desktop\\S08P12C106\\최유경\\testing-app\\node_modules\\scenejs\\src\\easing.ts","C:\\Users\\SSAFY\\Desktop\\S08P12C106\\최유경\\testing-app\\node_modules\\scenejs\\src\\consts.ts","C:\\Users\\SSAFY\\Desktop\\S08P12C106\\최유경\\testing-app\\node_modules\\scenejs\\src\\PropertyObject.ts","C:\\Users\\SSAFY\\Desktop\\S08P12C106\\최유경\\testing-app\\node_modules\\scenejs\\src\\utils\\property.ts","C:\\Users\\SSAFY\\Desktop\\S08P12C106\\최유경\\testing-app\\node_modules\\scenejs\\src\\utils.ts","C:\\Users\\SSAFY\\Desktop\\S08P12C106\\최유경\\testing-app\\node_modules\\scenejs\\src\\Animator.ts","C:\\Users\\SSAFY\\Desktop\\S08P12C106\\최유경\\testing-app\\node_modules\\scenejs\\src\\Frame.ts","C:\\Users\\SSAFY\\Desktop\\S08P12C106\\최유경\\testing-app\\node_modules\\scenejs\\src\\utils\\dot.ts","C:\\Users\\SSAFY\\Desktop\\S08P12C106\\최유경\\testing-app\\node_modules\\scenejs\\src\\SceneItem.ts","C:\\Users\\SSAFY\\Desktop\\S08P12C106\\최유경\\testing-app\\node_modules\\scenejs\\src\\Scene.ts","C:\\Users\\SSAFY\\Desktop\\S08P12C106\\최유경\\testing-app\\node_modules\\scenejs\\src\\presets.ts","C:\\Users\\SSAFY\\Desktop\\S08P12C106\\최유경\\testing-app\\node_modules\\scenejs\\src\\reactive\\reactive.ts","C:\\Users\\SSAFY\\Desktop\\S08P12C106\\최유경\\testing-app\\node_modules\\scenejs\\src\\reactive\\Scene.ts","C:\\Users\\SSAFY\\Desktop\\S08P12C106\\최유경\\testing-app\\node_modules\\scenejs\\src\\reactive\\SceneItem.ts","C:\\Users\\SSAFY\\Desktop\\S08P12C106\\최유경\\testing-app\\node_modules\\scenejs\\src\\reactive\\Frame.ts","C:\\Users\\SSAFY\\Desktop\\S08P12C106\\최유경\\testing-app\\node_modules\\scenejs\\src\\reactive\\NowFrame.ts"],"sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n","import { between } from \"@daybrush/utils\";\nimport { EasingFunction } from \"./types\";\n\nfunction cubic(y1: number, y2: number, t: number) {\n  const t2 = 1 - t;\n\n  // Bezier Curve Formula\n  return t * t * t + 3 * t * t * t2 * y2 + 3 * t * t2 * t2 * y1;\n}\nfunction solveFromX(x1: number, x2: number, x: number) {\n  // x  0 ~ 1\n  // t 0 ~ 1\n  let t = x;\n  let solveX = x;\n  let dx = 1;\n\n  while (Math.abs(dx) > 1 / 1000) {\n    // 예상 t초에 의한 _x값\n    solveX = cubic(x1, x2, t);\n    dx = solveX - x;\n    // 차이가 미세하면 그 값을 t로 지정\n    if (Math.abs(dx) < 1 / 1000) {\n      return t;\n    }\n    t -= dx / 2;\n  }\n  return t;\n}\n/**\n * @namespace easing\n */\n/**\n* Cubic Bezier curve.\n* @memberof easing\n* @func bezier\n* @param {number} [x1] - point1's x\n* @param {number} [y1] - point1's y\n* @param {number} [x2] - point2's x\n* @param {number} [y2] - point2's y\n* @return {function} the curve function\n* @example\nimport {bezier} from \"scenejs\";\nScene.bezier(0, 0, 1, 1) // LINEAR\nScene.bezier(0.25, 0.1, 0.25, 1) // EASE\n*/\nexport function bezier(x1: number, y1: number, x2: number, y2: number) {\n  /*\n\t\tx = f(t)\n\t\tcalculate inverse function by x\n\t\tt = f-1(x)\n\t*/\n  const func: EasingFunction = (x: number) => {\n    const t = solveFromX(x1, x2, between(x, 0, 1));\n\n    return cubic(y1, y2, t);\n  };\n\n  func.easingName = `cubic-bezier(${x1},${y1},${x2},${y2})`;\n  return func;\n}\n/**\n* Specifies a stepping function\n* @see {@link https://www.w3schools.com/cssref/css3_pr_animation-timing-function.asp|CSS3 Timing Function}\n* @memberof easing\n* @func steps\n* @param {number} count - point1's x\n* @param {\"start\" | \"end\"} postion - point1's y\n* @return {function} the curve function\n* @example\nimport {steps} from \"scenejs\";\nScene.steps(1, \"start\") // Scene.STEP_START\nScene.steps(1, \"end\") // Scene.STEP_END\n*/\nexport function steps(count: number, position: \"start\" | \"end\") {\n  const func: EasingFunction = (time: number) => {\n    const level = 1 / count;\n\n    if (time >= 1) {\n      return 1;\n    }\n    return (position === \"start\" ? level : 0) + Math.floor(time / level) * level;\n  };\n\n  func.easingName = `steps(${count}, ${position})`;\n\n  return func;\n}\n\n/**\n* Equivalent to steps(1, start)\n* @memberof easing\n* @name STEP_START\n* @static\n* @type {function}\n* @example\nimport {STEP_START} from \"scenejs\";\nScene.STEP_START // steps(1, start)\n*/\nexport const STEP_START = /*#__PURE__#*/steps(1, \"start\");\n/**\n* Equivalent to steps(1, end)\n* @memberof easing\n* @name STEP_END\n* @static\n* @type {function}\n* @example\nimport {STEP_END} from \"scenejs\";\nScene.STEP_END // steps(1, end)\n*/\nexport const STEP_END = /*#__PURE__#*/steps(1, \"end\");\n/**\n* Linear Speed (0, 0, 1, 1)\n* @memberof easing\n* @name LINEAR\n* @static\n* @type {function}\n* @example\nimport {LINEAR} from \"scenejs\";\nScene.LINEAR\n*/\nexport const LINEAR = /*#__PURE__#*/bezier(0, 0, 1, 1);\n/**\n* Ease Speed (0.25, 0.1, 0.25, 1)\n* @memberof easing\n* @name EASE\n* @static\n* @type {function}\n* @example\nimport {EASE} from \"scenejs\";\nScene.EASE\n*/\nexport const EASE = /*#__PURE__#*/bezier(0.25, 0.1, 0.25, 1);\n/**\n* Ease In Speed (0.42, 0, 1, 1)\n* @memberof easing\n* @name EASE_IN\n* @static\n* @type {function}\n* @example\nimport {EASE_IN} from \"scenejs\";\nScene.EASE_IN\n*/\nexport const EASE_IN = /*#__PURE__#*/bezier(0.42, 0, 1, 1);\n/**\n* Ease Out Speed (0, 0, 0.58, 1)\n* @memberof easing\n* @name EASE_OUT\n* @static\n* @type {function}\n* @example\nimport {EASE_OUT} from \"scenejs\";\nScene.EASE_OUT\n*/\nexport const EASE_OUT = /*#__PURE__#*/bezier(0, 0, 0.58, 1);\n/**\n* Ease In Out Speed (0.42, 0, 0.58, 1)\n* @memberof easing\n* @name EASE_IN_OUT\n* @static\n* @type {function}\n* @example\nimport {EASE_IN_OUT} from \"scenejs\";\nScene.EASE_IN_OUT\n*/\nexport const EASE_IN_OUT = /*#__PURE__#*/bezier(0.42, 0, 0.58, 1);\n","import { IObject } from \"@daybrush/utils\";\nimport { RoleObject, OptionType, EventType, EasingFunction } from \"./types\";\nimport { EASE, EASE_IN, EASE_IN_OUT, LINEAR, EASE_OUT, STEP_START, STEP_END } from \"./easing\";\n\nexport const PREFIX = \"__SCENEJS_\";\nexport const DATA_SCENE_ID = \"data-scene-id\";\nexport const TIMING_FUNCTION = \"animation-timing-function\";\nexport const ROLES: RoleObject = { transform: {}, filter: {}, attribute: {}, html: true };\nexport const ALIAS: IObject<string[]> = { easing: [TIMING_FUNCTION] };\nexport const FIXED = { [TIMING_FUNCTION]: true, contents: true, html: true };\nexport const MAXIMUM = 1000000;\nexport const THRESHOLD = 0.000001;\n\nexport const DURATION = \"duration\";\nexport const FILL_MODE = \"fillMode\";\nexport const DIRECTION = \"direction\";\nexport const ITERATION_COUNT = \"iterationCount\";\nexport const DELAY = \"delay\";\nexport const EASING = \"easing\";\nexport const PLAY_SPEED = \"playSpeed\";\nexport const EASING_NAME = \"easingName\";\nexport const ITERATION_TIME = \"iterationTime\";\nexport const PAUSED = \"paused\";\nexport const ENDED = \"ended\";\nexport const TIMEUPDATE = \"timeupdate\";\nexport const ANIMATE = \"animate\";\nexport const PLAY = \"play\";\nexport const RUNNING = \"running\";\nexport const ITERATION = \"iteration\";\nexport const START_ANIMATION = \"startAnimation\";\nexport const PAUSE_ANIMATION = \"pauseAnimation\";\nexport const ALTERNATE = \"alternate\";\nexport const REVERSE = \"reverse\";\nexport const ALTERNATE_REVERSE = \"alternate-reverse\";\nexport const NORMAL = \"normal\";\nexport const INFINITE = \"infinite\";\nexport const PLAY_STATE = \"playState\";\nexport const PLAY_CSS = \"playCSS\";\nexport const PREV_TIME = \"prevTime\";\nexport const TICK_TIME = \"tickTime\";\nexport const CURRENT_TIME = \"currentTime\";\nexport const SELECTOR = \"selector\";\nexport const TRANSFORM_NAME = \"transform\";\nexport const EASINGS = {\n    \"linear\": LINEAR,\n    \"ease\": EASE,\n    \"ease-in\": EASE_IN,\n    \"ease-out\": EASE_OUT,\n    \"ease-in-out\": EASE_IN_OUT,\n    \"step-start\": STEP_START,\n    \"step-end\": STEP_END,\n};\nexport const NAME_SEPARATOR = \"_///_\";\n\n/**\n* option name list\n* @name Scene.OPTIONS\n* @memberof Scene\n* @static\n* @type {$ts:OptionType}\n* @example\n* Scene.OPTIONS // [\"duration\", \"fillMode\", \"direction\", \"iterationCount\", \"delay\", \"easing\", \"playSpeed\"]\n*/\nexport const OPTIONS: OptionType = [DURATION, FILL_MODE, DIRECTION, ITERATION_COUNT, DELAY, EASING, PLAY_SPEED];\n\n/**\n* Event name list\n* @name Scene.EVENTS\n* @memberof Scene\n* @static\n* @type {$ts:EventType}\n* @example\n* Scene.EVENTS // [\"paused\", \"ended\", \"timeupdate\", \"animate\", \"play\", \"iteration\"];\n*/\nexport const EVENTS: EventType = [PAUSED, ENDED, TIMEUPDATE, ANIMATE, PLAY, ITERATION];\n","import { isString } from \"@daybrush/utils\";\nimport { PropertyObjectState } from \"./types\";\nimport { isPropertyObject } from \"./utils\";\n\n/**\n* Make string, array to PropertyObject for the dot product\n*/\nclass PropertyObject implements PropertyObjectState {\n    public value: any[];\n    public prefix: string = \"\";\n    public suffix: string = \"\";\n    public model: string = \"\";\n    public type: string = \"\";\n    public separator: string = \",\";\n\n    /**\n      * @param - This value is in the array format.\n      * @param - options\n      * @example\n  var obj = new PropertyObject([100,100,100,0.5], {\n      \"separator\" : \",\",\n      \"prefix\" : \"rgba(\",\n      \"suffix\" : \")\"\n  });\n       */\n    constructor(value: string | any[], options?: Partial<PropertyObjectState>) {\n        options && this.setOptions(options);\n        this.value = isString(value) ? value.split(this.separator) : value;\n    }\n    public setOptions(newOptions: Partial<PropertyObjectState>) {\n        for (const name in newOptions) {\n            this[name as keyof PropertyObjectState] = newOptions[name as keyof PropertyObjectState];\n        }\n        return this;\n    }\n    /**\n      * the number of values.\n      * @example\n  const obj1 = new PropertyObject(\"1,2,3\", \",\");\n\n  console.log(obj1.length);\n  // 3\n       */\n    public size() {\n        return this.value.length;\n    }\n    /**\n      * retrieve one of values at the index\n      * @param {Number} index - index\n      * @return {Object} one of values at the index\n      * @example\n  const obj1 = new PropertyObject(\"1,2,3\", \",\");\n\n  console.log(obj1.get(0));\n  // 1\n       */\n    public get(index: number) {\n        return this.value[index];\n    }\n    /**\n      * Set the value at that index\n      * @param {Number} index - index\n      * @param {Object} value - text, a number, object to set\n      * @return {PropertyObject} An instance itself\n      * @example\n  const obj1 = new PropertyObject(\"1,2,3\", \",\");\n  obj1.set(0, 2);\n  console.log(obj1.toValue());\n  // 2,2,3\n       */\n    public set(index: number, value: any) {\n        this.value[index] = value;\n        return this;\n    }\n    /**\n      * create a copy of an instance itself.\n      * @return {PropertyObject} clone\n      * @example\n  const obj1 = new PropertyObject(\"1,2,3\", \",\");\n  const obj2 = obj1.clone();\n       */\n    public clone(): PropertyObject {\n        const {\n            separator,\n            prefix,\n            suffix,\n            model,\n            type,\n        } = this;\n        const arr = this.value.map(v => (isPropertyObject(v) ? v.clone() : v));\n        return new PropertyObject(arr, {\n            separator,\n            prefix,\n            suffix,\n            model,\n            type,\n        });\n    }\n    /**\n      * Make Property Object to String\n      * @return {String} Make Property Object to String\n      * @example\n  //rgba(100, 100, 100, 0.5)\n  const obj4 = new PropertyObject([100,100,100,0.5], {\n      \"separator\" : \",\",\n      \"prefix\" : \"rgba(\",\n      \"suffix\" : \")\",\n  });\n  console.log(obj4.toValue());\n  // \"rgba(100,100,100,0.5)\"\n      */\n    public toValue(): string {\n        return this.prefix + this.join() + this.suffix;\n    }\n    /**\n      * Make Property Object's array to String\n      * @return {String} Join the elements of an array into a string\n      * @example\n      //rgba(100, 100, 100, 0.5)\n      var obj4 = new PropertyObject([100,100,100,0.5], {\n          \"separator\" : \",\",\n          \"prefix\" : \"rgba(\",\n          \"suffix\" : \")\"\n      });\n      obj4.join();  // =>   \"100,100,100,0.5\"\n       */\n    public join() {\n        return this.value.map(v => (isPropertyObject(v) ? v.toValue() : v)).join(this.separator);\n    }\n    /**\n      * executes a provided function once per array element.\n      * @param {Function} callback - Function to execute for each element, taking three arguments\n      * @param {All} [callback.currentValue] The current element being processed in the array.\n      * @param {Number} [callback.index] The index of the current element being processed in the array.\n      * @param {Array} [callback.array] the array.\n      * @return {PropertyObject} An instance itself\n      * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach|MDN Array.forEach()} reference to MDN document.\n      * @example\n  //rgba(100, 100, 100, 0.5)\n  var obj4 = new PropertyObject([100,100,100,0.5], {\n      \"separator\" : \",\",\n      \"prefix\" : \"rgba(\",\n      \"suffix\" : \")\"\n  });\n\n  obj4.forEach(t => {\n      console.log(t);\n  });  // =>   \"100,100,100,0.5\"\n      */\n    public forEach(func: (value?: any, index?: number, array?: any[]) => void) {\n        this.value.forEach(func);\n        return this;\n    }\n}\nexport default PropertyObject;\n","/**\n* @namespace\n* @name Property\n*/\n\nimport PropertyObject from \"../PropertyObject\";\nimport {\n    COLOR_MODELS, isString,\n    splitComma, splitSpace, stringToRGBA,\n    RGBA, splitBracket, IObject, isArray, splitText\n} from \"@daybrush/utils\";\nimport { NameType } from \"../types\";\nimport { isPropertyObject } from \"../utils\";\n\nexport function splitStyle(str: string) {\n    const properties = splitText(str, \";\");\n    const obj: IObject<string | PropertyObject> = {};\n    const totalLength = properties.length;\n    let length = totalLength;\n\n    for (let i = 0; i < totalLength; ++i) {\n        const matches = splitText(properties[i], \":\");\n\n        if (matches.length < 2 || !matches[1]) {\n            --length;\n            continue;\n        }\n        obj[matches[0].trim()] = toPropertyObject(matches[1].trim());\n    }\n    return { styles: obj, length };\n}\n/**\n* convert array to PropertyObject[type=color].\n* default model \"rgba\"\n* @memberof Property\n* @function arrayToColorObject\n* @param {Array|PropertyObject} value ex) [0, 0, 0, 1]\n* @return {PropertyObject} PropertyObject[type=color]\n* @example\narrayToColorObject([0, 0, 0])\n// => PropertyObject(type=\"color\", model=\"rgba\", value=[0, 0, 0, 1], separator=\",\")\n*/\nexport function arrayToColorObject(arr: number[]) {\n    const model = RGBA;\n\n    if (arr.length === 3) {\n        arr[3] = 1;\n    }\n    return new PropertyObject(arr, {\n        model,\n        separator: \",\",\n        type: \"color\",\n        prefix: `${model}(`,\n        suffix: \")\",\n    });\n}\n/**\n* convert text with parentheses to object.\n* @memberof Property\n* @function stringToBracketObject\n* @param {String} value ex) \"rgba(0,0,0,1)\"\n* @return {PropertyObject} PropertyObject\n* @example\nstringToBracketObject(\"abcde(0, 0, 0,1)\")\n// => PropertyObject(model=\"abcde\", value=[0, 0, 0,1], separator=\",\")\n*/\nexport function stringToBracketObject(text: string) {\n    // [prefix, value, other]\n    const { prefix: model, value, suffix: afterModel } = splitBracket(text);\n\n    if (typeof value === \"undefined\") {\n        return text;\n    }\n    if (COLOR_MODELS.indexOf(model) > -1) {\n        return arrayToColorObject(stringToRGBA(text));\n    }\n    // divide comma(,)\n    const obj = toPropertyObject(value, model);\n\n    let arr = [value];\n    let separator = \",\";\n    let prefix = `${model}(`;\n    let suffix = `)${afterModel}`;\n\n    if (isPropertyObject(obj)) {\n        separator = obj.separator;\n        arr = obj.value;\n        prefix += obj.prefix;\n        suffix = obj.suffix + suffix;\n    }\n    return new PropertyObject(arr, {\n        separator,\n        model,\n        prefix,\n        suffix,\n    });\n}\n\nexport function arrayToPropertyObject(arr: any[], separator: string) {\n    return new PropertyObject(arr, {\n        type: \"array\",\n        separator,\n    });\n}\n\n/**\n* convert text with parentheses to PropertyObject[type=color].\n* If the values are not RGBA model, change them RGBA mdoel.\n* @memberof Property\n* @function stringToColorObject\n* @param {String|PropertyObject} value ex) \"rgba(0,0,0,1)\"\n* @return {PropertyObject} PropertyObject[type=color]\n* @example\nstringToColorObject(\"rgba(0, 0, 0,1)\")\n// => PropertyObject(type=\"color\", model=\"rgba\", value=[0, 0, 0,1], separator=\",\")\n*/\nexport function stringToColorObject(value: string): string | PropertyObject {\n    const result = stringToRGBA(value);\n\n    return result ? arrayToColorObject(result) : value;\n}\n/**\n* convert CSS Value to PropertyObject\n* @memberof Property\n* @function toPropertyObject\n* @param {String} value it's text contains the array.\n* @return {String} Not Array, Not Separator, Only Number & Unit\n* @return {PropertyObject} Array with Separator.\n* @see referenced regular expression {@link http://stackoverflow.com/questions/20215440/parse-css-gradient-rule-with-javascript-regex}\n* @example\ntoPropertyObject(\"1px solid #000\");\n// => PropertyObject([\"1px\", \"solid\", rgba(0, 0, 0, 1)])\n*/\nexport function toPropertyObject(value: any[], model?: NameType): PropertyObject;\nexport function toPropertyObject(value: IObject<any>, model?: NameType): IObject<any>;\nexport function toPropertyObject(value: string, model?: NameType): PropertyObject | string;\nexport function toPropertyObject(value: string | IObject<any> | any[], model?: NameType) {\n    if (!isString(value)) {\n        if (isArray(value)) {\n            return arrayToPropertyObject(value, \",\");\n        }\n        return value;\n    }\n    let values: any = splitComma(value);\n\n    if (values.length > 1) {\n        return arrayToPropertyObject(values.map(v => toPropertyObject(v)), \",\");\n    }\n    values = splitSpace(value);\n\n    if (values.length > 1) {\n        return arrayToPropertyObject(values.map(v => toPropertyObject(v)), \" \");\n    }\n    values = /^(['\"])([^'\"]*)(['\"])$/g.exec(value);\n\n    if (values && values[1] === values[3]) {\n        // Quotes\n        return new PropertyObject([toPropertyObject(values[2])], {\n            prefix: values[1],\n            suffix: values[1],\n        });\n    } else if (value.indexOf(\"(\") !== -1) {\n        // color\n        return stringToBracketObject(value);\n    } else if (value.charAt(0) === \"#\" && model !== \"url\") {\n        return stringToColorObject(value);\n    }\n    return value;\n}\n\nexport function toObject(object: PropertyObject, result: IObject<any> = {}) {\n    const model = object.model;\n\n    if (model) {\n        object.setOptions({\n            model: \"\",\n            suffix: \"\",\n            prefix: \"\",\n        });\n        const value = object.size() > 1 ? object : object.get(0);\n\n        result[model] = value;\n    } else {\n        object.forEach(obj => {\n            toObject(obj, result);\n        });\n    }\n    return result;\n}\n","import {\n    ROLES, MAXIMUM, FIXED, ALIAS,\n    RUNNING, PLAY, ENDED, PLAY_CSS, CURRENT_TIME,\n    START_ANIMATION, EASINGS, NAME_SEPARATOR\n} from \"./consts\";\nimport PropertyObject from \"./PropertyObject\";\nimport Scene from \"./Scene\";\nimport SceneItem from \"./SceneItem\";\nimport {\n    isArray, ANIMATION, ARRAY, OBJECT,\n    PROPERTY, STRING, NUMBER, IS_WINDOW, IObject,\n    $, isObject, addEvent, removeEvent, isString,\n    splitComma, splitBracket,\n} from \"@daybrush/utils\";\nimport { EasingType, EasingFunction, NameType, SelectorAllType, AnimateElement } from \"./types\";\nimport { toPropertyObject } from \"./utils/property\";\nimport { bezier, steps } from \"./easing\";\nimport Animator from \"./Animator\";\nimport Frame from \"./Frame\";\n\nexport function setAlias(name: string, alias: string[]) {\n    ALIAS[name] = alias;\n}\nexport function setRole(names: string[], isProperty?: boolean, isFixedProperty?: boolean) {\n    const length = names.length;\n    let roles: any = ROLES;\n    let fixed: any = FIXED;\n\n    for (let i = 0; i < length - 1; ++i) {\n        !roles[names[i]] && (roles[names[i]] = {});\n        roles = roles[names[i]];\n        if (isFixedProperty) {\n            !fixed[names[i]] && (fixed[names[i]] = {});\n            fixed = fixed[names[i]];\n        }\n    }\n    isFixedProperty && (fixed[names[length - 1]] = true);\n    roles[names[length - 1]] = isProperty ? true : {};\n}\nexport function getType(value: any) {\n    const type = typeof value;\n\n    if (type === OBJECT) {\n        if (isArray(value)) {\n            return ARRAY;\n        } else if (isPropertyObject(value)) {\n            return PROPERTY;\n        }\n    } else if (type === STRING || type === NUMBER) {\n        return \"value\";\n    }\n    return type;\n}\nexport function isPureObject(obj: any): obj is object {\n    return isObject(obj) && obj.constructor === Object;\n}\nexport function getNames(names: IObject<any>, stack: string[]) {\n    let arr: string[][] = [];\n\n    if (isPureObject(names)) {\n        for (const name in names) {\n            stack.push(name);\n            arr = arr.concat(getNames(names[name], stack));\n            stack.pop();\n        }\n    } else {\n        arr.push(stack.slice());\n    }\n    return arr;\n}\nexport function updateFrame(names: IObject<any>, properties: IObject<any>) {\n    for (const name in properties) {\n        const value = properties[name];\n\n        if (!isPureObject(value)) {\n            names[name] = true;\n            continue;\n        }\n        if (!isObject(names[name])) {\n            names[name] = {};\n        }\n        updateFrame(names[name], properties[name]);\n    }\n    return names;\n}\nexport function toFixed(num: number) {\n    return Math.round(num * MAXIMUM) / MAXIMUM;\n}\nexport function getValueByNames(\n    names: Array<string | number>,\n    properties: IObject<any>, length: number = names.length) {\n    let value = properties;\n\n    for (let i = 0; i < length; ++i) {\n        if (!isObject(value) || value == null) {\n            return undefined;\n        }\n        value = value[names[i]];\n    }\n    return value;\n}\nexport function isInProperties(roles: IObject<any>, args: NameType[], isLast?: boolean) {\n    const length = args.length;\n    let role: any = roles;\n\n    if (length === 0) {\n        return false;\n    }\n    for (let i = 0; i < length; ++i) {\n        if (role === true) {\n            return false;\n        }\n        role = role[args[i]];\n        if (!role || (!isLast && role === true)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * @memberof Scene\n * @param - Property names\n * @param - Whether the property is the last property that cannot be an object (non-partitionable)\n */\nexport function isRole(args: NameType[], isLast?: boolean): boolean {\n    return isInProperties(ROLES, args, isLast);\n}\nexport function isFixed(args: NameType[]) {\n    return isInProperties(FIXED, args, true);\n}\n\nexport interface IterationInterface {\n    currentTime: number;\n    iterationCount: number;\n    elapsedTime: number;\n}\nexport function setPlayCSS(item: Animator, isActivate: boolean) {\n    item.state[PLAY_CSS] = isActivate;\n}\nexport function isPausedCSS(item: Scene | SceneItem) {\n    return item.state[PLAY_CSS] && item.isPaused();\n}\nexport function isEndedCSS(item: Scene | SceneItem) {\n    return !item.isEnded() && item.state[PLAY_CSS];\n}\n\nexport function makeId(selector?: boolean) {\n    for (; ;) {\n        const id = `${Math.floor(Math.random() * 10000000)}`;\n\n        if (!IS_WINDOW || !selector) {\n            return id;\n        }\n        const checkElement = $(`[data-scene-id=\"${id}\"]`);\n\n        if (!checkElement) {\n            return id;\n        }\n    }\n}\nexport function getRealId(item: Scene | SceneItem) {\n    return item.getId() || item.setId(makeId(false)).getId();\n}\nexport function toId(text: number | string) {\n    return `${text}`.match(/[0-9a-zA-Z]+/g).join(\"\");\n}\nexport function playCSS(\n    item: Scene | SceneItem, isExportCSS?: boolean,\n    playClassName?: string, properties: object = {}) {\n    if (!ANIMATION || item.getPlayState() === RUNNING) {\n        return;\n    }\n    const className = playClassName || START_ANIMATION;\n\n    if (isPausedCSS(item)) {\n        item.addPlayClass(true, className, properties);\n    } else {\n        if (item.isEnded()) {\n            item.setTime(0);\n        }\n        isExportCSS && item.exportCSS({ className });\n        const el = item.addPlayClass(false, className, properties);\n\n        if (!el) {\n            return;\n        }\n        addAnimationEvent(item, el);\n        setPlayCSS(item, true);\n    }\n    item.setPlayState(RUNNING);\n}\n\nexport function addAnimationEvent(item: Animator, el: Element) {\n    const state = item.state;\n    const duration = item.getDuration();\n    const isZeroDuration = !duration || !isFinite(duration);\n    const animationend = () => {\n        setPlayCSS(item, false);\n        item.finish();\n    };\n    const animationstart = () => {\n        item.trigger(PLAY);\n\n        addEvent(el, \"animationcancel\", animationend);\n        addEvent(el, \"animationend\", animationend);\n        addEvent(el, \"animationiteration\", animationiteration);\n    };\n    item.once(ENDED, () => {\n        removeEvent(el, \"animationcancel\", animationend);\n        removeEvent(el, \"animationend\", animationend);\n        removeEvent(el, \"animationiteration\", animationiteration);\n        removeEvent(el, \"animationstart\", animationstart);\n    });\n    const animationiteration = ({ elapsedTime }: any) => {\n        const currentTime = elapsedTime;\n        const iterationCount = isZeroDuration ? 0 : (currentTime / duration);\n\n        state[CURRENT_TIME] = currentTime;\n        item.setIteration(iterationCount);\n    };\n    addEvent(el, \"animationstart\", animationstart);\n}\n\nexport function getEasing(curveArray: string | number[] | EasingFunction): EasingType {\n    let easing: EasingType;\n\n    if (isString(curveArray)) {\n        if (curveArray in EASINGS) {\n            easing = EASINGS[curveArray];\n        } else {\n            const obj = toPropertyObject(curveArray);\n\n            if (isString(obj)) {\n                return 0;\n            } else {\n                if (obj.model === \"cubic-bezier\") {\n                    curveArray = obj.value.map(v => parseFloat(v));\n                    easing = bezier(curveArray[0], curveArray[1], curveArray[2], curveArray[3]);\n                } else if (obj.model === \"steps\") {\n                    easing = steps(parseFloat(obj.value[0]), obj.value[1]);\n                } else {\n                    return 0;\n                }\n            }\n        }\n    } else if (isArray(curveArray)) {\n        easing = bezier(curveArray[0], curveArray[1], curveArray[2], curveArray[3]);\n    } else {\n        easing = curveArray;\n    }\n\n    return easing;\n}\n\nexport function isPropertyObject(value: any): value is PropertyObject {\n    if (!value) {\n        return false;\n    }\n    const prototype = (value.constructor as typeof PropertyObject).prototype;\n\n    return !!(prototype.clone && prototype.get && prototype.setOptions);\n}\n\nexport function isScene(value: any): value is Scene {\n    return value && !!(value.constructor as typeof Scene).prototype.getItem;\n}\nexport function isSceneItem(value: any): value is SceneItem {\n    return (\n        value && !!(value.constructor as typeof SceneItem).prototype.getFrame\n    );\n}\nexport function isFrame(value: any): value is Frame {\n    return value && !!(value.constructor as typeof Frame).prototype.toCSSText;\n}\nexport function isAnimator(value: any): value is Animator {\n    return value && !!(value.constructor as typeof Animator).prototype.getActiveDuration;\n}\nexport function flatSceneObject(obj: IObject<any>, seperator: string): Record<string, Frame> {\n    const newObj = {};\n\n    for (const name in obj) {\n        const value = obj[name];\n\n        if (isFrame(value)) {\n            newObj[name] = value;\n        } else if (isObject(value)) {\n            const nextObj = flatSceneObject(value, seperator);\n\n            for (const nextName in nextObj) {\n                newObj[`${name}${seperator}${nextName}`] = nextObj[nextName];\n            }\n        }\n    }\n    return newObj;\n}\n\nexport function selectorAll(\n    callback: (index: number, element: AnimateElement) => any,\n    defaultCount = 0,\n): SelectorAllType {\n    const nextCallback = callback.bind({}) as SelectorAllType;\n    nextCallback.defaultCount = defaultCount;\n\n    return nextCallback;\n}\n\nexport function rgbaToHexa(rgba: string) {\n    const hexInfo = rgbaToHexWithOpacity(rgba);\n    const hex = hexInfo.hex;\n\n    if (!hexInfo.hex) {\n        return \"\";\n    }\n    const opacityHex = Math.floor(hexInfo.opacity * 255).toString(16);\n\n    return `${hex}${opacityHex}`;\n}\n\nexport function rgbaToHexWithOpacity(rgba: string) {\n    const rgbaInfo = splitBracket(rgba);\n\n    if ((rgbaInfo.prefix || \"\").indexOf(\"rgb\") !== 0) {\n        return {\n            hex: \"\",\n            opacity: 1,\n        };\n    }\n\n    const rgbaArr = splitComma(rgbaInfo.value);\n    const rgbaNums = rgbaArr.slice(0, 3).map(num => {\n        const dec = parseInt(num, 10);\n\n        return dec.toString(16);\n    });\n\n    return {\n        hex: `#${rgbaNums.join(\"\")}`,\n        opacity: rgbaArr[3] ? parseFloat(rgbaArr[3]) : 1,\n    };\n}\n","import {\n    THRESHOLD,\n    ALTERNATE, ALTERNATE_REVERSE, REVERSE, INFINITE, NORMAL,\n    ITERATION_COUNT, DELAY, FILL_MODE, DIRECTION, PLAY_SPEED,\n    DURATION, EASING, ITERATION_TIME, EASING_NAME, PAUSED,\n    RUNNING, PLAY, TIMEUPDATE, ENDED, PLAY_STATE, PREV_TIME, TICK_TIME, CURRENT_TIME, ITERATION, OPTIONS} from \"./consts\";\nimport { toFixed, getEasing } from \"./utils\";\nimport {\n    splitUnit, isString, camelize,\n    requestAnimationFrame, cancelAnimationFrame\n} from \"@daybrush/utils\";\nimport {\n    IterationCountType, DirectionType, AnimatorState,\n    EasingFunction, FillModeType, PlayStateType, EasingType, AnimatorOptions, AnimatorEvents,\n} from \"./types\";\nimport EventEmitter from \"@scena/event-emitter\";\nimport { reactive } from \"@cfcs/core\";\n\nfunction GetterSetter<T extends new (...args: any[]) => {}>(\n    getter: string[], setter: string[], parent: string) {\n    return (constructor: T) => {\n        const prototype = constructor.prototype;\n\n        getter.forEach(name => {\n            prototype[camelize(`get ${name}`)] = function() {\n                return this[parent][name];\n            };\n        });\n        setter.forEach(name => {\n            prototype[camelize(`set ${name}`)] = function(value: any) {\n                this[parent][name] = value;\n                return this;\n            };\n        });\n    };\n}\nexport function isDirectionReverse(iteration: number, iteraiontCount: IterationCountType, direction: DirectionType) {\n    if (direction === REVERSE) {\n        return true;\n    } else if (iteraiontCount !== INFINITE && iteration === iteraiontCount && iteraiontCount % 1 === 0) {\n        return direction === (iteration % 2 >= 1 ? ALTERNATE_REVERSE : ALTERNATE);\n    }\n    return direction === (iteration % 2 >= 1 ? ALTERNATE : ALTERNATE_REVERSE);\n}\n/**\n* @typedef {Object} AnimatorState The Animator options. Properties used in css animation.\n* @property {number} [duration] The duration property defines how long an animation should take to complete one cycle.\n* @property {\"none\"|\"forwards\"|\"backwards\"|\"both\"} [fillMode] The fillMode property specifies a style for the element when the animation is not playing (before it starts, after it ends, or both).\n* @property {\"infinite\"|number} [iterationCount] The iterationCount property specifies the number of times an animation should be played.\n* @property {array|function} [easing] The easing(timing-function) specifies the speed curve of an animation.\n* @property {number} [delay] The delay property specifies a delay for the start of an animation.\n* @property {\"normal\"|\"reverse\"|\"alternate\"|\"alternate-reverse\"} [direction] The direction property defines whether an animation should be played forwards, backwards or in alternate cycles.\n*/\n\nexport const ANIMATOR_SETTERS = [\n    \"id\", ITERATION_COUNT, DELAY, FILL_MODE,\n    DIRECTION, PLAY_SPEED, DURATION,\n    PLAY_SPEED, ITERATION_TIME, PLAY_STATE,\n];\nexport const ANIMATOR_GETTERS = [\n    ...ANIMATOR_SETTERS,\n    EASING, EASING_NAME,\n];\n\n/**\n* play video, animation, the others\n* @extends EventEmitter\n* @see {@link https://www.w3schools.com/css/css3_animations.asp CSS3 Animation}\n*/\n@GetterSetter(ANIMATOR_GETTERS, ANIMATOR_SETTERS, \"state\")\nclass Animator <\n    Options extends AnimatorOptions = AnimatorOptions,\n    State extends AnimatorState = AnimatorState,\n    Events extends {} = {},\n> extends EventEmitter<AnimatorEvents & Events> {\n    public state: State;\n    private timerId: number = 0;\n\n    /**\n     * @param - animator's options\n     * @example\n  const animator = new Animator({\n      delay: 2,\n      diretion: \"alternate\",\n      duration: 2,\n      fillMode: \"forwards\",\n      iterationCount: 3,\n      easing: Scene.easing.EASE,\n  });\n     */\n    constructor(options?: Partial<Options & AnimatorOptions>) {\n        super();\n        this.state = reactive({\n            id: \"\",\n            easing: 0,\n            easingName: \"linear\",\n            iterationCount: 1,\n            delay: 0,\n            fillMode: \"forwards\",\n            direction: NORMAL,\n            playSpeed: 1,\n            currentTime: 0,\n            iterationTime: -1,\n            iteration: 0,\n            tickTime: 0,\n            prevTime: 0,\n            playState: PAUSED,\n            duration: 0,\n        }) as State;\n        this.setOptions(options);\n    }\n    /**\n      * set animator's easing.\n      * @param curverArray - The speed curve of an animation.\n      * @return {Animator} An instance itself.\n      * @example\n  animator.({\n      delay: 2,\n      diretion: \"alternate\",\n      duration: 2,\n      fillMode: \"forwards\",\n      iterationCount: 3,\n      easing: Scene.easing.EASE,\n  });\n      */\n    public setEasing(curveArray: string | number[] | EasingFunction): this {\n        const easing: EasingType = getEasing(curveArray);\n        const easingName = easing && easing[EASING_NAME] || \"linear\";\n        const state = this.state;\n\n        state[EASING] = easing;\n        state[EASING_NAME] = easingName;\n        return this;\n    }\n    /**\n      * set animator's options.\n      * @see {@link https://www.w3schools.com/css/css3_animations.asp|CSS3 Animation}\n      * @param - animator's options\n      * @return {Animator} An instance itself.\n      * @example\n  animator.({\n      delay: 2,\n      diretion: \"alternate\",\n      duration: 2,\n      fillMode: \"forwards\",\n      iterationCount: 3,\n      easing: Scene.eaasing.EASE,\n  });\n      */\n    public setOptions(options: Partial<AnimatorOptions> = {}): this {\n        for (const name in options) {\n            const value = options[name];\n\n            if (name === EASING) {\n                this.setEasing(value);\n                continue;\n            } else if (name === DURATION) {\n                value && this.setDuration(value);\n                continue;\n            }\n            if (OPTIONS.indexOf(name as any) > -1) {\n                this.state[name] = value;\n            }\n        }\n\n        return this;\n    }\n    /**\n      * Get the animator's total duration including delay\n      * @return {number} Total duration\n      * @example\n  animator.getTotalDuration();\n      */\n    public getTotalDuration(): number {\n        return this.getActiveDuration(true);\n    }\n    /**\n      * Get the animator's total duration excluding delay\n      * @return {number} Total duration excluding delay\n      * @example\n  animator.getActiveDuration();\n      */\n    public getActiveDuration(delay?: boolean): number {\n        const state = this.state;\n        const count = state[ITERATION_COUNT];\n        if (count === INFINITE) {\n            return Infinity;\n        }\n        return (delay ? state[DELAY] : 0) + this.getDuration() * count;\n    }\n    /**\n      * Check if the animator has reached the end.\n      * @return {boolean} ended\n      * @example\n  animator.isEnded(); // true or false\n      */\n    public isEnded(): boolean {\n        if (this.state[TICK_TIME] === 0 && this.state[PLAY_STATE] === PAUSED) {\n            return true;\n        } else if (this.getTime() < this.getActiveDuration()) {\n            return false;\n        }\n        return true;\n    }\n    /**\n      *Check if the animator is paused:\n      * @return {boolean} paused\n      * @example\n  animator.isPaused(); // true or false\n      */\n    public isPaused(): boolean {\n        return this.state[PLAY_STATE] === PAUSED;\n    }\n    public start(delay: number = this.state[DELAY]): boolean {\n        const state = this.state;\n\n        state[PLAY_STATE] = RUNNING;\n\n        if (state[TICK_TIME] >= delay) {\n            /**\n             * This event is fired when play animator.\n             * @event Animator#play\n             */\n            this.trigger<\"play\", AnimatorEvents[\"play\"]>(PLAY);\n            return true;\n        }\n        return false;\n    }\n    /**\n      * play animator\n      * @return {Animator} An instance itself.\n      */\n    public play(toTime?: number) {\n        const state = this.state;\n        const delay = state[DELAY];\n        const currentTime = this.getTime();\n\n        state[PLAY_STATE] = RUNNING;\n\n        if (this.isEnded() && (currentTime === 0 || currentTime >= this.getActiveDuration())) {\n            this.setTime(-delay, true);\n        }\n\n        this.timerId = requestAnimationFrame((time: number) => {\n            state[PREV_TIME] = time;\n            this.tick(time, toTime);\n        });\n        this.start();\n        return this;\n    }\n    /**\n      * pause animator\n      * @return {Animator} An instance itself.\n      */\n    public pause(): this {\n        const state = this.state;\n\n        if (state[PLAY_STATE] !== PAUSED) {\n            state[PLAY_STATE] = PAUSED;\n            /**\n             * This event is fired when animator is paused.\n             * @event Animator#paused\n             */\n            this.trigger<\"paused\", AnimatorEvents[\"paused\"]>(PAUSED);\n        }\n        cancelAnimationFrame(this.timerId);\n        return this;\n    }\n    /**\n       * end animator\n       * @return {Animator} An instance itself.\n      */\n    public finish() {\n        this.setTime(0);\n        this.state[TICK_TIME] = 0;\n        this.end();\n        return this;\n    }\n    /**\n     * end animator\n     * @return {Animator} An instance itself.\n     */\n    public end() {\n        this.pause();\n        /**\n         * This event is fired when animator is ended.\n         * @event Animator#ended\n         */\n        this.trigger<\"ended\", AnimatorEvents[\"ended\"]>(ENDED);\n        return this;\n    }\n    /**\n     * set currentTime\n     * @param {Number|String} time - currentTime\n     * @return {Animator} An instance itself.\n     * @example\n  animator.setTime(\"from\"); // 0\n  animator.setTime(\"to\"); // 100%\n  animator.setTime(\"50%\");\n  animator.setTime(10);\n  animator.getTime() // 10\n      */\n    public setTime(time: number | string, isTick?: boolean, isParent?: boolean, exec?: () => void) {\n        const activeDuration = this.getActiveDuration();\n        const state = this.state;\n        const prevTime = state[TICK_TIME];\n        const delay = state[DELAY];\n        let currentTime = isTick ? (time as number) : this.getUnitTime(time);\n\n        state[TICK_TIME] = delay + currentTime;\n        if (currentTime < 0) {\n            currentTime = 0;\n        } else if (currentTime > activeDuration) {\n            currentTime = activeDuration;\n        }\n        state[CURRENT_TIME] = currentTime;\n        this.calculate();\n\n        const isSelfTick = isTick && !isParent;\n        const tickTime = state[TICK_TIME];\n\n        if (isSelfTick && prevTime < delay && time >= 0) {\n            this.start(0);\n        }\n        exec?.();\n        if (isSelfTick && (tickTime < prevTime || this.isEnded())) {\n            this.end();\n            return this;\n        }\n        if (this.isDelay()) {\n            return this;\n        }\n        /**\n             * This event is fired when the animator updates the time.\n             * @event Animator#timeupdate\n             * @param {Object} param The object of data to be sent to an event.\n             * @param {Number} param.currentTime The total time that the animator is running.\n             * @param {Number} param.time The iteration time during duration that the animator is running.\n             * @param {Number} param.iterationCount The iteration count that the animator is running.\n             */\n        this.trigger<\"timeupdate\", AnimatorEvents[\"timeupdate\"]>(TIMEUPDATE, {\n            currentTime,\n            time: this.getIterationTime(),\n            iterationCount: state[ITERATION],\n        });\n\n        return this;\n    }\n    /**\n      * Get the animator's current time\n      * @return {number} current time\n      * @example\n  animator.getTime();\n      */\n    public getTime(): number {\n        return this.state[CURRENT_TIME];\n    }\n    public getUnitTime(time: string | number) {\n        if (isString(time)) {\n            const duration = this.getDuration() || 100;\n\n            if (time === \"from\") {\n                return 0;\n            } else if (time === \"to\") {\n                return duration;\n            }\n            const { unit, value } = splitUnit(time);\n\n            if (unit === \"%\") {\n                !this.getDuration() && (this.setDuration(duration));\n                return toFixed(parseFloat(time) / 100 * duration);\n            } else if (unit === \">\") {\n                return value + THRESHOLD;\n            } else {\n                return value;\n            }\n        } else {\n            return toFixed(time);\n        }\n    }\n    /**\n       * Check if the current state of animator is delayed.\n       * @return {boolean} check delay state\n       */\n    public isDelay() {\n        const state = this.state;\n        const delay = state[DELAY];\n        const tickTime = state[TICK_TIME];\n\n        return delay > 0 && (tickTime < delay);\n    }\n    public setIteration(iterationCount: number): this {\n        const state = this.state;\n        const passIterationCount = Math.floor(iterationCount);\n        const maxIterationCount = state[ITERATION_COUNT] === INFINITE ? Infinity : state[ITERATION_COUNT];\n\n        if (state[ITERATION] < passIterationCount && passIterationCount < maxIterationCount) {\n            /**\n                  * The event is fired when an iteration of an animation ends.\n                  * @event Animator#iteration\n                  * @param {Object} param The object of data to be sent to an event.\n                  * @param {Number} param.currentTime The total time that the animator is running.\n                  * @param {Number} param.iterationCount The iteration count that the animator is running.\n                  */\n            this.trigger<\"iteration\", AnimatorEvents[\"iteration\"]>(ITERATION, {\n                currentTime: state[CURRENT_TIME],\n                iterationCount: passIterationCount,\n            });\n        }\n        state[ITERATION] = iterationCount;\n        return this;\n    }\n    protected calculate() {\n        const state = this.state;\n        const iterationCount = state[ITERATION_COUNT];\n        const fillMode = state[FILL_MODE];\n        const direction = state[DIRECTION];\n        const duration = this.getDuration();\n        const time = this.getTime();\n        const iteration = duration === 0 ? 0 : time / duration;\n        let currentIterationTime = duration ? time % duration : 0;\n\n        if (!duration) {\n            this.setIterationTime(0);\n            return this;\n        }\n        this.setIteration(iteration);\n\n        // direction : normal, reverse, alternate, alternate-reverse\n        // fillMode : forwards, backwards, both, none\n        const isReverse = isDirectionReverse(iteration, iterationCount, direction);\n\n        const isFiniteDuration = isFinite(duration);\n        if (isFiniteDuration && isReverse) {\n            currentIterationTime = duration - currentIterationTime;\n        }\n        if (isFiniteDuration && iterationCount !== INFINITE) {\n            const isForwards = fillMode === \"both\" || fillMode === \"forwards\";\n\n            // fill forwards\n            if (iteration >= iterationCount) {\n                currentIterationTime = duration * (isForwards ? (iterationCount % 1) || 1 : 0);\n                isReverse && (currentIterationTime = duration - currentIterationTime);\n            }\n        }\n        this.setIterationTime(currentIterationTime);\n        return this;\n    }\n    private tick(now: number, to?: number) {\n        if (this.isPaused()) {\n            return;\n        }\n        const state = this.state;\n        const playSpeed = state[PLAY_SPEED];\n        const prevTime = state[PREV_TIME];\n        const delay = state[DELAY];\n        const tickTime = state[TICK_TIME];\n        const currentTime = tickTime + Math.min(1000, now - prevTime) / 1000 * playSpeed;\n\n        state[PREV_TIME] = now;\n\n        if (to && to >= currentTime) {\n            this.setTime(to - delay, true);\n            this.pause();\n        } else {\n            this.setTime(currentTime - delay, true);\n        }\n\n        if (state[PLAY_STATE] === PAUSED) {\n            return;\n        }\n        this.timerId = requestAnimationFrame((time: number) => {\n            this.tick(time, to);\n        });\n    }\n}\n/**\n * Specifies the unique indicator of the animator\n * @method Animator#setId\n * @param {number | string} - String or number of id to be set in the animator\n * @return {Animator} An instance itself.\n */\n/**\n * Specifies the unique indicator of the animator\n * @method Animator#getId\n * @return {number | string} the indicator of the item.\n */\n/**\n * Get a delay for the start of an animation.\n * @method Animator#getDelay\n * @return {number} delay\n */\n/**\n * Set a delay for the start of an animation.\n * @method Animator#setDelay\n * @param {number} delay - delay\n * @return {Animator} An instance itself.\n */\n/**\n * Get fill mode for the item when the animation is not playing (before it starts, after it ends, or both)\n * @method Animator#getFillMode\n * @return {FillModeType} fillMode\n */\n/**\n * Set fill mode for the item when the animation is not playing (before it starts, after it ends, or both)\n * @method Animator#setFillMode\n * @param {FillModeType} fillMode - fillMode\n * @return {Animator} An instance itself.\n */\n/**\n * Get the number of times an animation should be played.\n * @method Animator#getIterationCount\n * @return {IterationCountType} iterationCount\n */\n/**\n * Set the number of times an animation should be played.\n * @method Animator#setIterationCount\n * @param {IterationCountType} iterationCount - iterationCount\n * @return {Animator} An instance itself.\n */\n/**\n * Get whether an animation should be played forwards, backwards or in alternate cycles.\n * @method Animator#getDirection\n * @return {DirectionType} direction\n */\n/**\n * Set whether an animation should be played forwards, backwards or in alternate cycles.\n * @method Animator#setDirection\n * @param {DirectionType} direction - direction\n * @return {Animator} An instance itself.\n */\n/**\n * Get whether the animation is running or paused.\n * @method Animator#getPlayState\n * @return {PlayStateType} playState\n */\n/**\n * Set whether the animation is running or paused.\n * @method Animator#setPlayState\n * @param {PlayStateType} playState - playState\n * @return {Animator} An instance itself.\n */\n/**\n * Get the animator's play speed\n * @method Animator#getPlaySpeed\n * @return {number} playSpeed\n */\n/**\n * Set the animator's play speed\n * @method Animator#setPlaySpeed\n * @param {number} playSpeed - playSpeed\n * @return {Animator} An instance itself.\n */\n/**\n * Get how long an animation should take to complete one cycle.\n * @method Animator#getDuration\n * @return {number} duration\n */\n/**\n * Set how long an animation should take to complete one cycle.\n * @method Animator#setDuration\n * @param {number} duration - duration\n * @return {Animator} An instance itself.\n */\n/**\n * Get the speed curve of an animation.\n * @method Animator#getEasing\n * @return {EasingType} easing\n */\n/**\n * Get the speed curve's name\n * @method Animator#getEasingName\n * @return {string} the curve's name.\n */\n/**\n\t* Get the animator's current iteration time\n\t* @method Animator#getIterationTime\n\t* @return {number} current iteration time\n\t* @example\nanimator.getIterationTime();\n\t*/\n\n// tslint:disable-next-line:interface-name\ninterface Animator <\n    Options extends AnimatorOptions = AnimatorOptions,\n    State extends AnimatorState = AnimatorState,\n    Events extends {} = {},\n> extends EventEmitter<AnimatorEvents & Events> {\n    setId(id: number | string): this;\n    getId(): number | string;\n    getIterationTime(): number;\n    setIterationTime(time: number): this;\n    setDelay(delay: number): this;\n    getDelay(): number;\n    setFillMode(fillMode: FillModeType): this;\n    getFillMode(): FillModeType;\n    setIterationCount(iterationCount: IterationCountType): this;\n    getIterationCount(): IterationCountType;\n    setDirection(direction: DirectionType): this;\n    getDirection(): DirectionType;\n    setPlayState(playState: PlayStateType): this;\n    getPlayState(): PlayStateType;\n    setPlaySpeed(playSpeed: number): this;\n    getPlaySpeed(): number;\n    setDuration(duration: number): this;\n    getDuration(): number;\n    getEasing(): EasingType;\n    getEasingName(): string;\n}\nexport default Animator;\n","import {\n    ALIAS, TIMING_FUNCTION, TRANSFORM_NAME, EASING_NAME, NAME_SEPARATOR\n} from \"./consts\";\nimport { isRole, getType, isPropertyObject, getValueByNames, isFixed, getNames, getEasing, isFrame } from \"./utils\";\nimport { toPropertyObject, splitStyle, toObject } from \"./utils/property\";\nimport {\n    isObject, isArray, isString, getKeys,\n    ANIMATION, TRANSFORM, FILTER, PROPERTY, FUNCTION, ARRAY, OBJECT, IObject, isUndefined,\n    sortOrders,\n    decamelize,\n    camelize,\n} from \"@daybrush/utils\";\nimport { NameType, KeyValueChildren, FrameEvents } from \"./types\";\nimport OrderMap from \"order-map\";\nimport { Observe } from \"@cfcs/core\";\nimport EventEmitter from \"@scena/event-emitter\";\n\nfunction toInnerProperties(obj: IObject<string>, orders: NameType[] = []) {\n    if (!obj) {\n        return \"\";\n    }\n    const arrObj = [];\n\n    const keys = getKeys(obj);\n\n    sortOrders(keys, orders);\n\n    keys.forEach(name => {\n        arrObj.push(`${name.replace(/\\d$/g, \"\")}(${obj[name]})`);\n    });\n\n    return arrObj.join(\" \");\n}\n\n/* eslint-disable */\nfunction clone(target: IObject<any>, toValue = false) {\n    return merge({}, target, toValue);\n}\nfunction merge(to: IObject<any>, from: IObject<any>, toValue = false) {\n    for (const name in from) {\n        const value = from[name];\n        const type = getType(value);\n\n        if (type === PROPERTY) {\n            to[name] = toValue ? value.toValue() : value.clone();\n        } else if (type === FUNCTION) {\n            to[name] = toValue ? getValue([name], value) : value;\n        } else if (type === ARRAY) {\n            to[name] = value.slice();\n        } else if (type === OBJECT) {\n            if (isObject(to[name]) && !isPropertyObject(to[name])) {\n                merge(to[name], value, toValue);\n            } else {\n                to[name] = clone(value, toValue);\n            }\n        } else {\n            to[name] = from[name];\n        }\n    }\n    return to;\n}\n/* eslint-enable */\n\nfunction getPropertyName(args: NameType[]) {\n    return args[0] in ALIAS ? ALIAS[args[0]] : args;\n}\nfunction getValue(names: NameType[], value: any): any {\n    const type = getType(value);\n\n    if (type === PROPERTY) {\n        return value.toValue();\n    } else if (type === FUNCTION) {\n        if (names[0] !== TIMING_FUNCTION) {\n            return getValue(names, value());\n        }\n    } else if (type === OBJECT) {\n        return clone(value, true);\n    }\n    return value;\n}\n\n/**\n* Animation's Frame\n*/\nclass Frame extends EventEmitter<FrameEvents> {\n    public properties: IObject<any> = {};\n    public orderMap: OrderMap = new OrderMap(NAME_SEPARATOR);\n    /**\n     * @param - properties\n     * @example\n  const frame = new Scene.Frame({\n      display: \"none\"\n      transform: {\n          translate: \"50px\",\n          scale: \"5, 5\",\n      }\n  });\n     */\n    constructor(properties: string | Record<string, any> = {}) {\n        super();\n        this.properties = {};\n        // this.orders = [];\n        this.set(properties);\n    }\n    /**\n      * get property value\n      * @param {...Number|String|PropertyObject} args - property name or value\n      * @example\n      frame.get(\"display\") // => \"none\", \"block\", ....\n      frame.get(\"transform\", \"translate\") // => \"10px,10px\"\n      */\n    public get(...args: NameType[]) {\n        const value = this.raw(...args);\n\n        return getValue(getPropertyName(args), value);\n    }\n    /**\n      * get properties orders\n      * @param - property names\n      * @example\n      frame.getOrders([\"display\"]) // => []\n      frame.getOrders([\"transform\"]) // => [\"translate\", \"scale\"]\n      */\n    public getOrders(names: NameType[]): NameType[] | undefined {\n        return this.orderMap.get(names);\n    }\n    /**\n      * set properties orders\n      * @param - property names\n      * @param - orders\n      * @example\n      frame.getOrders([\"transform\"]) // => [\"translate\", \"scale\"]\n      frame.setOrders([\"transform\"], [\"scale\", \"tralsate\"])\n      */\n    public setOrders(names: NameType[], orders: NameType[]): NameType[] {\n        const result = this.orderMap.set(names, orders);\n\n        this._update();\n        return result;\n    }\n    /**\n      * get properties order object\n      * @example\n      console.log(frame.getOrderObject());\n      */\n    public getOrderObject() {\n        return this.orderMap.getObject();\n    }\n    /**\n      * set properties orders object\n      * @param - properties orders object\n      * @example\n      frame.setOrderObject({\n          \"\": [\"transform\"],\n          \"transform\": [\"scale\", \"tralsate\"],\n      });\n      */\n    public setOrderObject(obj: IObject<NameType[]>) {\n        this.orderMap.setObject(obj);\n        this._update();\n    }\n\n    /**\n      * get property keys\n      * @param - property names\n      * @example\n      frame.gets(\"display\") // => []\n      frame.gets(\"transform\") // => [\"translate\"]\n      */\n    public getKeys(...args: NameType[]): string[] {\n        const value = this.raw(...args);\n        const keys = getType(value) === OBJECT ? getKeys(value) : [];\n\n        sortOrders(keys, this.orderMap.get(args));\n        return keys;\n    }\n    /**\n      * get properties array\n      * @param - property names\n      * @example\n      frame.gets(\"display\") // => []\n      frame.gets(\"transform\") // => [{ key: \"translate\", value: \"10px, 10px\", children: [] }]\n      */\n    public gets(...args: NameType[]): KeyValueChildren[] {\n        const values = this.get(...args);\n        const keys = this.getKeys(...args);\n\n        return keys.map(key => {\n            const nextValue = values[key];\n            return { key, value: nextValue, children: this.gets(...args, key) };\n        });\n    }\n\n    public raw(...args: NameType[]) {\n        return getValueByNames(getPropertyName(args), this.properties);\n    }\n    /**\n      * remove property value\n      * @param {...String} args - property name\n      * @return {Frame} An instance itself\n      * @example\n      frame.remove(\"display\")\n      */\n    public remove(...args: NameType[]) {\n        const params = getPropertyName(args);\n        const length = params.length;\n\n        if (!length) {\n            return this;\n        }\n        this.orderMap.remove(params);\n        const value = getValueByNames(params, this.properties, length - 1);\n\n        if (isObject(value)) {\n            delete value[params[length - 1]];\n        }\n        this._update();\n        return this;\n    }\n    /**\n      * set property\n      * @param {...Number|String|PropertyObject} args - property names or values\n      * @return {Frame} An instance itself\n      * @example\n  // one parameter\n  frame.set({\n      display: \"none\",\n      transform: {\n          translate: \"10px, 10px\",\n          scale: \"1\",\n      },\n      filter: {\n          brightness: \"50%\",\n          grayscale: \"100%\"\n      }\n  });\n\n  // two parameters\n  frame.set(\"transform\", {\n      translate: \"10px, 10px\",\n      scale: \"1\",\n  });\n\n  // three parameters\n  frame.set(\"transform\", \"translate\", \"50px\");\n    */\n    public set(...args: any[]) {\n        this._set(...args);\n        this._update();\n        return this;\n    }\n    /**\n      * Gets the names of properties.\n      * @return the names of properties.\n      * @example\n  // one parameter\n  frame.set({\n      display: \"none\",\n      transform: {\n          translate: \"10px, 10px\",\n          scale: \"1\",\n      },\n  });\n\n  // [[\"display\"], [\"transform\", \"translate\"], [\"transform\", \"scale\"]]\n  console.log(frame.getNames());\n    */\n    public getNames(): string[][] {\n        return getNames(this.properties, []);\n    }\n    /**\n      * check that has property.\n      * @param {...String} args - property name\n      * @example\n      frame.has(\"property\", \"display\") // => true or false\n      */\n    public has(...args: NameType[]) {\n        const params = getPropertyName(args);\n        const length = params.length;\n\n        if (!length) {\n            return false;\n        }\n        return !isUndefined(getValueByNames(params, this.properties, length));\n    }\n    /**\n      * clone frame.\n      * @return {Frame} An instance of clone\n      * @example\n      frame.clone();\n      */\n    public clone() {\n        const frame = new Frame();\n\n        frame.setOrderObject(this.orderMap.orderMap);\n        return frame.merge(this);\n    }\n    /**\n      * merge one frame to other frame.\n      * @param - target frame.\n      * @return {Frame} An instance itself\n      * @example\n      frame.merge(frame2);\n      */\n    public merge(frame: Frame) {\n        const properties = this.properties;\n        const frameProperties = frame.properties;\n\n        if (frameProperties) {\n            merge(properties, frameProperties);\n        }\n        return this;\n    }\n    /**\n      * Specifies an css object that coverted the frame.\n      * @param - If you want to return camel case name like css property or react, use the following parameter\n      * @return {object} cssObject\n      */\n    public toCSSObject(useCamelCase?: boolean) {\n        const properties = this.get();\n        const cssObject: IObject<string> = {};\n\n        for (let name in properties) {\n            if (isRole([name], true)) {\n                continue;\n            }\n            let value = properties[name];\n\n            if (name === TIMING_FUNCTION) {\n                name = TIMING_FUNCTION.replace(\"animation\", ANIMATION);\n                value = (isString(value) ? value : value[EASING_NAME]) || \"initial\";\n            }\n            if (useCamelCase) {\n                name = camelize(name.replace(/^[-]+/g, \"\"));\n            }\n            cssObject[name] = value;\n        }\n        const transform = toInnerProperties(properties[TRANSFORM_NAME], this.orderMap.get([TRANSFORM_NAME]));\n        const filter = toInnerProperties(properties.filter, this.orderMap.get([FILTER]));\n\n        TRANSFORM && transform && (cssObject[TRANSFORM] = transform);\n        FILTER && filter && (cssObject[FILTER] = filter);\n        return cssObject;\n    }\n    /**\n      * Specifies an css text that coverted the frame.\n      * @return {string} cssText\n      */\n    public toCSSText() {\n        const cssObject = this.toCSSObject();\n        const cssArray = [];\n        const keys = getKeys(cssObject);\n\n        sortOrders(keys, this.orderMap.get([]));\n        keys.forEach(name => {\n            cssArray.push(`${decamelize(name, \"-\")}:${cssObject[name]};`);\n        });\n        return cssArray.join(\"\");\n    }\n    /**\n      * Specifies an css text that coverted the frame.\n      * Use `toCSSText()` method.\n      * @deprecated\n      * @return {string} cssText\n      */\n    public toCSS() {\n        const cssObject = this.toCSSObject();\n        const cssArray = [];\n        const keys = getKeys(cssObject);\n\n        sortOrders(keys, this.orderMap.get([]));\n        keys.forEach(name => {\n            cssArray.push(`${name}:${cssObject[name]};`);\n        });\n        return cssArray.join(\"\");\n    }\n    /**\n      * Remove All Properties\n      * @return {Frame} An instance itself\n      */\n    public clear() {\n        this.properties = {};\n        this.orderMap.clear();\n        return this;\n    }\n    private _set(...args: any[]) {\n        const self = this;\n        const length = args.length;\n        const params = args.slice(0, -1);\n        const value = args[length - 1];\n        const firstParam = params[0];\n\n        if (length === 1 && isFrame(value)) {\n            self.merge(value);\n        } else if (firstParam in ALIAS) {\n            self._setByPath(ALIAS[firstParam], value);\n        } else if (length === 2 && isArray(firstParam)) {\n            self._setByPath(firstParam, value);\n        } else if (isPropertyObject(value)) {\n            if (isRole(params)) {\n                self._set(...params, toObject(value));\n            } else {\n                self._setByPath(params, value);\n            }\n        } else if (isArray(value)) {\n            self._setByPath(params, value);\n        } else if (isObject(value)) {\n            if (!self.has(...params) && isRole(params)) {\n                self._setByPath(params, {});\n            }\n            for (const name in value) {\n                self._set(...params, name, value[name]);\n            }\n        } else if (isString(value)) {\n            if (isRole(params, true)) {\n                if (isFixed(params) || !isRole(params)) {\n                    this._setByPath(params, value);\n                } else {\n                    const obj = toPropertyObject(value);\n\n                    if (isObject(obj)) {\n                        self._set(...params, obj);\n                    }\n                }\n                return this;\n            } else {\n                const { styles, length: stylesLength } = splitStyle(value);\n\n                for (const name in styles) {\n                    self._set(...params, name, styles[name]);\n                }\n                if (stylesLength) {\n                    return this;\n                }\n            }\n            self._setByPath(params, value);\n        } else {\n            self._setByPath(params, value);\n        }\n    }\n    private _setByPath(path: NameType[], value: any) {\n        let properties = this.properties;\n        const length = path.length;\n\n        for (let i = 0; i < length - 1; ++i) {\n            const name = path[i];\n\n            !(name in properties) && (properties[name] = {});\n            properties = properties[name];\n        }\n        if (!length) {\n            return;\n        }\n        const lastParam = path[length - 1];\n\n        this.orderMap.add(path);\n        if (length === 1 && lastParam === TIMING_FUNCTION) {\n            properties[lastParam] = getEasing(value);\n        } else {\n            properties[lastParam] = isString(value) && !isFixed(path)\n                ? toPropertyObject(value, lastParam)\n                : value;\n        }\n    }\n    private _update() {\n        this.emit(\"update\");\n    }\n}\nexport default Frame;\n","\nimport PropertyObject from \"../PropertyObject\";\nimport { getType } from \"../utils\";\nimport { toPropertyObject } from \"./property\";\nimport { splitUnit, PROPERTY, FUNCTION, ARRAY, dot as dotNumber } from \"@daybrush/utils\";\nimport { EasingType } from \"../types\";\n\nfunction dotArray(a1: any[], a2: any, b1: number, b2: number): any {\n  const length = a2.length;\n\n  return a1.map((v1, i) => {\n    if (i >= length) {\n      return v1;\n    } else {\n      return dot(v1, a2[i], b1, b2);\n    }\n  });\n}\n\nfunction dotColor(color1: PropertyObject, color2: PropertyObject, b1: number, b2: number) {\n  // convert array to PropertyObject(type=color)\n  const value1 = color1.value;\n  const value2 = color2.value;\n  // If the model name is not same, the inner product is impossible.\n  const model1 = color1.model;\n  const model2 = color2.model;\n\n  if (model1 !== model2) {\n    // It is recognized as a string.\n    return dot(color1.toValue(), color2.toValue(), b1, b2);\n  }\n  if (value1.length === 3) {\n    value1[3] = 1;\n  }\n  if (value2.length === 3) {\n    value2[3] = 1;\n  }\n  const v = dotArray(value1, value2, b1, b2);\n  const colorModel = model1;\n\n  for (let i = 0; i < 3; ++i) {\n    v[i] = parseInt(v[i], 10);\n  }\n  const object = new PropertyObject(v, {\n    type: \"color\",\n    model: colorModel,\n    prefix: `${colorModel}(`,\n    suffix: \")\",\n  });\n\n  return object;\n}\n\nfunction dotObject(a1: PropertyObject, a2: PropertyObject, b1: number, b2: number) {\n  const a1Type = a1.type;\n\n  if (a1Type === \"color\") {\n    return dotColor(a1, a2, b1, b2);\n  }\n  const value1 = a1.value;\n  const value2 = a2.value;\n  const arr = dotArray(value1, value2, b1, b2);\n\n  return new PropertyObject(arr, {\n    type: a1Type,\n    separator: a1.separator || a2.separator,\n    prefix: a1.prefix || a2.prefix,\n    suffix: a1.suffix || a2.suffix,\n    model: a1.model || a2.model,\n  });\n}\n/**\n* The dot product of a1 and a2 for the b1 and b2.\n* @memberof Dot\n* @function dot\n* @param {String|Number|PropertyObject} a1 value1\n* @param {String|Number|PropertyObject} a2 value2\n* @param {Number} b1 b1 ratio\n* @param {Number} b2 b2 ratio\n* @return {String} Not Array, Not Separator, Only Number & Unit\n* @return {PropertyObject} Array with Separator.\n* @example\ndot(1, 3, 0.3, 0.7);\n// => 1.6\n*/\nexport function dot(a1: any, a2: any, b1: number, b2: number): any {\n  if (b2 === 0) {\n    return a2;\n  } else if (b1 === 0 || b1 + b2 === 0) {\n    // prevent division by zero.\n    return a1;\n  }\n  // dot Object\n\n  const type1 = getType(a1);\n  const type2 = getType(a2);\n  const isFunction1 = type1 === FUNCTION;\n  const isFunction2 = type2 === FUNCTION;\n\n  if (isFunction1 || isFunction2) {\n    return () => {\n      return dot(isFunction1 ? toPropertyObject(a1()) : a1, isFunction2 ? toPropertyObject(a2()) : a2, b1, b2);\n    };\n  } else if (type1 === type2) {\n    if (type1 === PROPERTY) {\n      return dotObject(a1, a2, b1, b2);\n    } else if (type1 === ARRAY) {\n      return dotArray(a1, a2, b1, b2);\n    } else if (type1 !== \"value\") {\n      return a1;\n    }\n  } else {\n    return a1;\n  }\n  const v1 = splitUnit(`${a1}`);\n  const v2 = splitUnit(`${a2}`);\n  let v;\n\n  // 숫자가 아닐경우 첫번째 값을 반환 b2가 0일경우 두번째 값을 반환\n  if (isNaN(v1.value) || isNaN(v2.value)) {\n    return a1;\n  } else {\n    v = dotNumber(v1.value, v2.value, b1, b2);\n  }\n  const prefix = v1.prefix || v2.prefix;\n  const unit = v1.unit || v2.unit;\n\n  if (!prefix && !unit) {\n    return v;\n  }\n  return prefix + v + unit;\n}\n\nexport function dotValue(\n  time: number,\n  prevTime: number,\n  nextTime: number,\n  prevValue: any,\n  nextValue: any,\n  easing?: EasingType) {\n  if (time === prevTime) {\n    return prevValue;\n  } else if (time === nextTime) {\n    return nextValue;\n  } else if (!easing) {\n    return dot(prevValue, nextValue, time - prevTime, nextTime - time);\n  }\n  const ratio = easing((time - prevTime) / (nextTime - prevTime));\n  const value = dot(prevValue, nextValue, ratio, 1 - ratio);\n\n  return value;\n}\n","import Animator, { isDirectionReverse } from \"./Animator\";\nimport Frame from \"./Frame\";\nimport {\n    toFixed,\n    isFixed,\n    playCSS,\n    toId,\n    getRealId,\n    makeId,\n    isPausedCSS,\n    isRole,\n    getValueByNames,\n    isEndedCSS,\n    setPlayCSS,\n    getNames,\n    updateFrame,\n    isSceneItem,\n} from \"./utils\";\nimport { dotValue } from \"./utils/dot\";\nimport {\n    START_ANIMATION,\n    PREFIX, THRESHOLD,\n    TIMING_FUNCTION, ALTERNATE, ALTERNATE_REVERSE, INFINITE,\n    REVERSE, EASING, FILL_MODE, DIRECTION, ITERATION_COUNT,\n    EASING_NAME, DELAY, PLAY_SPEED, DURATION, PAUSE_ANIMATION,\n    DATA_SCENE_ID, SELECTOR, ROLES, NAME_SEPARATOR\n} from \"./consts\";\nimport {\n    isObject, isArray, isUndefined, decamelize,\n    ANIMATION, fromCSS, addClass, removeClass, hasClass,\n    KEYFRAMES, isFunction,\n    IObject, $, splitComma, toArray, isString, IArrayFormat,\n    dot as dotNumber,\n    find,\n    findIndex,\n    getKeys,\n    sortOrders,\n} from \"@daybrush/utils\";\nimport {\n    NameType, AnimateElement, AnimatorState,\n    SceneItemState, SceneItemOptions, EasingType, PlayCondition, DirectionType, SceneItemEvents\n} from \"./types\";\nimport OrderMap from \"order-map\";\nimport styled, { InjectResult, StyledInjector } from \"css-styled\";\n\nfunction getNearTimeIndex(times: number[], time: number) {\n    const length = times.length;\n\n    for (let i = 0; i < length; ++i) {\n        if (times[i] === time) {\n            return [i, i];\n        } else if (times[i] > time) {\n            return [i > 0 ? i - 1 : 0, i];\n        }\n    }\n    return [length - 1, length - 1];\n}\nfunction makeAnimationProperties(properties: object) {\n    const cssArray = [];\n\n    for (const name in properties) {\n        cssArray.push(`${ANIMATION}-${decamelize(name)}:${properties[name]};`);\n    }\n    return cssArray.join(\"\");\n}\nfunction addTime(times: number[], time: number) {\n    const length = times.length;\n    for (let i = 0; i < length; ++i) {\n        if (time < times[i]) {\n            times.splice(i, 0, time);\n            return;\n        }\n    }\n    times[length] = time;\n}\nfunction addEntry(entries: number[][], time: number, keytime: number) {\n    const prevEntry = entries[entries.length - 1];\n\n    (!prevEntry || prevEntry[0] !== time || prevEntry[1] !== keytime) &&\n        entries.push([toFixed(time), toFixed(keytime)]);\n}\nexport function getEntries(times: number[], states: AnimatorState[]) {\n    let entries = times.map(time => ([time, time]));\n    let nextEntries = [];\n\n    states.forEach(state => {\n        const iterationCount = state[ITERATION_COUNT] as number;\n        const delay = state[DELAY];\n        const playSpeed = state[PLAY_SPEED];\n        const direction = state[DIRECTION];\n        const intCount = Math.ceil(iterationCount);\n        const currentDuration = entries[entries.length - 1][0];\n        const length = entries.length;\n        const lastTime = currentDuration * iterationCount;\n\n        for (let i = 0; i < intCount; ++i) {\n            const isReverse =\n                direction === REVERSE ||\n                direction === ALTERNATE && i % 2 ||\n                direction === ALTERNATE_REVERSE && !(i % 2);\n\n            for (let j = 0; j < length; ++j) {\n                const entry = entries[isReverse ? length - j - 1 : j];\n                const time = entry[1];\n                const currentTime = currentDuration * i + (isReverse ? currentDuration - entry[0] : entry[0]);\n                const prevEntry = entries[isReverse ? length - j : j - 1];\n\n                if (currentTime > lastTime) {\n                    if (j !== 0) {\n                        const prevTime = currentDuration * i +\n                            (isReverse ? currentDuration - prevEntry[0] : prevEntry[0]);\n                        const divideTime = dotNumber(prevEntry[1], time, lastTime - prevTime, currentTime - lastTime);\n\n                        addEntry(nextEntries, (delay + currentDuration * iterationCount) / playSpeed, divideTime);\n                    }\n                    break;\n                } else if (\n                    currentTime === lastTime\n                    && nextEntries.length\n                    && nextEntries[nextEntries.length - 1][0] === lastTime + delay\n                ) {\n                    break;\n                }\n                addEntry(nextEntries, (delay + currentTime) / playSpeed, time);\n            }\n        }\n        // delay time\n        delay && nextEntries.unshift([0, nextEntries[0][1]]);\n\n        entries = nextEntries;\n        nextEntries = [];\n    });\n\n    return entries;\n}\n/**\n* manage Frame Keyframes and play keyframes.\n* @extends Animator\n* @example\nconst item = new SceneItem({\n\t0: {\n\t\tdisplay: \"none\",\n\t},\n\t1: {\n\t\tdisplay: \"block\",\n\t\topacity: 0,\n\t},\n\t2: {\n\t\topacity: 1,\n\t}\n});\n*/\nclass SceneItem extends Animator<SceneItemOptions, SceneItemState, SceneItemEvents> {\n    public times: number[] = [];\n    public items: IObject<Frame> = {};\n    public nameMap = new OrderMap(NAME_SEPARATOR);\n    public elements: AnimateElement[] = [];\n    public styled: StyledInjector;\n    public styledInjector: InjectResult;\n    public temp: Frame;\n    private needUpdate: boolean = true;\n    private target: any;\n    private targetFunc: (frame: Frame) => void;\n\n    /**\n      * @param - properties\n      * @param - options\n      * @example\n      const item = new SceneItem({\n          0: {\n              display: \"none\",\n          },\n          1: {\n              display: \"block\",\n              opacity: 0,\n          },\n          2: {\n              opacity: 1,\n          }\n      });\n       */\n    constructor(properties?: any, options?: Partial<SceneItemOptions>) {\n        super();\n        this.load(properties, options);\n    }\n    public getDuration() {\n        const times = this.times;\n        const length = times.length;\n\n        return (length === 0 ? 0 : times[length - 1]) || this.state[DURATION];\n    }\n    /**\n      * get size of list\n      * @return {Number} length of list\n      */\n    public size() {\n        return this.times.length;\n    }\n    public setDuration(duration: number) {\n        if (!duration) {\n            return this;\n        }\n        const originalDuration = this.getDuration();\n\n        if (originalDuration > 0) {\n            const ratio = duration / originalDuration;\n            const { times, items } = this;\n            const obj: IObject<Frame> = {};\n\n            this.times = times.map(time => {\n                const time2 = toFixed(time * ratio);\n\n                obj[time2] = items[time];\n\n                return time2;\n            });\n            this.items = obj;\n        } else {\n            this.newFrame(duration);\n        }\n        return this;\n    }\n    public setId(id?: number | string) {\n        const state = this.state;\n        const elements = this.elements;\n        const length = elements.length;\n\n        state.id = id || makeId(!!length);\n\n        if (length && !state[SELECTOR]) {\n            const sceneId = toId(this.getId());\n\n            state[SELECTOR] = `[${DATA_SCENE_ID}=\"${sceneId}\"]`;\n            elements.forEach(element => {\n                element.setAttribute(DATA_SCENE_ID, sceneId);\n            });\n        }\n        return this;\n    }\n\n    /**\n      * Set properties to the sceneItem at that time\n      * @param {Number} time - time\n      * @param {...String|Object} [properties] - property names or values\n      * @return {SceneItem} An instance itself\n      * @example\n  item.set(0, \"a\", \"b\") // item.getFrame(0).set(\"a\", \"b\")\n  console.log(item.get(0, \"a\")); // \"b\"\n      */\n    public set(time: any, ...args: any[]) {\n        if (isSceneItem(time)) {\n            return this.set(0, time);\n        } else if (isArray(time)) {\n            const length = time.length;\n\n            for (let i = 0; i < length; ++i) {\n                const t = length === 1 ? 0 : this.getUnitTime(`${i / (length - 1) * 100}%`);\n\n                this.set(t, time[i]);\n            }\n        } else if (isObject(time)) {\n            for (const t in time) {\n                const value = time[t];\n\n                splitComma(t).forEach(eachTime => {\n                    const realTime = this.getUnitTime(eachTime);\n\n                    if (isNaN(realTime)) {\n                        getNames(value, [eachTime]).forEach(names => {\n                            const innerValue = getValueByNames(names.slice(1), value);\n                            const arr = isArray(innerValue) ?\n                                innerValue : [getValueByNames(names, this.target), innerValue];\n                            const length = arr.length;\n\n                            for (let i = 0; i < length; ++i) {\n                                this.newFrame(`${i / (length - 1) * 100}%`).set(...names, arr[i]);\n                            }\n                        });\n                    } else {\n                        this.set(realTime, value);\n                    }\n                });\n            }\n        } else if (!isUndefined(time)) {\n            const value = args[0];\n\n            splitComma(time + \"\").forEach(eachTime => {\n                const realTime = this.getUnitTime(eachTime);\n\n                if (isSceneItem(value)) {\n                    const delay = value.getDelay();\n                    const frames = value.toObject(!this.hasFrame(realTime + delay));\n                    const duration = value.getDuration();\n                    const direction = value.getDirection();\n                    const isReverse = direction.indexOf(\"reverse\") > -1;\n\n                    for (const frameTime in frames) {\n                        const nextTime = isReverse ? duration - parseFloat(frameTime) : parseFloat(frameTime);\n                        this.set(realTime + nextTime, frames[frameTime]);\n                    }\n                } else if (args.length === 1 && isArray(value)) {\n                    value.forEach((item: any) => {\n                        this.set(realTime, item);\n                    });\n                } else {\n                    const frame = this.newFrame(realTime);\n\n                    frame.set(...args);\n                }\n            });\n        }\n        this.needUpdate = true;\n        return this;\n    }\n    /**\n      * Get properties of the sceneItem at that time\n      * @param {Number} time - time\n      * @param {...String|Object} args property's name or properties\n      * @return {Number|String|PropertyObejct} property value\n      * @example\n  item.get(0, \"a\"); // item.getFrame(0).get(\"a\");\n  item.get(0, \"transform\", \"translate\"); // item.getFrame(0).get(\"transform\", \"translate\");\n      */\n    public get(time: string | number, ...args: NameType[]) {\n        const frame = this.getFrame(time);\n\n        return frame && frame.get(...args);\n    }\n    /**\n      * get properties orders\n      * @param - property names\n      * @example\n      item.getOrders([\"display\"]) // => []\n      item.getOrders([\"transform\"]) // => [\"translate\", \"scale\"]\n      */\n    public getOrders(names: NameType[]): NameType[] | undefined {\n        this.needUpdate && this.update();\n\n        return this.nameMap.get(names);\n    }\n    /**\n      * set properties orders\n      * @param - property names\n      * @param - orders\n      * @example\n      item.getOrders([\"transform\"]) // => [\"translate\", \"scale\"]\n      item.setOrders([\"transform\"], [\"scale\", \"tralsate\"])\n      */\n    public setOrders(names: NameType[], orders: NameType[]): NameType[] {\n        this.needUpdate && this.update();\n\n        const result = this.nameMap.set(names, orders);\n\n        this.updateFrameOrders();\n\n        return result;\n    }\n    /**\n      * get properties order object\n      * @example\n      console.log(item.getOrderObject());\n      */\n     public getOrderObject() {\n        return this.nameMap.getObject();\n    }\n    /**\n      * set properties orders object\n      * @param - properties orders object\n      * @example\n      item.setOrderObject({\n          \"\": [\"transform\"],\n          \"transform\": [\"scale\", \"tralsate\"],\n      });\n      */\n    public setOrderObject(obj: IObject<NameType[]>) {\n        this.nameMap.setObject(obj);\n\n        this.updateFrameOrders();\n    }\n    public remove(time: string | number, ...args: any[]): this;\n    /**\n      * remove properties to the sceneItem at that time\n      * @param {Number} time - time\n      * @param {...String|Object} [properties] - property names or values\n      * @return {SceneItem} An instance itself\n      * @example\n  item.remove(0, \"a\");\n      */\n    public remove(time: string | number, ...args: NameType[]) {\n        if (args.length) {\n            const frame = this.getFrame(time);\n\n            frame && frame.remove(...args);\n        } else {\n            this.removeFrame(time);\n        }\n        this.needUpdate = true;\n        return this;\n    }\n    /**\n      * Append the item or object at the last time.\n      * @param - the scene item or item object\n      * @return An instance itself\n      * @example\n  item.append(new SceneItem({\n      0: {\n          opacity: 0,\n      },\n      1: {\n          opacity: 1,\n      }\n  }));\n  item.append({\n      0: {\n          opacity: 0,\n      },\n      1: {\n          opacity: 1,\n      }\n  });\n  item.set(item.getDuration(), {\n      0: {\n          opacity: 0,\n      },\n      1: {\n          opacity: 1,\n      }\n  });\n      */\n    public append(item: SceneItem | IObject<any>) {\n        if (isSceneItem(item)) {\n            this.set(this.getDuration(), item);\n        } else {\n            this.append(new SceneItem(item));\n        }\n        return this;\n    }\n    /**\n      * Push the front frames for the time and prepend the scene item or item object.\n      * @param - the scene item or item object\n      * @return An instance itself\n      */\n    public prepend(item: SceneItem | IObject<any>) {\n        if (isSceneItem(item)) {\n            const unshiftTime = item.getDuration() + item.getDelay();\n            const firstFrame = this.getFrame(0);\n            // remove first frame\n            this.removeFrame(0);\n            this.unshift(unshiftTime);\n            this.set(0, item);\n            this.set(unshiftTime + THRESHOLD, firstFrame);\n        } else {\n            this.prepend(new SceneItem(item));\n        }\n        return this;\n    }\n    /**\n     * Push out the amount of time.\n     * @param - time to push\n     * @example\n   item.get(0); // frame 0\n   item.unshift(3);\n   item.get(3) // frame 0\n     */\n    public unshift(time: number) {\n        const { times, items } = this;\n        const obj: IObject<Frame> = {};\n\n        this.times = times.map(t => {\n            const time2 = toFixed(time + t);\n\n            obj[time2] = items[t];\n            return time2;\n        });\n        this.items = obj;\n        return this;\n    }\n    /**\n     * Get the frames in the item in object form.\n     * @return {}\n     * @example\n item.toObject();\n // {0: {display: \"none\"}, 1: {display: \"block\"}}\n     */\n    public toObject(isStartZero = true): IObject<Frame> {\n        const obj: IObject<Frame> = {};\n        const delay = this.getDelay();\n\n        this.forEach((frame: Frame, time: number) => {\n            obj[(!time && !isStartZero ? THRESHOLD : 0) + delay + time] = frame.clone();\n        });\n        return obj;\n    }\n    /**\n     * Specifies an element to synchronize items' keyframes.\n     * @param {string} selectors - Selectors to find elements in items.\n     * @return {SceneItem} An instance itself\n     * @example\nitem.setSelector(\"#id.class\");\n     */\n    public setSelector(target: string | boolean | ((id: number | string, index: number) => string | AnimateElement)) {\n        if (isFunction(target)) {\n            this.setElement(target(this.getId(), 0));\n        } else {\n            this.setElement(target);\n        }\n        return this;\n    }\n    /**\n     * Get the elements connected to SceneItem.\n     */\n    public getElements(): AnimateElement[] {\n        return this.elements;\n    }\n    /**\n     * Specifies an element to synchronize item's keyframes.\n     * @param - elements to synchronize item's keyframes.\n     * @param - Make sure that you have peusdo.\n     * @return {SceneItem} An instance itself\n     * @example\nitem.setElement(document.querySelector(\"#id.class\"));\nitem.setElement(document.querySelectorAll(\".class\"));\n     */\n    public setElements(target: boolean | string | AnimateElement | IArrayFormat<AnimateElement>): this {\n        return this.setElement(target);\n    }\n    /**\n     * Specifies an element to synchronize item's keyframes.\n     * @param - elements to synchronize item's keyframes.\n     * @param - Make sure that you have peusdo.\n     * @return {SceneItem} An instance itself\n     * @example\nitem.setElement(document.querySelector(\"#id.class\"));\nitem.setElement(document.querySelectorAll(\".class\"));\n     */\n    public setElement(target: boolean | string | AnimateElement | IArrayFormat<AnimateElement>) {\n        const state = this.state;\n        let elements: AnimateElement[] = [];\n\n        if (!target) {\n            return this;\n        } else if (target === true || isString(target)) {\n            const selector = target === true ? `${state.id}` : target;\n            const matches = /([\\s\\S]+)(:+[a-zA-Z]+)$/g.exec(selector);\n\n            elements = toArray($(matches ? matches[1] : selector, true));\n            state[SELECTOR] = selector;\n        } else {\n            elements = (target instanceof Element) ? [target] : toArray(target);\n        }\n        if (!elements.length) {\n            return this;\n        }\n        this.elements = elements;\n        this.setId(this.getId());\n        this.target = elements[0].style;\n        this.targetFunc = (frame: Frame) => {\n            const attributes = frame.get(\"attribute\");\n\n            if (attributes) {\n                for (const name in attributes) {\n                    elements.forEach(el => {\n                        el.setAttribute(name, attributes[name]);\n                    });\n                }\n            }\n            if (frame.has(\"html\")) {\n                const html = frame.get(\"html\");\n\n                elements.forEach(el => {\n                    el.innerHTML = html;\n                });\n            }\n            const cssText = frame.toCSSText();\n\n            if (state.cssText !== cssText) {\n                state.cssText = cssText;\n\n                elements.forEach(el => {\n                    el.style.cssText += cssText;\n                });\n                return frame;\n            }\n        };\n        return this;\n    }\n    public setTarget(target: any): this {\n        this.target = target;\n        this.targetFunc = (frame: Frame) => {\n            const obj = frame.get();\n\n            for (const name in obj) {\n                target[name] = obj[name];\n            }\n        };\n        return this;\n    }\n    /**\n      * add css styles of items's element to the frame at that time.\n      * @param - Time to synchronize and set css\n      * @param - elements to synchronize item's keyframes.\n      * @return {SceneItem} An instance itself\n      * @example\n  item.setElement(document.querySelector(\"#id.class\"));\n  item.setCSS(0, [\"opacity\"]);\n  item.setCSS(0, [\"opacity\", \"width\", \"height\"]);\n      */\n    public setCSS(time: number, properties: string[] = []) {\n        this.set(time, fromCSS(this.elements, properties));\n        return this;\n    }\n    public setTime(time: number | string, isTick?: boolean, isParent?: boolean, parentEasing?: EasingType) {\n        super.setTime(time, isTick, isParent, () => {\n            const iterationTime = this.getIterationTime();\n            const easing = this.getEasing() || parentEasing;\n            const frame = this.getNowFrame(iterationTime, easing);\n            const currentTime = this.getTime();\n\n            this.temp = frame;\n            /**\n             * This event is fired when timeupdate and animate.\n             * @event SceneItem#animate\n             * @param {Number} param.currentTime The total time that the animator is running.\n             * @param {Number} param.time The iteration time during duration that the animator is running.\n             * @param {Frame} param.frame frame of that time.\n             */\n            this.trigger(\"animate\", {\n                frame,\n                currentTime,\n                time: iterationTime,\n            });\n            this.targetFunc && this.targetFunc(frame);\n        });\n        return this;\n    }\n    /**\n      * update property names used in frames.\n      * @return {SceneItem} An instance itself\n      * @example\n  item.update();\n      */\n    public update() {\n        const prevNameMap = this.nameMap;\n        const names = {};\n        this.forEach(frame => {\n            updateFrame(names, frame.properties);\n        });\n\n        const nameMap = new OrderMap(NAME_SEPARATOR);\n\n        function pushKeys(map: IObject<any>, stack: NameType[]) {\n            const keys = getKeys(map);\n\n            sortOrders(keys, prevNameMap.get(stack));\n\n            nameMap.set(stack, keys);\n            keys.forEach(key => {\n                const nextMap = map[key];\n                if (isObject(nextMap)) {\n                    pushKeys(nextMap, [...stack, key]);\n                }\n            });\n        }\n        pushKeys(names, []);\n\n        this.nameMap = nameMap;\n\n        this.forEach(frame => {\n            frame.setOrderObject(nameMap.orderMap);\n        });\n        this.needUpdate = false;\n        return this;\n    }\n    /**\n      * Create and add a frame to the sceneItem at that time\n      * @param {Number} time - frame's time\n      * @return {Frame} Created frame.\n      * @example\n  item.newFrame(time);\n      */\n    public newFrame(time: string | number) {\n        let frame = this.getFrame(time);\n\n        if (frame) {\n            return frame;\n        }\n        frame = new Frame();\n\n        this.setFrame(time, frame);\n        return frame;\n    }\n    /**\n      * Add a frame to the sceneItem at that time\n      * @param {Number} time - frame's time\n      * @return {SceneItem} An instance itself\n      * @example\n  item.setFrame(time, frame);\n      */\n    public setFrame(time: string | number, frame: Frame) {\n        const realTime = this.getUnitTime(time);\n\n        this.items[realTime] = frame;\n        addTime(this.times, realTime);\n        this.needUpdate = true;\n        return this;\n    }\n    public getFrame(time: number | string, ...names: any[]): Frame;\n    /**\n      * get sceneItem's frame at that time\n      * @param {Number} time - frame's time\n      * @return {Frame} sceneItem's frame at that time\n      * @example\n  const frame = item.getFrame(time);\n      */\n    public getFrame(time: number | string) {\n        return this.items[this.getUnitTime(time)];\n    }\n    public removeFrame(time: number | string, ...names: any[]): this;\n    /**\n      * remove sceneItem's frame at that time\n      * @param - frame's time\n      * @return {SceneItem} An instance itself\n      * @example\n  item.removeFrame(time);\n      */\n    public removeFrame(time: number | string) {\n        const realTime = this.getUnitTime(time);\n        const items = this.items;\n        const index = this.times.indexOf(realTime);\n\n        delete items[realTime];\n\n        // remove time\n        if (index > -1) {\n            this.times.splice(index, 1);\n        }\n        this.needUpdate = true;\n        return this;\n    }\n    /**\n      * check if the item has a frame at that time\n      * @param {Number} time - frame's time\n      * @return {Boolean} true: the item has a frame // false: not\n      * @example\n  if (item.hasFrame(10)) {\n      // has\n  } else {\n      // not\n  }\n      */\n    public hasFrame(time: number | string) {\n        return this.getUnitTime(time) in this.items;\n    }\n    /**\n      * Check if keyframes has propery's name\n      * @param - property's time\n      * @return {boolean} true: if has property, false: not\n      * @example\n    item.hasName([\"transform\", \"translate\"]); // true or not\n      */\n    public hasName(args: string[]) {\n        this.needUpdate && this.update();\n        return !!this.nameMap.get(args);\n    }\n    /**\n      * merge frame of the previous time at the next time.\n    * @param - The time of the frame to merge\n    * @param - The target frame\n      * @return {SceneItem} An instance itself\n      * @example\n  // getFrame(1) contains getFrame(0)\n  item.merge(0, 1);\n      */\n    public mergeFrame(time: number | string, frame: Frame) {\n        if (frame) {\n            const toFrame = this.newFrame(time);\n\n            toFrame.merge(frame);\n        }\n        return this;\n    }\n    /**\n      * Get frame of the current time\n      * @param {Number} time - the current time\n      * @param {function} easing - the speed curve of an animation\n      * @return {Frame} frame of the current time\n      * @example\n  let item = new SceneItem({\n      0: {\n          display: \"none\",\n      },\n      1: {\n          display: \"block\",\n          opacity: 0,\n      },\n      2: {\n          opacity: 1,\n      }\n  });\n  // opacity: 0.7; display:\"block\";\n  const frame = item.getNowFrame(1.7);\n      */\n    public getNowFrame(time: number, parentEasing?: EasingType, isAccurate?: boolean) {\n        this.needUpdate && this.update();\n        const frame = new Frame();\n        const [left, right] = getNearTimeIndex(this.times, time);\n        let realEasing = this.getEasing() || parentEasing;\n        let nameMap = this.nameMap;\n\n        if (this.hasName([TIMING_FUNCTION])) {\n            const nowEasing = this.getNowValue(time, [TIMING_FUNCTION], left, right, false, 0, true);\n\n            isFunction(nowEasing) && (realEasing = nowEasing);\n        }\n        if (isAccurate) {\n            const prevFrame = this.getFrame(time);\n            const prevOrderMap = prevFrame.orderMap.filter([], orders => {\n                return prevFrame.has(...orders);\n            });\n\n            for (const name in ROLES) {\n                const orders = nameMap.get([name]);\n                if (prevOrderMap.get([name]) && orders) {\n                    prevOrderMap.set([name], orders);\n                }\n            }\n            nameMap = prevOrderMap;\n        }\n        const names = nameMap.gets([]);\n\n        frame.setOrderObject(nameMap.orderMap);\n        names.forEach(properties => {\n            const value = this.getNowValue(time, properties, left, right, isAccurate, realEasing, isFixed(properties));\n\n            if (isUndefined(value)) {\n                return;\n            }\n            frame.set(properties, value);\n        });\n        return frame;\n    }\n    /**\n     * Get the current computed frame.\n     * (If needUpdate is true, get a new computed frame, not the temp that has already been saved.)\n     */\n    public getCurrentFrame(needUpdate?: boolean, parentEasing?: EasingType): Frame {\n        const iterationTime = this.getIterationTime();\n\n        const frame = needUpdate || this.needUpdate || !this.temp\n            ? this.getComputedFrame(iterationTime, parentEasing)\n            : this.temp;\n\n        this.temp = frame;\n\n        return frame;\n    }\n    /**\n     * Get the computed frame corresponding to the time.\n     */\n    public getComputedFrame(time: number, parentEasing?: EasingType, isAccurate?: boolean): Frame {\n        return this.getNowFrame(time, parentEasing, isAccurate);\n    }\n    public load(properties: any = {}, options = properties.options) {\n        options && this.setOptions(options);\n\n        if (isArray(properties)) {\n            this.set(properties);\n        } else if (properties.keyframes) {\n            this.set(properties.keyframes);\n        } else {\n            for (const time in properties) {\n                if (time !== \"options\") {\n                    this.set({\n                        [time]: properties[time],\n                    });\n                }\n            }\n        }\n        if (options && options[DURATION]) {\n            this.setDuration(options[DURATION]);\n        }\n        return this;\n    }\n    /**\n       * clone SceneItem.\n       * @return {SceneItem} An instance of clone\n       * @example\n       * item.clone();\n       */\n    public clone() {\n        const item = new SceneItem();\n\n        item.setOptions(this.state);\n        item.setOrderObject(this.nameMap.orderMap);\n\n        this.forEach((frame: Frame, time: number) => {\n            item.setFrame(time, frame.clone());\n        });\n        return item;\n    }\n    /**\n       * executes a provided function once for each scene item.\n       * @param - Function to execute for each element, taking three arguments\n       * @return {Keyframes} An instance itself\n       */\n    public forEach(callback: (item: Frame, time: number, items: IObject<Frame>) => void) {\n        const times = this.times;\n        const items = this.items;\n\n        times.forEach(time => {\n            callback(items[time], time, items);\n        });\n        return this;\n    }\n    public setOptions(options: Partial<SceneItemOptions> = {}) {\n        super.setOptions(options);\n        const { id, selector, elements, element, target } = options;\n\n        id && this.setId(id);\n        if (target) {\n            this.setTarget(target);\n        } else if (selector) {\n            this.setSelector(selector);\n        } else if (elements || element) {\n            this.setElement(elements || element);\n        }\n        return this;\n    }\n    public toCSS(\n        playCondition: PlayCondition = { className: START_ANIMATION },\n        parentDuration = this.getDuration(), states: AnimatorState[] = []) {\n        const itemState = this.state;\n        const selector = itemState[SELECTOR];\n\n        if (!selector) {\n            return \"\";\n        }\n        const originalDuration = this.getDuration();\n        itemState[DURATION] = originalDuration;\n        states.push(itemState);\n\n        const reversedStates = toArray(states).reverse();\n        const id = toId(getRealId(this));\n        const superParent = states[0];\n        const infiniteIndex = findIndex(reversedStates, state => {\n            return state[ITERATION_COUNT] === INFINITE || !isFinite(state[DURATION]);\n        }, states.length - 1);\n        const finiteStates = reversedStates.slice(0, infiniteIndex);\n        const duration = parentDuration || finiteStates.reduce((prev, cur) => {\n            return (cur[DELAY] + prev * (cur[ITERATION_COUNT] as number)) / cur[PLAY_SPEED];\n        }, originalDuration);\n        const delay = reversedStates.slice(infiniteIndex).reduce((prev, cur) => {\n            return (prev + cur[DELAY]) / cur[PLAY_SPEED];\n        }, 0);\n        const easingName = find(reversedStates, state => (state[EASING] && state[EASING_NAME]), itemState)[EASING_NAME];\n        const iterationCount = reversedStates[infiniteIndex][ITERATION_COUNT];\n        const fillMode = superParent[FILL_MODE];\n        const direction = reversedStates[infiniteIndex][DIRECTION];\n        const cssText = makeAnimationProperties({\n            fillMode,\n            direction,\n            iterationCount,\n            delay: `${delay}s`,\n            name: `${PREFIX}KEYFRAMES_${id}`,\n            duration: `${duration / superParent[PLAY_SPEED]}s`,\n            timingFunction: easingName,\n        });\n        const selectors = splitComma(selector).map(sel => {\n            const matches = /([\\s\\S]+)(:+[a-zA-Z]+)$/g.exec(sel);\n\n            if (matches) {\n                return [matches[1], matches[2]];\n            } else {\n                return [sel, \"\"];\n            }\n        });\n        const className = playCondition.className;\n        const selectorCallback = playCondition.selector;\n        const preselector = isFunction(selectorCallback) ? selectorCallback(this, selector) : selectorCallback;\n\n        return `\n    ${preselector || selectors.map(([sel, peusdo]) => `${sel}.${className}${peusdo}`)} {${cssText}}\n    ${selectors.map(([sel, peusdo]) => `${sel}.${PAUSE_ANIMATION}${peusdo}`)} {${ANIMATION}-play-state: paused;}\n    @${KEYFRAMES} ${PREFIX}KEYFRAMES_${id}{${this._toKeyframes(duration, finiteStates, direction)}}`;\n    }\n    /**\n     * Export the CSS of the items to the style.\n     * @param - Add a selector or className to play.\n     * @return {SceneItem} An instance itself\n     */\n    public exportCSS(\n        playCondition?: PlayCondition,\n        duration?: number, options?: AnimatorState[]) {\n        if (!this.elements.length) {\n            return \"\";\n        }\n        const css = this.toCSS(playCondition, duration, options);\n        const isParent = options && !isUndefined(options[ITERATION_COUNT]);\n\n        if (!isParent) {\n            if (this.styledInjector) {\n                this.styledInjector.destroy();\n                this.styledInjector = null;\n            }\n            this.styled = styled(css);\n            this.styledInjector = this.styled.inject(this.getAnimationElement(), { original: true });\n        }\n        return this;\n    }\n    public pause() {\n        super.pause();\n        isPausedCSS(this) && this.pauseCSS();\n        return this;\n    }\n    public pauseCSS() {\n        this.elements.forEach(element => {\n            addClass(element, PAUSE_ANIMATION);\n        });\n        return this;\n    }\n    public endCSS() {\n        this.elements.forEach(element => {\n            removeClass(element, PAUSE_ANIMATION);\n            removeClass(element, START_ANIMATION);\n        });\n        setPlayCSS(this, false);\n        return this;\n    }\n    public end() {\n        isEndedCSS(this) && this.endCSS();\n        super.end();\n        return this;\n    }\n    /**\n      * Play using the css animation and keyframes.\n      * @param - Check if you want to export css.\n      * @param [playClassName=\"startAnimation\"] - Add a class name to play.\n      * @param - The shorthand properties for six of the animation properties.\n      * @see {@link https://www.w3schools.com/cssref/css3_pr_animation.asp}\n      * @example\n  item.playCSS();\n  item.playCSS(false, \"startAnimation\", {\n      direction: \"reverse\",\n      fillMode: \"forwards\",\n  });\n      */\n    public playCSS(isExportCSS = true, playClassName?: string, properties: object = {}) {\n        playCSS(this, isExportCSS, playClassName, properties);\n        return this;\n    }\n    public getAnimationElement(): AnimateElement {\n        return this.elements[0];\n    }\n    public addPlayClass(isPaused: boolean, playClassName?: string, properties: object = {}) {\n        const elements = this.elements;\n        const length = elements.length;\n        const cssText = makeAnimationProperties(properties);\n\n        if (!length) {\n            return;\n        }\n        if (isPaused) {\n            elements.forEach(element => {\n                removeClass(element, PAUSE_ANIMATION);\n            });\n        } else {\n            elements.forEach(element => {\n                element.style.cssText += cssText;\n\n                if (hasClass(element, START_ANIMATION)) {\n                    removeClass(element, START_ANIMATION);\n                }\n            });\n            elements.forEach(element => {\n                element.clientWidth;\n            });\n            elements.forEach(element => {\n                addClass(element, START_ANIMATION);\n            });\n        }\n        return elements[0];\n    }\n    /**\n      * Clear All Frames\n      * @return {SceneItem} An instance itself\n      */\n    public clear() {\n        this.times = [];\n        this.items = {};\n        this.nameMap = new OrderMap(NAME_SEPARATOR);\n\n        if (this.styledInjector) {\n            this.styledInjector.destroy();\n        }\n        this.styled = null;\n        this.styledInjector = null;\n        this.temp = null;\n        this.needUpdate = true;\n        return this;\n    }\n    public getNowValue(\n        time: number,\n        properties: NameType[],\n        left?: number,\n        right?: number,\n        isAccurate?: boolean,\n        easing?: EasingType,\n        usePrevValue?: boolean,\n    ) {\n        const times = this.times;\n        const length = times.length;\n\n        let prevTime: number;\n        let nextTime: number;\n        let prevFrame: Frame;\n        let nextFrame: Frame;\n        const isUndefinedLeft = isUndefined(left);\n        const isUndefinedRight = isUndefined(right);\n        if (isUndefinedLeft || isUndefinedRight) {\n            const indicies = getNearTimeIndex(times, time);\n            isUndefinedLeft && (left = indicies[0]);\n            isUndefinedRight && (right = indicies[1]);\n        }\n\n        for (let i = left; i >= 0; --i) {\n            const frame = this.getFrame(times[i]);\n\n            if (frame.has(...properties)) {\n                prevTime = times[i];\n                prevFrame = frame;\n                break;\n            }\n        }\n        const prevValue = prevFrame && prevFrame.raw(...properties);\n\n        if (isAccurate && !isRole([properties[0]])) {\n            return prevTime === time ? prevValue : undefined;\n        }\n        if (usePrevValue) {\n            return prevValue;\n        }\n        for (let i = right; i < length; ++i) {\n            const frame = this.getFrame(times[i]);\n\n            if (frame.has(...properties)) {\n                nextTime = times[i];\n                nextFrame = frame;\n                break;\n            }\n        }\n        const nextValue = nextFrame && nextFrame.raw(...properties);\n\n        if (!prevFrame || isUndefined(prevValue)) {\n            return nextValue;\n        }\n        if (!nextFrame || isUndefined(nextValue) || prevValue === nextValue) {\n            return prevValue;\n        }\n        return dotValue(time, Math.max(prevTime, 0), nextTime, prevValue, nextValue, easing);\n    }\n    private _toKeyframes(duration: number, states: AnimatorState[], direction: DirectionType) {\n        const frames: IObject<string> = {};\n        const times = this.times.slice();\n\n        if (!times.length) {\n            return \"\";\n        }\n        const originalDuration = this.getDuration();\n        (!this.getFrame(0)) && times.unshift(0);\n        (!this.getFrame(originalDuration)) && times.push(originalDuration);\n        const entries = getEntries(times, states);\n        const lastEntry = entries[entries.length - 1];\n\n        // end delay time\n        lastEntry[0] < duration && addEntry(entries, duration, lastEntry[1]);\n        let prevTime = -1;\n\n        return entries.map(([time, keytime]) => {\n            if (!frames[keytime]) {\n                frames[keytime] =\n                    (!this.hasFrame(keytime) || keytime === 0 || keytime === originalDuration ?\n                        this.getNowFrame(keytime) : this.getNowFrame(keytime, 0, true)).toCSSText();\n            }\n\n            let frameTime = time / duration * 100;\n\n            if (frameTime - prevTime < THRESHOLD) {\n                frameTime += THRESHOLD;\n            }\n            prevTime = frameTime;\n            return `${Math.min(frameTime, 100)}%{\n                ${time === 0 && !isDirectionReverse(0, 1, direction) ? \"\" : frames[keytime]}\n            }`;\n        }).join(\"\");\n    }\n    private updateFrameOrders() {\n        const nameMap = this.nameMap.orderMap;\n\n        this.forEach(frame => {\n            frame.setOrderObject(nameMap);\n        });\n    }\n}\n\nexport default SceneItem;\n","import Animator from \"./Animator\";\nimport SceneItem from \"./SceneItem\";\nimport { SELECTOR, DURATION, DELAY, RUNNING, NAME_SEPARATOR } from \"./consts\";\nimport {\n    playCSS, getRealId, isPausedCSS,\n    isEndedCSS, setPlayCSS, isScene, flatSceneObject,\n    isSceneItem,\n} from \"./utils\";\nimport { isFunction, IS_WINDOW, IObject, $, IArrayFormat } from \"@daybrush/utils\";\nimport {\n    AnimateElement, SceneState, SceneOptions, EasingType,\n    AnimatorState, SceneItemOptions, PlayCondition,\n    NameType, SceneEvents, SelectorAllType\n} from \"./types\";\nimport Frame from \"./Frame\";\nimport OrderMap from \"order-map\";\nimport styled, { InjectResult, StyledInjector } from \"css-styled\";\n/**\n * manage sceneItems and play Scene.\n * @extends Animator\n * @sort 1\n */\nclass Scene extends Animator<SceneOptions, SceneState, SceneEvents> {\n    /**\n    * version info\n    * @type {string}\n    * @example\n    * Scene.VERSION // #__VERSION__#\n    */\n    public static VERSION: string = \"#__VERSION__#\";\n    public items: IObject<Scene | SceneItem> = {};\n    public orderMap = new OrderMap(NAME_SEPARATOR);\n    public styled: StyledInjector;\n    public styledInjector: InjectResult;\n    public temp: IObject<Frame>;\n    /**\n    * @param - properties\n    * @param - options\n    * @example\n    const scene = new Scene({\n      item1: {\n        0: {\n          display: \"none\",\n        },\n        1: {\n          display: \"block\",\n          opacity: 0,\n        },\n        2: {\n          opacity: 1,\n        },\n      },\n      item2: {\n        2: {\n          opacity: 1,\n        },\n      }\n    });\n      */\n    constructor(properties?: { options?: Partial<SceneOptions> } & IObject<any>, options?: Partial<SceneOptions>) {\n        super();\n        this.load(properties, options);\n    }\n    public getDuration() {\n        let time = 0;\n\n        this.forEach(item => {\n            time = Math.max(time, item.getTotalDuration() / item.getPlaySpeed());\n        });\n        return time || this.state[DURATION];\n    }\n    public setDuration(duration: number) {\n        const items = this.items;\n        const sceneDuration = this.getDuration();\n\n        if (duration === 0 || !isFinite(sceneDuration)) {\n            return this;\n        }\n        if (sceneDuration === 0) {\n            this.forEach(item => {\n                item.setDuration(duration);\n            });\n        } else {\n            const ratio = duration / sceneDuration;\n\n            this.forEach(item => {\n                item.setDelay(item.getDelay() * ratio);\n                item.setDuration(item.getDuration() * ratio);\n            });\n        }\n        super.setDuration(duration);\n        return this;\n    }\n    public getItem<T extends (Scene | SceneItem) = Scene | SceneItem>(name: number | string): T;\n    /**\n    * get item in scene by name\n    * @param - The item's name\n    * @return {Scene | SceneItem} item\n    * @example\n    const item = scene.getItem(\"item1\")\n    */\n    public getItem(name: number | string) {\n        return this.items[name];\n    }\n    /**\n    * create item in scene\n    * @param {} name - name of item to create\n    * @param {} options - The option object of SceneItem\n    * @return {} Newly created item\n    * @example\n    const item = scene.newItem(\"item1\")\n    */\n    public newItem(name: number | string, options: Partial<SceneItemOptions> = {}): Scene | SceneItem {\n        if (this.items[name]) {\n            return this.items[name];\n        }\n        const item = new SceneItem();\n\n        this.setItem(name, item);\n        item.setOptions(options);\n\n        return item;\n    }\n    /**\n    * remove item in scene\n    * @param - name of item to remove\n    * @return  An instance itself\n    * @example\n    const item = scene.newItem(\"item1\")\n\n    scene.removeItem(\"item1\");\n    */\n    public removeItem(name: number | string): this {\n        delete this.items[name];\n\n        this.orderMap.remove([name]);\n        return this;\n    }\n    /**\n    * add a sceneItem to the scene\n    * @param - name of item to create\n    * @param - sceneItem\n    * @example\n    const item = scene.newItem(\"item1\")\n    */\n    public setItem(name: number | string, item: Scene | SceneItem) {\n        item.setId(name);\n        this.items[name] = item;\n\n        this.orderMap.add([name]);\n        return this;\n    }\n    /**\n    * Get the current computed frames.\n    * (If needUpdate is true, get a new computed frames, not the temp that has already been saved.)\n    */\n    public getCurrentFrames(needUpdate?: boolean, parentEasing?: EasingType) {\n        const easing = this.getEasing() || parentEasing;\n        const frames: IObject<any> = {};\n\n        this.forEach(item => {\n            const id = item.getId();\n\n            if (isScene(item)) {\n                frames[id] = item.getCurrentFrames(needUpdate, easing);\n            } else {\n                frames[id] = item.getCurrentFrame(needUpdate, easing);\n            }\n        });\n        this.temp = frames;\n\n        return frames;\n    }\n    /**\n   * Get the current flatted computed frames.\n   * (If needUpdate is true, get a new computed frames, not the temp that has already been saved.)\n   * If there is a scene in the scene, you can get a flatted frame map.\n   * @example\n   * import Scene, { NAME_SEPARATOR } from \"scenejs\";\n   *\n   * {\n   *   \"a\": Frame,\n   *   \"b\": {\n   *     \"b1\": Frame,\n   *     \"b2\": Frame,\n   *   },\n   * }\n   * const frames = scene.getCurrentFrames();\n   * {\n   *   \"a\": Frame,\n   *   \"b_///_b1\": Frame,\n   *   \"b_///_b2\": Frame,\n   * }\n   * const frames = scene.getCurrentFlattedFrames();\n   *\n   */\n    public getCurrentFlattedFrames(needUpdate?: boolean, parentEasing?: EasingType): Record<string, Frame> {\n        const frames = this.getCurrentFrames(needUpdate, parentEasing);\n\n        return flatSceneObject(frames, NAME_SEPARATOR);\n    }\n    public setTime(time: number | string, isTick?: boolean, isParent?: boolean, parentEasing?: EasingType) {\n        super.setTime(time, isTick, isParent, () => {\n            const iterationTime = this.getIterationTime();\n            const easing = this.getEasing() || parentEasing;\n\n            this.forEach(item => {\n                item.setTime(iterationTime * item.getPlaySpeed() - item.getDelay(), isTick, true, easing);\n            });\n\n            const frames = this.getCurrentFrames(false, parentEasing);\n\n            /**\n             * This event is fired when timeupdate and animate.\n             * @event Scene#animate\n             * @param {object} param The object of data to be sent to an event.\n             * @param {number} param.currentTime The total time that the animator is running.\n             * @param {number} param.time The iteration time during duration that the animator is running.\n             * @param {object} param.frames frames of that time.\n             * @example\nconst scene = new Scene({\n    a: {\n        0: {\n            opacity: 0,\n        },\n        1: {\n            opacity: 1,\n        }\n    },\n    b: {\n        0: {\n            opacity: 0,\n        },\n        1: {\n            opacity: 1,\n        }\n    }\n}).on(\"animate\", e => {\n    console.log(e.frames);\n    // {a: Frame, b: Frame}\n    console.log(e.frames.a.get(\"opacity\"));\n});\n                 */\n            this.trigger(\"animate\", {\n                frames,\n                currentTime: this.getTime(),\n                time: iterationTime,\n            });\n        });\n        return this;\n    }\n    /**\n     * executes a provided function once for each scene item.\n     * @param - Function to execute for each element, taking three arguments\n     * @return {Scene} An instance itself\n     */\n    public forEach(\n        func: (\n            item: Scene | SceneItem,\n            id: string | number,\n            index: number,\n            items: IObject<Scene | SceneItem>,\n        ) => void,\n    ) {\n        const items = this.items;\n        this.getOrders().forEach((id, index) => {\n            func(items[id], id, index, items);\n        });\n        return this;\n    }\n    public toCSS(\n        playCondition?: PlayCondition,\n        duration: number = this.getDuration(), parentStates: AnimatorState[] = []) {\n        const totalDuration = !duration || !isFinite(duration) ? 0 : duration;\n        const styles: string[] = [];\n        const state = this.state;\n\n        state[DURATION] = this.getDuration();\n\n        this.forEach(item => {\n            styles.push(item.toCSS(playCondition, totalDuration, parentStates.concat(state)));\n        });\n        return styles.join(\"\");\n    }\n    /**\n     * Export the CSS of the items to the style.\n     * @param - Add a selector or className to play.\n     * @return {Scene} An instance itself\n     */\n    public exportCSS(\n        playCondition?: PlayCondition, duration?: number, parentStates?: AnimatorState[]) {\n        const css = this.toCSS(playCondition, duration, parentStates);\n\n        if (!parentStates || !parentStates.length) {\n            if (this.styledInjector) {\n                this.styledInjector.destroy();\n                this.styledInjector = null;\n            }\n            this.styled = styled(css);\n            this.styledInjector = this.styled.inject(this.getAnimationElement(), { original: true });\n            // && exportCSS(getRealId(this), css);\n        }\n        return this;\n    }\n    public append(item: SceneItem | Scene) {\n        item.setDelay(item.getDelay() + this.getDuration());\n        this.setItem(getRealId(item), item);\n    }\n    public pauseCSS() {\n        return this.forEach(item => {\n            item.pauseCSS();\n        });\n    }\n    public pause() {\n        super.pause();\n\n        isPausedCSS(this) && this.pauseCSS();\n        this.forEach(item => {\n            item.pause();\n        });\n        return this;\n    }\n    public endCSS() {\n        this.forEach(item => {\n            item.endCSS();\n        });\n        setPlayCSS(this, false);\n    }\n    public end() {\n        isEndedCSS(this) && this.endCSS();\n        super.end();\n        return this;\n    }\n    /**\n  * get item orders\n  * @example\n  scene.getOrders() // => [\"item1\", \"item2\"]\n  */\n    public getOrders(): NameType[] {\n        return this.orderMap.get([]) || [];\n    }\n    /**\n      * set item orders\n      * @param - orders\n      * @example\n      frame.setOrders([\"item2\", \"item1\"]) // => [\"item2\", \"item1\"]\n      */\n    public setOrders(orders: NameType[]): NameType[] {\n        return this.orderMap.set([], orders);\n    }\n    public getAnimationElement() {\n        let animtionElement: AnimateElement;\n\n        this.forEach(item => {\n            const el = item.getAnimationElement();\n\n            !animtionElement && (animtionElement = el);\n        });\n        return animtionElement;\n    }\n    public addPlayClass(isPaused: boolean, playClassName?: string, properties: object = {}) {\n        let animtionElement: AnimateElement;\n\n        this.forEach(item => {\n            const el = item.addPlayClass(isPaused, playClassName, properties);\n\n            !animtionElement && (animtionElement = el);\n        });\n        return animtionElement;\n    }\n    /**\n    * Play using the css animation and keyframes.\n    * @param - Check if you want to export css.\n    * @param [playClassName=\"startAnimation\"] - Add a class name to play.\n    * @param - The shorthand properties for six of the animation properties.\n    * @return {Scene} An instance itself\n    * @see {@link https://www.w3schools.com/cssref/css3_pr_animation.asp}\n    * @example\n    scene.playCSS();\n    scene.playCSS(false, {\n    direction: \"reverse\",\n    fillMode: \"forwards\",\n    });\n    */\n    public playCSS(isExportCSS = true, playClassName?: string, properties: Partial<AnimatorState> = {}) {\n        playCSS(this, isExportCSS, playClassName, properties);\n        return this;\n    }\n    public set(properties: any, ...args: any[]): this;\n    /**\n      * Set properties to the Scene.\n      * @param - properties\n      * @return An instance itself\n      * @example\nscene.set({\n    \".a\": {\n        0: {\n            opacity: 0,\n        },\n        1: {\n            opacity: 1,\n        },\n    },\n});\n// 0\nconsole.log(scene.getItem(\".a\").get(0, \"opacity\"));\n// 1\nconsole.log(scene.getItem(\".a\").get(1, \"opacity\"));\n      */\n    public set(properties: any) {\n        this.load(properties);\n        return this;\n    }\n    /**\n      * Clear All Items\n      * @return {Scene} An instance itself\n      */\n    public clear() {\n        this.finish();\n        this.items = {};\n        this.orderMap = new OrderMap(NAME_SEPARATOR);\n\n        if (this.styledInjector) {\n            this.styledInjector.destroy();\n        }\n        this.styled = null;\n        this.styledInjector = null;\n    }\n    public load(properties: any = {}, options = properties.options) {\n        if (!properties) {\n            return this;\n        }\n        const selector = options && options[SELECTOR] || this.state[SELECTOR];\n        for (const name in properties) {\n            if (name === \"options\") {\n                continue;\n            }\n            const object = properties[name];\n            let item;\n\n            if (isScene(object) || isSceneItem(object)) {\n                this.setItem(name, object);\n                item = object;\n            } else if (isFunction(object)) {\n                let elements: IArrayFormat<AnimateElement> = [];\n\n                if (selector && IS_WINDOW) {\n                    elements = $(\n                        `${isFunction(selector) ? selector(name) : name}`,\n                        true,\n                    );\n                }\n                const elementsLength = elements.length;\n                const length = elementsLength || (object as SelectorAllType).defaultCount || 0;\n                const scene = new Scene();\n\n                const ids: Array<string | number> = [];\n                for (let i = 0; i < length; ++i) {\n                    const element = elements[i];\n                    const subItem = scene.newItem(i) as SceneItem;\n\n                    subItem.setId().load(object(i, elements[i]));\n\n                    ids.push(subItem.getId());\n                    if (element) {\n                        subItem.setElement(element);\n                    }\n                }\n                if (!elementsLength) {\n                    let subElements: IArrayFormat<AnimateElement> = [];\n\n                    scene.state[SELECTOR] = (id: number) => {\n                        if (!subElements.length) {\n                            subElements = $(`${isFunction(selector) ? selector(name) : name}`, true);\n                        }\n\n                        return subElements[ids.indexOf(id)];\n                    };\n                }\n                this.setItem(name, scene);\n                continue;\n            } else {\n                item = this.newItem(name);\n                item.load(object);\n            }\n            selector && item.setSelector(selector);\n        }\n        this.setOptions(options);\n    }\n    public setOptions(options: Partial<SceneState> = {}): this {\n        super.setOptions(options);\n\n        const selector = options.selector;\n\n        if (selector) {\n            this.state[SELECTOR] = selector;\n        }\n        return this;\n    }\n    public setSelector(target?: string | boolean | ((id: number | string) => string | AnimateElement)) {\n        const state = this.state;\n        const selector = target === true ? state[SELECTOR] || true : target;\n\n        state[SELECTOR] = selector;\n        const isItFunction = isFunction(target);\n        if (selector) {\n            this.forEach((item, name) => {\n                item.setSelector(isItFunction ? (target as (id: number | string) => string)(name) : selector);\n            });\n        }\n        return this;\n    }\n    public start(delay: number = this.state[DELAY]): boolean {\n        const result = super.start(delay);\n\n        if (result) {\n            this.forEach(item => {\n                item.start(0);\n            });\n        } else {\n            this.forEach(item => {\n                item.setPlayState(RUNNING);\n            });\n        }\n        return result;\n    }\n}\n\nexport default Scene;\n","import { IObject } from \"@daybrush/utils\";\nimport Scene from \"./Scene\";\nimport SceneItem from \"./SceneItem\";\nimport { SceneOptions, SceneItemOptions } from \"./types\";\n\nexport function animate(properties?: IObject<any>, options?: Partial<SceneOptions>) {\n    return new Scene(properties, options).play();\n}\nexport function animateItem(properties?: IObject<any>, options?: Partial<SceneItemOptions>) {\n    return new SceneItem(properties, options).play();\n}\n","\nimport { ExtractNever } from \"@cfcs/core\";\nimport { getKeys, isFunction } from \"@daybrush/utils\";\nimport EventEmitter from \"@scena/event-emitter\";\nimport Animator from \"../Animator\";\nimport { AnimatorState } from \"../types\";\n\nexport function getMethodNames(classConstructor: new (...args: any[]) => any) {\n    const prototype = classConstructor.prototype;\n\n    return getKeys(prototype).filter(name => {\n        const descriptor = Object.getOwnPropertyDescriptor(prototype, name);\n\n        return !descriptor.get && !descriptor.set && isFunction(descriptor.value || prototype[name]);\n    });\n}\n\nconst EMITTER_METHODS = getMethodNames(EventEmitter);\n\nexport const ANIMATOR_METHODS = [\n    ...EMITTER_METHODS,\n    ...getMethodNames(Animator),\n];\n\nexport type ReactiveMethods<Instance> = ExtractNever<{\n    [key in (keyof Instance) & string]: Instance[key] extends (...args: any) => any ? Instance[key] : never;\n}>;\n\n/**\n * @typedef\n * @memberof Reactive\n */\nexport interface AnimatorReactiveState extends AnimatorState {\n    /**\n     * Total time the animation played\n     */\n    totalDuration: number;\n}\n","import { ReactiveObject, ReactiveAdapter, getObservers, computed, reactive } from \"@cfcs/core\";\nimport { isFunction } from \"@daybrush/utils\";\nimport Scene from \"../Scene\";\nimport SceneItem from \"../SceneItem\";\nimport { SceneOptions, SceneEvents, AnimatorState } from \"../types\";\nimport { isScene } from \"../utils\";\nimport { ANIMATOR_METHODS, getMethodNames, AnimatorReactiveState, ReactiveMethods } from \"./reactive\";\n\nexport const SCENE_METHODS = [\n    ...ANIMATOR_METHODS,\n    ...getMethodNames(Scene),\n];\n\n/**\n * @typedef\n * @memberof Reactive\n */\nexport interface SceneReactiveOptions {\n    options?: Partial<SceneOptions>;\n    [key: string | number]: any;\n}\n\n/**\n * @typedef\n * @memberof Reactive\n */\nexport type SceneReactiveProps = SceneReactiveOptions | Scene | (() => SceneReactiveOptions | Scene);\n\n/**\n * @typedef\n * @memberof Reactive\n */\nexport interface SceneReactiveData {\n    props: SceneReactiveProps;\n    options?: Partial<SceneOptions>;\n}\n\nexport type SceneReactiveMethods = ReactiveMethods<Scene>;\nexport type SceneReactiveInstance = ReactiveObject<AnimatorReactiveState> & SceneReactiveMethods & {\n    getInstance(): Scene;\n};\n\nexport const SCENE_REACTIVE: ReactiveAdapter<\n    SceneReactiveInstance,\n    AnimatorReactiveState,\n    keyof SceneReactiveMethods,\n    SceneReactiveData,\n    SceneEvents\n> = {\n    methods: SCENE_METHODS as Array<keyof SceneReactiveMethods>,\n    created(data: SceneReactiveData) {\n        const dataProps = data.props;\n        const dataObject = isFunction(dataProps) ? dataProps() : dataProps;\n        const scene = isScene(dataObject)\n            ? dataObject\n            : new Scene(dataObject, data.options);\n        const obj = scene.state as any as ReactiveObject<AnimatorState>;\n        const observers = getObservers(obj);\n\n        const totalDuration = computed(() => {\n            return scene.getTotalDuration();\n        });\n        const nextObj = {\n            totalDuration,\n            ...observers,\n            ...SCENE_METHODS.reduce((methodObject, cur) => {\n                methodObject[cur] = (...args) => {\n                    return scene[cur].call(scene, ...args);\n                };\n                return methodObject;\n            }, {}),\n            getInstance() {\n                return scene;\n            },\n        };\n\n        const nextReactiveObject = reactive(nextObj) as SceneReactiveInstance;\n\n        return nextReactiveObject;\n    },\n    mounted(data, inst) {\n        const scene = inst.getInstance();\n        const state = scene.state;\n        const selector = state.selector;\n\n        if (selector && !(state as any).__REACTIVE_MOUNTED__) {\n            inst.setSelector(selector);\n            (state as any).__REACTIVE_MOUNTED__ = true;\n            inst.forEach(function mountFlag(child: Scene | SceneItem) {\n                const childState = child.state;\n\n                if (childState.selector) {\n                    (childState as any).__REACTIVE_MOUNTED__ = true;\n                }\n                if (isScene(child)) {\n                    child.forEach(mountFlag);\n                }\n            });\n        }\n    },\n    on(inst, eventName, callback) {\n        inst.on(eventName, callback);\n    },\n    off(inst, eventName, callback) {\n        inst.off(eventName, callback);\n    },\n    destroy(inst) {\n        const scene = inst.getInstance();\n        const state = scene.state;\n\n        (state as any).__REACTIVE_MOUNTED__ = false;\n\n        inst.forEach(function unmountFlag(child: Scene | SceneItem) {\n            (child.state as any).__REACTIVE_MOUNTED__ = false;\n\n            if (isScene(child)) {\n                child.forEach(unmountFlag);\n            }\n        });\n    },\n};\n","import { ReactiveAdapter, ReactiveObject, getObservers, computed, reactive } from \"@cfcs/core\";\nimport { isFunction } from \"@daybrush/utils\";\nimport Scene from \"../Scene\";\nimport SceneItem from \"../SceneItem\";\nimport { SceneItemEvents, AnimatorState, SceneItemOptions } from \"../types\";\nimport { isSceneItem } from \"../utils\";\nimport { ANIMATOR_METHODS, getMethodNames, AnimatorReactiveState, ReactiveMethods } from \"./reactive\";\n\nexport const SCENE_ITEM_METHODS = [\n    ...ANIMATOR_METHODS,\n    ...getMethodNames(Scene),\n];\n\n/**\n * @typedef\n * @memberof Reactive\n */\nexport interface SceneItemReactiveOptions {\n    options?: Partial<SceneItemOptions>;\n    [key: string | number]: any;\n}\n\n/**\n * @typedef\n * @memberof Reactive\n */\nexport type SceneItemReactiveProps = SceneItemReactiveOptions\n    | SceneItem\n    | (() => SceneItemReactiveOptions | SceneItem);\n\n/**\n * @typedef\n * @memberof Reactive\n */\nexport interface SceneItemReactiveData {\n    props: SceneItemReactiveProps;\n    options?: Partial<SceneItemOptions>;\n}\n\nexport type SceneItemReactiveMethods = ReactiveMethods<Scene>;\nexport type SceneItemReactiveInstance = ReactiveObject<AnimatorReactiveState> & SceneItemReactiveMethods & {\n    getInstance(): SceneItem;\n};\n\nexport const SCENE_ITEM_REACTIVE: ReactiveAdapter<\n    SceneItemReactiveInstance,\n    AnimatorReactiveState,\n    keyof SceneItemReactiveMethods,\n    SceneItemReactiveData,\n    SceneItemEvents\n> = {\n    methods: SCENE_ITEM_METHODS as Array<keyof SceneItemReactiveMethods>,\n    created(data: SceneItemReactiveData) {\n        const dataProps = data.props;\n        const dataObject = isFunction(dataProps) ? dataProps() : dataProps;\n        const sceneItem = isSceneItem(dataObject)\n            ? dataObject\n            : new SceneItem(dataObject, data.options);\n        const obj = sceneItem.state as any as ReactiveObject<AnimatorState>;\n        const observers = getObservers(obj);\n        const totalDuration = computed(() => {\n            return sceneItem.getTotalDuration();\n        });\n        const nextObj = {\n            totalDuration,\n            ...observers,\n            ...SCENE_ITEM_METHODS.reduce((methodObject, cur) => {\n                methodObject[cur] = (...args) => {\n                    return sceneItem[cur].call(sceneItem, ...args);\n                };\n                return methodObject;\n            }, {}),\n            getInstance() {\n                return sceneItem;\n            },\n        };\n\n        const nextReactiveObject = reactive(nextObj) as SceneItemReactiveInstance;\n\n        return nextReactiveObject;\n    },\n    mounted(data, inst)  {\n        const item = inst.getInstance();\n        const state = item.state;\n        const selector = state.selector;\n\n        if (selector && !(state as any).__REACTIVE_MOUNTED__) {\n            inst.setSelector(selector);\n            (state as any).__REACTIVE_MOUNTED__ = true;\n        }\n    },\n    on(inst, eventName, callback) {\n        inst.on(eventName, callback);\n    },\n    off(inst, eventName, callback) {\n        inst.off(eventName, callback);\n    },\n    destroy(inst) {\n        const scene = inst.getInstance();\n        const state = scene.state;\n\n        (state as any).__REACTIVE_MOUNTED__ = false;\n        inst.finish();\n    },\n};\n","import { ReactiveAdapter, ReactiveObject, computed, reactive, observe, Observer, isObserver } from \"@cfcs/core\";\nimport { isFunction } from \"@daybrush/utils\";\nimport Frame from \"../Frame\";\nimport { isFrame } from \"../utils\";\nimport { ANIMATOR_METHODS, getMethodNames, ReactiveMethods } from \"./reactive\";\n\nexport const FRAME_METHODS = [\n    ...ANIMATOR_METHODS,\n    ...getMethodNames(Frame),\n];\n\n/**\n * @typedef\n * @memberof Reactive\n */\nexport type FrameReactiveData\n    = Observer<Frame> | Frame | string | Record<string, any>\n    | (() => (Observer<Frame> | Frame | string | Record<string, any>));\n\nexport type FrameReactiveMethods = ReactiveMethods<Frame>;\n\n/**\n * @typedef\n * @memberof Reactive\n */\nexport interface FrameReactiveState {\n    /**\n     * Returns the frame's cssText.\n     */\n    cssText: string;\n    /**\n     * Returns the frame's css object (kebab-case).\n     */\n    cssObject: Record<string, any>;\n    /**\n     * Returns an object in camel case type of frame. It can be used in React.\n     */\n    camelCasedCSSObject: Record<string, any>;\n}\n\nexport type FrameReactiveInstance = ReactiveObject<FrameReactiveState> & FrameReactiveMethods & {\n    getFrameObserver(): Observer<Frame>;\n    onUpdate(): void;\n};\n\nexport const FRAME_REACTIVE: ReactiveAdapter<\n    FrameReactiveInstance,\n    FrameReactiveState,\n    keyof FrameReactiveMethods,\n    FrameReactiveData,\n    {}\n> = {\n    methods: FRAME_METHODS as Array<keyof FrameReactiveMethods>,\n    created(data: FrameReactiveData) {\n        const nextObject = isFunction(data) ? data() : data;\n        const updateCount = observe(0);\n        let frame: Observer<Frame>;\n\n        if (isObserver(nextObject)) {\n            frame = nextObject;\n        } else {\n            frame = observe(isFrame(nextObject) ? nextObject : new Frame(nextObject));\n        }\n\n        const cssText = computed(() => {\n            frame.current;\n            updateCount.current;\n\n            return frame.current.toCSSText();\n        });\n        const cssObject = computed(() => {\n            frame.current;\n            cssText.current;\n\n            return frame.current.toCSSObject();\n        });\n        const camelCasedCSSObject = computed(() => {\n            frame.current;\n            cssText.current;\n\n            return frame.current.toCSSObject(true);\n        });\n\n        const onUpdate = () => {\n            ++updateCount.current;\n        };\n\n        frame.subscribe((currentFrame, prevFrame) => {\n            prevFrame.off(\"update\", onUpdate);\n            currentFrame.on(\"update\", onUpdate);\n        });\n        const nextReactiveObject = reactive({\n            cssText,\n            cssObject,\n            camelCasedCSSObject,\n            onUpdate,\n            ...FRAME_METHODS.reduce((obj, cur) => {\n                obj[cur] = (...args) => {\n                    const currentFrame = frame.current;\n\n                    return currentFrame?.[cur].call(currentFrame, ...args);\n                };\n                return obj;\n            }, {}),\n        }) as FrameReactiveInstance;\n\n        return nextReactiveObject;\n    },\n    destroy(inst) {\n        inst.off(\"update\", inst.onUpdate);\n    },\n};\n","import { observe, ReactiveAdapter } from \"@cfcs/core\";\nimport { isFunction } from \"@daybrush/utils\";\nimport Frame from \"../Frame\";\nimport SceneItem from \"../SceneItem\";\nimport { FrameReactiveInstance, FrameReactiveMethods, FrameReactiveState, FRAME_REACTIVE } from \"./Frame\";\n\nexport type NowFrameData = SceneItem | (() => SceneItem);\nexport const NOW_FRAME_REACTIVE = {\n    ...FRAME_REACTIVE,\n    created(data: NowFrameData) {\n        const nextObject = isFunction(data) ? data() : data;\n        const frame = observe(new Frame());\n\n        nextObject.on(\"animate\", e => {\n            frame.current = e.frame;\n        });\n\n        return FRAME_REACTIVE.created(frame);\n    },\n} as ReactiveAdapter<\n    FrameReactiveInstance,\n    FrameReactiveState,\n    keyof FrameReactiveMethods,\n    SceneItem,\n    {}\n>;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}