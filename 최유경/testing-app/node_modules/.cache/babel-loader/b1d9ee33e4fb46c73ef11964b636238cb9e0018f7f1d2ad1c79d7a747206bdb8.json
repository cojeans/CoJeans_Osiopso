{"ast":null,"code":"/*\nCopyright (c) 2015 NAVER Corp.\nname: @egjs/agent\nlicense: MIT\nauthor: NAVER Corp.\nrepository: git+https://github.com/naver/agent.git\nversion: 2.4.3\n*/\nfunction some(arr, callback) {\n  var length = arr.length;\n  for (var i = 0; i < length; ++i) {\n    if (callback(arr[i], i)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction find(arr, callback) {\n  var length = arr.length;\n  for (var i = 0; i < length; ++i) {\n    if (callback(arr[i], i)) {\n      return arr[i];\n    }\n  }\n  return null;\n}\nfunction getUserAgentString(agent) {\n  var userAgent = agent;\n  if (typeof userAgent === \"undefined\") {\n    if (typeof navigator === \"undefined\" || !navigator) {\n      return \"\";\n    }\n    userAgent = navigator.userAgent || \"\";\n  }\n  return userAgent.toLowerCase();\n}\nfunction execRegExp(pattern, text) {\n  try {\n    return new RegExp(pattern, \"g\").exec(text);\n  } catch (e) {\n    return null;\n  }\n}\nfunction hasUserAgentData() {\n  if (typeof navigator === \"undefined\" || !navigator || !navigator.userAgentData) {\n    return false;\n  }\n  var userAgentData = navigator.userAgentData;\n  var brands = userAgentData.brands || userAgentData.uaList;\n  return !!(brands && brands.length);\n}\nfunction findVersion(versionTest, userAgent) {\n  var result = execRegExp(\"(\" + versionTest + \")((?:\\\\/|\\\\s|:)([0-9|\\\\.|_]+))\", userAgent);\n  return result ? result[3] : \"\";\n}\nfunction convertVersion(text) {\n  return text.replace(/_/g, \".\");\n}\nfunction findPreset(presets, userAgent) {\n  var userPreset = null;\n  var version = \"-1\";\n  some(presets, function (preset) {\n    var result = execRegExp(\"(\" + preset.test + \")((?:\\\\/|\\\\s|:)([0-9|\\\\.|_]+))?\", userAgent);\n    if (!result || preset.brand) {\n      return false;\n    }\n    userPreset = preset;\n    version = result[3] || \"-1\";\n    if (preset.versionAlias) {\n      version = preset.versionAlias;\n    } else if (preset.versionTest) {\n      version = findVersion(preset.versionTest.toLowerCase(), userAgent) || version;\n    }\n    version = convertVersion(version);\n    return true;\n  });\n  return {\n    preset: userPreset,\n    version: version\n  };\n}\nfunction findPresetBrand(presets, brands) {\n  var brandInfo = {\n    brand: \"\",\n    version: \"-1\"\n  };\n  some(presets, function (preset) {\n    var result = findBrand(brands, preset);\n    if (!result) {\n      return false;\n    }\n    brandInfo.brand = preset.id;\n    brandInfo.version = preset.versionAlias || result.version;\n    return brandInfo.version !== \"-1\";\n  });\n  return brandInfo;\n}\nfunction findBrand(brands, preset) {\n  return find(brands, function (_a) {\n    var brand = _a.brand;\n    return execRegExp(\"\" + preset.test, brand.toLowerCase());\n  });\n}\nvar BROWSER_PRESETS = [{\n  test: \"phantomjs\",\n  id: \"phantomjs\"\n}, {\n  test: \"whale\",\n  id: \"whale\"\n}, {\n  test: \"edgios|edge|edg\",\n  id: \"edge\"\n}, {\n  test: \"msie|trident|windows phone\",\n  id: \"ie\",\n  versionTest: \"iemobile|msie|rv\"\n}, {\n  test: \"miuibrowser\",\n  id: \"miui browser\"\n}, {\n  test: \"samsungbrowser\",\n  id: \"samsung internet\"\n}, {\n  test: \"samsung\",\n  id: \"samsung internet\",\n  versionTest: \"version\"\n}, {\n  test: \"chrome|crios\",\n  id: \"chrome\"\n}, {\n  test: \"firefox|fxios\",\n  id: \"firefox\"\n}, {\n  test: \"android\",\n  id: \"android browser\",\n  versionTest: \"version\"\n}, {\n  test: \"safari|iphone|ipad|ipod\",\n  id: \"safari\",\n  versionTest: \"version\"\n}]; // chromium's engine(blink) is based on applewebkit 537.36.\n\nvar CHROMIUM_PRESETS = [{\n  test: \"(?=.*applewebkit/(53[0-7]|5[0-2]|[0-4]))(?=.*\\\\schrome)\",\n  id: \"chrome\",\n  versionTest: \"chrome\"\n}, {\n  test: \"chromium\",\n  id: \"chrome\"\n}, {\n  test: \"whale\",\n  id: \"chrome\",\n  versionAlias: \"-1\",\n  brand: true\n}];\nvar WEBKIT_PRESETS = [{\n  test: \"applewebkit\",\n  id: \"webkit\",\n  versionTest: \"applewebkit|safari\"\n}];\nvar WEBVIEW_PRESETS = [{\n  test: \"(?=(iphone|ipad))(?!(.*version))\",\n  id: \"webview\"\n}, {\n  test: \"(?=(android|iphone|ipad))(?=.*(naver|daum|; wv))\",\n  id: \"webview\"\n}, {\n  // test webview\n  test: \"webview\",\n  id: \"webview\"\n}];\nvar OS_PRESETS = [{\n  test: \"windows phone\",\n  id: \"windows phone\"\n}, {\n  test: \"windows 2000\",\n  id: \"window\",\n  versionAlias: \"5.0\"\n}, {\n  test: \"windows nt\",\n  id: \"window\"\n}, {\n  test: \"win32|windows\",\n  id: \"window\"\n}, {\n  test: \"iphone|ipad|ipod\",\n  id: \"ios\",\n  versionTest: \"iphone os|cpu os\"\n}, {\n  test: \"macos|macintel|mac os x\",\n  id: \"mac\"\n}, {\n  test: \"android|linux armv81\",\n  id: \"android\"\n}, {\n  test: \"tizen\",\n  id: \"tizen\"\n}, {\n  test: \"webos|web0s\",\n  id: \"webos\"\n}];\nfunction isWebView(userAgent) {\n  return !!findPreset(WEBVIEW_PRESETS, userAgent).preset;\n}\nfunction getLegacyAgent(userAgent) {\n  var nextAgent = getUserAgentString(userAgent);\n  var isMobile = !!/mobi/g.exec(nextAgent);\n  var browser = {\n    name: \"unknown\",\n    version: \"-1\",\n    majorVersion: -1,\n    webview: isWebView(nextAgent),\n    chromium: false,\n    chromiumVersion: \"-1\",\n    webkit: false,\n    webkitVersion: \"-1\"\n  };\n  var os = {\n    name: \"unknown\",\n    version: \"-1\",\n    majorVersion: -1\n  };\n  var _a = findPreset(BROWSER_PRESETS, nextAgent),\n    browserPreset = _a.preset,\n    browserVersion = _a.version;\n  var _b = findPreset(OS_PRESETS, nextAgent),\n    osPreset = _b.preset,\n    osVersion = _b.version;\n  var chromiumPreset = findPreset(CHROMIUM_PRESETS, nextAgent);\n  browser.chromium = !!chromiumPreset.preset;\n  browser.chromiumVersion = chromiumPreset.version;\n  if (!browser.chromium) {\n    var webkitPreset = findPreset(WEBKIT_PRESETS, nextAgent);\n    browser.webkit = !!webkitPreset.preset;\n    browser.webkitVersion = webkitPreset.version;\n  }\n  if (osPreset) {\n    os.name = osPreset.id;\n    os.version = osVersion;\n    os.majorVersion = parseInt(osVersion, 10);\n  }\n  if (browserPreset) {\n    browser.name = browserPreset.id;\n    browser.version = browserVersion; // Early whale bugs\n\n    if (browser.webview && os.name === \"ios\" && browser.name !== \"safari\") {\n      browser.webview = false;\n    }\n  }\n  browser.majorVersion = parseInt(browser.version, 10);\n  return {\n    browser: browser,\n    os: os,\n    isMobile: isMobile,\n    isHints: false\n  };\n}\nfunction getClientHintsAgent(osData) {\n  var userAgentData = navigator.userAgentData;\n  var brands = (userAgentData.uaList || userAgentData.brands).slice();\n  var fullVersionList = osData && osData.fullVersionList;\n  var isMobile = userAgentData.mobile || false;\n  var firstBrand = brands[0];\n  var platform = (osData && osData.platform || userAgentData.platform || navigator.platform).toLowerCase();\n  var browser = {\n    name: firstBrand.brand,\n    version: firstBrand.version,\n    majorVersion: -1,\n    webkit: false,\n    webkitVersion: \"-1\",\n    chromium: false,\n    chromiumVersion: \"-1\",\n    webview: !!findPresetBrand(WEBVIEW_PRESETS, brands).brand || isWebView(getUserAgentString())\n  };\n  var os = {\n    name: \"unknown\",\n    version: \"-1\",\n    majorVersion: -1\n  };\n  browser.webkit = !browser.chromium && some(WEBKIT_PRESETS, function (preset) {\n    return findBrand(brands, preset);\n  });\n  var chromiumBrand = findPresetBrand(CHROMIUM_PRESETS, brands);\n  browser.chromium = !!chromiumBrand.brand;\n  browser.chromiumVersion = chromiumBrand.version;\n  if (!browser.chromium) {\n    var webkitBrand = findPresetBrand(WEBKIT_PRESETS, brands);\n    browser.webkit = !!webkitBrand.brand;\n    browser.webkitVersion = webkitBrand.version;\n  }\n  var platfomResult = find(OS_PRESETS, function (preset) {\n    return new RegExp(\"\" + preset.test, \"g\").exec(platform);\n  });\n  os.name = platfomResult ? platfomResult.id : \"\";\n  if (osData) {\n    os.version = osData.platformVersion;\n  }\n  if (fullVersionList && fullVersionList.length) {\n    var browserBrandByFullVersionList = findPresetBrand(BROWSER_PRESETS, fullVersionList);\n    browser.name = browserBrandByFullVersionList.brand || browser.name;\n    browser.version = browserBrandByFullVersionList.version || browser.version;\n  } else {\n    var browserBrand = findPresetBrand(BROWSER_PRESETS, brands);\n    browser.name = browserBrand.brand || browser.name;\n    browser.version = browserBrand.brand && osData ? osData.uaFullVersion : browserBrand.version;\n  }\n  if (browser.webkit) {\n    os.name = isMobile ? \"ios\" : \"mac\";\n  }\n  if (os.name === \"ios\" && browser.webview) {\n    browser.version = \"-1\";\n  }\n  os.version = convertVersion(os.version);\n  browser.version = convertVersion(browser.version);\n  os.majorVersion = parseInt(os.version, 10);\n  browser.majorVersion = parseInt(browser.version, 10);\n  return {\n    browser: browser,\n    os: os,\n    isMobile: isMobile,\n    isHints: true\n  };\n}\n\n/**\n * @namespace eg.agent\n */\n\n/**\n* Extracts accuate browser and operating system information from the user agent string or client hints.\n* @ko 유저 에이전트 문자열 또는 client hints에서 정확한 브라우저와 운영체제 정보를 추출한다.\n* @function eg.agent#getAccurateAgent\n* @param - Callback function to get the accuate agent <ko>정확한 에이전트를 가져오기 위한 callback 함수</ko>\n* @return - get the accuate agent promise. If Promise are not supported, null is returned. <ko> 정확한 에이전트 promise를 가져온다. Promise를 지원 하지 않는 경우, null을 반환한다. </ko>\n* @example\nimport { getAccurateAgent } from \"@egjs/agent\";\n// eg.agent.getAccurateAgent()\ngetAccurateAgent().then(agent => {\n   const { os, browser, isMobile } = agent;\n});\ngetAccurateAgent(agent => {\n    const { os, browser, isMobile } = agent;\n});\n*/\n\nfunction getAccurateAgent(callback) {\n  if (hasUserAgentData()) {\n    return navigator.userAgentData.getHighEntropyValues([\"architecture\", \"model\", \"platform\", \"platformVersion\", \"uaFullVersion\", \"fullVersionList\"]).then(function (info) {\n      var agentInfo = getClientHintsAgent(info);\n      callback && callback(agentInfo);\n      return agentInfo;\n    });\n  }\n  callback && callback(agent());\n  if (typeof Promise === \"undefined\" || !Promise) {\n    return null;\n  }\n  return Promise.resolve(agent());\n}\n/**\n * Extracts browser and operating system information from the user agent string.\n * @ko 유저 에이전트 문자열에서 브라우저와 운영체제 정보를 추출한다.\n * @function eg.agent#agent\n * @param - user agent string to parse <ko>파싱할 유저에이전트 문자열</ko>\n * @return - agent Info <ko> 에이전트 정보 </ko>\n * @example\nimport agent from \"@egjs/agent\";\n// eg.agent();\nconst { os, browser, isMobile } = agent();\n */\n\nfunction agent(userAgent) {\n  if (typeof userAgent === \"undefined\" && hasUserAgentData()) {\n    return getClientHintsAgent();\n  } else {\n    return getLegacyAgent(userAgent);\n  }\n}\nexport default agent;\nexport { getAccurateAgent, getLegacyAgent };","map":{"version":3,"mappings":"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","names":["some","arr","callback","length","i","find","getUserAgentString","agent","userAgent","navigator","toLowerCase","execRegExp","pattern","text","RegExp","exec","e","hasUserAgentData","userAgentData","brands","uaList","findVersion","versionTest","result","convertVersion","replace","findPreset","presets","userPreset","version","preset","test","brand","versionAlias","findPresetBrand","brandInfo","findBrand","id","_a","BROWSER_PRESETS","CHROMIUM_PRESETS","WEBKIT_PRESETS","WEBVIEW_PRESETS","OS_PRESETS","isWebView","getLegacyAgent","nextAgent","isMobile","browser","name","majorVersion","webview","chromium","chromiumVersion","webkit","webkitVersion","os","browserPreset","browserVersion","osPreset","osVersion","chromiumPreset","webkitPreset","parseInt","isHints","getClientHintsAgent","osData","fullVersionList","mobile","firstBrand","platform","chromiumBrand","webkitBrand","platfomResult","platformVersion","browserBrandByFullVersionList","browserBrand","uaFullVersion","getAccurateAgent","getHighEntropyValues","then","agentInfo","info","Promise","resolve"],"sources":["C:\\Users\\SSAFY\\Desktop\\S08P12C106\\최유경\\testing-app\\node_modules\\@egjs\\agent\\src\\utils.ts","C:\\Users\\SSAFY\\Desktop\\S08P12C106\\최유경\\testing-app\\node_modules\\@egjs\\agent\\src\\presets.ts","C:\\Users\\SSAFY\\Desktop\\S08P12C106\\최유경\\testing-app\\node_modules\\@egjs\\agent\\src\\userAgent.ts","C:\\Users\\SSAFY\\Desktop\\S08P12C106\\최유경\\testing-app\\node_modules\\@egjs\\agent\\src\\userAgentData.ts","C:\\Users\\SSAFY\\Desktop\\S08P12C106\\최유경\\testing-app\\node_modules\\@egjs\\agent\\src\\agent.ts"],"sourcesContent":["import { PresetInfo, PresetResult, NavigatorUABrandVersion } from \"./types\";\n\nexport function some<T>(arr: T[], callback: (value: T, index: number) => any): boolean {\n    const length = arr.length;\n\n    for (let i = 0; i < length; ++i) {\n        if (callback(arr[i], i)) {\n            return true;\n        }\n    }\n\n    return false;\n}\nexport function find<T>(arr: T[], callback: (value: T, index: number) => any): T | null {\n    const length = arr.length;\n\n    for (let i = 0; i < length; ++i) {\n        if (callback(arr[i], i)) {\n            return arr[i];\n        }\n    }\n    return null;\n}\nexport function getUserAgentString(agent?: string): string {\n    let userAgent = agent;\n    if (typeof userAgent === \"undefined\") {\n        if (typeof navigator === \"undefined\" || !navigator) {\n            return \"\";\n        }\n\n        userAgent = navigator.userAgent || \"\";\n    }\n    return userAgent!.toLowerCase();\n}\nexport function execRegExp(pattern: string, text: string): RegExpExecArray | null {\n    try {\n        return new RegExp(pattern, \"g\").exec(text);\n    } catch (e) {\n        return null;\n    }\n}\nexport function hasUserAgentData(): boolean {\n    if (typeof navigator === \"undefined\" || !navigator || !navigator.userAgentData) {\n        return false;\n    }\n    const userAgentData = navigator.userAgentData;\n    const brands = (userAgentData.brands || userAgentData.uaList);\n\n    return !!(brands && brands.length);\n}\nexport function findVersion(versionTest: string, userAgent: string): string {\n    const result = execRegExp(`(${versionTest})((?:\\\\/|\\\\s|:)([0-9|\\\\.|_]+))`, userAgent);\n\n    return result ? result[3] : \"\";\n}\nexport function convertVersion(text: string): string {\n    return text.replace(/_/g, \".\");\n}\nexport function findPreset(presets: PresetInfo[], userAgent: string): PresetResult {\n    let userPreset: PresetInfo | null = null;\n    let version = \"-1\";\n\n    some(presets, preset => {\n        const result = execRegExp(`(${preset.test})((?:\\\\/|\\\\s|:)([0-9|\\\\.|_]+))?`, userAgent);\n\n        if (!result || preset.brand) {\n            return false;\n        }\n        userPreset = preset;\n        version = result[3] || \"-1\";\n\n        if (preset.versionAlias) {\n            version = preset.versionAlias;\n        } else if (preset.versionTest) {\n            version = findVersion(preset.versionTest.toLowerCase(), userAgent) || version;\n        }\n        version = convertVersion(version);\n        return true;\n    });\n\n    return {\n        preset: userPreset,\n        version,\n    };\n}\nexport function findPresetBrand(presets: PresetInfo[], brands: NavigatorUABrandVersion[]): NavigatorUABrandVersion {\n    const brandInfo = {\n        brand: \"\",\n        version: \"-1\",\n    };\n    some(presets, preset => {\n        const result = findBrand(brands, preset);\n\n        if (!result) {\n            return false;\n        }\n\n        brandInfo.brand = preset.id;\n        brandInfo.version = preset.versionAlias || result.version;\n\n        return brandInfo.version !== \"-1\";\n    });\n\n    return brandInfo;\n}\nexport function findBrand(brands: NavigatorUABrandVersion[], preset: PresetInfo): NavigatorUABrandVersion | null {\n    return find(brands, ({ brand }) => {\n        return execRegExp(`${preset.test}`, brand.toLowerCase());\n    });\n}\n","import { PresetInfo } from \"./types\";\n\nexport const BROWSER_PRESETS: PresetInfo[] = [\n    {\n        test: \"phantomjs\",\n        id: \"phantomjs\",\n    },\n    {\n        test: \"whale\",\n        id: \"whale\",\n    }, {\n        test: \"edgios|edge|edg\",\n        id: \"edge\",\n    },\n    {\n        test: \"msie|trident|windows phone\",\n        id: \"ie\",\n        versionTest: \"iemobile|msie|rv\",\n    },\n    {\n        test: \"miuibrowser\",\n        id: \"miui browser\",\n    },\n    {\n        test: \"samsungbrowser\",\n        id: \"samsung internet\",\n    },\n    {\n        test: \"samsung\",\n        id: \"samsung internet\",\n        versionTest: \"version\",\n    },\n    {\n        test: \"chrome|crios\",\n        id: \"chrome\",\n    },\n    {\n        test: \"firefox|fxios\",\n        id: \"firefox\",\n    },\n    {\n        test: \"android\",\n        id: \"android browser\",\n        versionTest: \"version\",\n    },\n    {\n        test: \"safari|iphone|ipad|ipod\",\n        id: \"safari\",\n        versionTest: \"version\",\n    },\n];\n\n// chromium's engine(blink) is based on applewebkit 537.36.\nexport const CHROMIUM_PRESETS: PresetInfo[] = [\n    {\n        test: \"(?=.*applewebkit/(53[0-7]|5[0-2]|[0-4]))(?=.*\\\\schrome)\",\n        id: \"chrome\",\n        versionTest: \"chrome\",\n    },\n    {\n        test: \"chromium\",\n        id: \"chrome\",\n    },\n    {\n        test: \"whale\",\n        id: \"chrome\",\n        versionAlias: \"-1\",\n        brand: true,\n    },\n];\nexport const WEBKIT_PRESETS: PresetInfo[] = [\n    {\n        test: \"applewebkit\",\n        id: \"webkit\",\n        versionTest: \"applewebkit|safari\",\n    },\n];\nexport const WEBVIEW_PRESETS: PresetInfo[] = [\n    {\n        test: \"(?=(iphone|ipad))(?!(.*version))\",\n        id: \"webview\",\n    },\n    {\n        test: \"(?=(android|iphone|ipad))(?=.*(naver|daum|; wv))\",\n        id: \"webview\",\n    },\n    {\n        // test webview\n        test: \"webview\",\n        id: \"webview\",\n    },\n];\nexport const OS_PRESETS: PresetInfo[] = [\n    {\n        test: \"windows phone\",\n        id: \"windows phone\",\n    },\n    {\n        test: \"windows 2000\",\n        id: \"window\",\n        versionAlias: \"5.0\",\n    },\n    {\n        test: \"windows nt\",\n        id: \"window\",\n    },\n    {\n        test: \"win32|windows\",\n        id: \"window\",\n    },\n    {\n        test: \"iphone|ipad|ipod\",\n        id: \"ios\",\n        versionTest: \"iphone os|cpu os\",\n    },\n    {\n        test: \"macos|macintel|mac os x\",\n        id: \"mac\",\n    },\n    {\n        test: \"android|linux armv81\",\n        id: \"android\",\n    },\n    {\n        test: \"tizen\",\n        id: \"tizen\",\n    },\n    {\n        test: \"webos|web0s\",\n        id: \"webos\",\n    },\n    // {\n    //     test: \"linux|ubuntu|debian\",\n    //     id: \"linux\",\n    //     versionAlias: \"-1\",\n    // },\n];\n","import { AgentInfo } from \"./types\";\nimport { getUserAgentString, findPreset } from \"./utils\";\nimport { WEBVIEW_PRESETS, CHROMIUM_PRESETS, BROWSER_PRESETS, OS_PRESETS, WEBKIT_PRESETS } from \"./presets\";\n\nexport function isWebView(userAgent: string): boolean {\n    return !!findPreset(WEBVIEW_PRESETS, userAgent).preset;\n}\n\nexport function getLegacyAgent(userAgent?: string): AgentInfo {\n    const nextAgent = getUserAgentString(userAgent);\n    const isMobile = !!/mobi/g.exec(nextAgent);\n    const browser = {\n        name: \"unknown\",\n        version: \"-1\",\n        majorVersion: -1,\n        webview: isWebView(nextAgent),\n        chromium: false,\n        chromiumVersion: \"-1\",\n        webkit: false,\n        webkitVersion: \"-1\",\n    };\n    const os = {\n        name: \"unknown\",\n        version: \"-1\",\n        majorVersion: -1,\n    };\n    const {\n        preset: browserPreset,\n        version: browserVersion,\n    } = findPreset(BROWSER_PRESETS, nextAgent);\n\n    const {\n        preset: osPreset,\n        version: osVersion,\n    } = findPreset(OS_PRESETS, nextAgent);\n\n    const chromiumPreset = findPreset(CHROMIUM_PRESETS, nextAgent);\n\n    browser.chromium = !!chromiumPreset.preset;\n    browser.chromiumVersion = chromiumPreset.version;\n    if (!browser.chromium) {\n        const webkitPreset = findPreset(WEBKIT_PRESETS, nextAgent);\n\n        browser.webkit = !!webkitPreset.preset;\n        browser.webkitVersion = webkitPreset.version;\n    }\n\n    if (osPreset) {\n        os.name = osPreset.id;\n        os.version = osVersion;\n        os.majorVersion = parseInt(osVersion, 10);\n    }\n    if (browserPreset) {\n        browser.name = browserPreset.id;\n        browser.version = browserVersion;\n\n        // Early whale bugs\n        if (browser.webview && os.name === \"ios\" && browser.name !== \"safari\") {\n            browser.webview = false;\n        }\n    }\n    browser.majorVersion = parseInt(browser.version, 10);\n\n    return {\n        browser,\n        os,\n        isMobile,\n        isHints: false,\n    };\n}\n","import { UADataValues, AgentInfo, AgentBrowserInfo, AgentOSInfo } from \"./types\";\nimport { some, find, findBrand, convertVersion, findPresetBrand, getUserAgentString } from \"./utils\";\nimport { BROWSER_PRESETS, OS_PRESETS, CHROMIUM_PRESETS, WEBKIT_PRESETS, WEBVIEW_PRESETS } from \"./presets\";\nimport { isWebView } from \"./userAgent\";\n\nexport function getClientHintsAgent(osData?: UADataValues): AgentInfo {\n    const userAgentData = navigator.userAgentData;\n    const brands = [...(userAgentData.uaList || userAgentData.brands)!];\n    const fullVersionList = osData && osData.fullVersionList;\n    const isMobile = userAgentData.mobile || false;\n    const firstBrand = brands[0];\n    const platform = (osData && osData.platform || userAgentData.platform || navigator.platform).toLowerCase();\n    const browser: AgentBrowserInfo = {\n        name: firstBrand.brand,\n        version: firstBrand.version,\n        majorVersion: -1,\n        webkit: false,\n        webkitVersion: \"-1\",\n        chromium: false,\n        chromiumVersion: \"-1\",\n        webview: !!findPresetBrand(WEBVIEW_PRESETS, brands).brand || isWebView(getUserAgentString()),\n    };\n    const os: AgentOSInfo = {\n        name: \"unknown\",\n        version: \"-1\",\n        majorVersion: -1,\n    };\n    browser.webkit = !browser.chromium && some(WEBKIT_PRESETS, preset => findBrand(brands, preset));\n\n    const chromiumBrand = findPresetBrand(CHROMIUM_PRESETS, brands);\n\n    browser.chromium = !!chromiumBrand.brand;\n    browser.chromiumVersion = chromiumBrand.version;\n    if (!browser.chromium) {\n        const webkitBrand = findPresetBrand(WEBKIT_PRESETS, brands);\n\n        browser.webkit = !!webkitBrand.brand;\n        browser.webkitVersion = webkitBrand.version;\n    }\n\n    const platfomResult = find(OS_PRESETS, preset => {\n        return new RegExp(`${preset.test}`, \"g\").exec(platform);\n    });\n    os.name = platfomResult ? platfomResult.id : \"\";\n\n    if (osData) {\n        os.version = osData.platformVersion;\n    }\n    if (fullVersionList && fullVersionList.length) {\n        const browserBrandByFullVersionList = findPresetBrand(BROWSER_PRESETS, fullVersionList);\n\n        browser.name = browserBrandByFullVersionList.brand || browser.name;\n        browser.version = browserBrandByFullVersionList.version || browser.version;\n    } else {\n        const browserBrand = findPresetBrand(BROWSER_PRESETS, brands);\n\n        browser.name = browserBrand.brand || browser.name;\n        browser.version = browserBrand.brand && osData ? osData.uaFullVersion : browserBrand.version;\n    }\n    if (browser.webkit) {\n        os.name = isMobile ? \"ios\" : \"mac\";\n    }\n    if (os.name === \"ios\" && browser.webview) {\n        browser.version = \"-1\";\n    }\n\n    os.version = convertVersion(os.version);\n    browser.version = convertVersion(browser.version);\n    os.majorVersion = parseInt(os.version, 10);\n    browser.majorVersion = parseInt(browser.version, 10);\n\n    return {\n        browser,\n        os,\n        isMobile,\n        isHints: true,\n    };\n}\n","import { AgentInfo } from \"./types\";\nimport { hasUserAgentData } from \"./utils\";\nimport { getClientHintsAgent } from \"./userAgentData\";\nimport { getLegacyAgent } from \"./userAgent\";\n\n/**\n * @namespace eg.agent\n */\n\n/**\n* Extracts accuate browser and operating system information from the user agent string or client hints.\n* @ko 유저 에이전트 문자열 또는 client hints에서 정확한 브라우저와 운영체제 정보를 추출한다.\n* @function eg.agent#getAccurateAgent\n* @param - Callback function to get the accuate agent <ko>정확한 에이전트를 가져오기 위한 callback 함수</ko>\n* @return - get the accuate agent promise. If Promise are not supported, null is returned. <ko> 정확한 에이전트 promise를 가져온다. Promise를 지원 하지 않는 경우, null을 반환한다. </ko>\n* @example\nimport { getAccurateAgent } from \"@egjs/agent\";\n// eg.agent.getAccurateAgent()\ngetAccurateAgent().then(agent => {\n   const { os, browser, isMobile } = agent;\n});\ngetAccurateAgent(agent => {\n    const { os, browser, isMobile } = agent;\n});\n*/\nexport function getAccurateAgent(callback?: (result: AgentInfo) => void): Promise<AgentInfo> | null {\n    if (hasUserAgentData()) {\n        return navigator.userAgentData.getHighEntropyValues([\n            \"architecture\",\n            \"model\",\n            \"platform\",\n            \"platformVersion\",\n            \"uaFullVersion\",\n            \"fullVersionList\",\n        ]).then(info => {\n            const agentInfo = getClientHintsAgent(info);\n\n            callback && callback(agentInfo);\n            return agentInfo;\n        });\n    }\n    callback && callback(agent());\n    if (typeof Promise === \"undefined\" || !Promise) {\n        return null;\n    }\n    return Promise.resolve(agent());\n}\n\n\n\n/**\n * Extracts browser and operating system information from the user agent string.\n * @ko 유저 에이전트 문자열에서 브라우저와 운영체제 정보를 추출한다.\n * @function eg.agent#agent\n * @param - user agent string to parse <ko>파싱할 유저에이전트 문자열</ko>\n * @return - agent Info <ko> 에이전트 정보 </ko>\n * @example\nimport agent from \"@egjs/agent\";\n// eg.agent();\nconst { os, browser, isMobile } = agent();\n */\nfunction agent(userAgent?: string): AgentInfo {\n    if (typeof userAgent === \"undefined\" && hasUserAgentData()) {\n        return getClientHintsAgent();\n    } else {\n        return getLegacyAgent(userAgent);\n    }\n}\nexport { getLegacyAgent };\n\nexport default agent;\n\nexport * from \"./types\";\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}