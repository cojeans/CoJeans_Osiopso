{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _LazyPoint = require('./LazyPoint');\nvar _LazyPoint2 = _interopRequireDefault(_LazyPoint);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar RADIUS_DEFAULT = 30;\nvar LazyBrush = function () {\n  /**\n   * constructor\n   *\n   * @param {object} settings\n   * @param {number} settings.radius The radius for the lazy area\n   * @param {boolean} settings.enabled\n   */\n  function LazyBrush() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$radius = _ref.radius,\n      radius = _ref$radius === undefined ? RADIUS_DEFAULT : _ref$radius,\n      _ref$enabled = _ref.enabled,\n      enabled = _ref$enabled === undefined ? true : _ref$enabled,\n      _ref$initialPoint = _ref.initialPoint,\n      initialPoint = _ref$initialPoint === undefined ? {\n        x: 0,\n        y: 0\n      } : _ref$initialPoint;\n    _classCallCheck(this, LazyBrush);\n    this.radius = radius;\n    this._isEnabled = enabled;\n    this.pointer = new _LazyPoint2.default(initialPoint.x, initialPoint.y);\n    this.brush = new _LazyPoint2.default(initialPoint.x, initialPoint.y);\n    this.angle = 0;\n    this.distance = 0;\n    this._hasMoved = false;\n  }\n\n  /**\n   * Enable lazy brush calculations.\n   *\n   */\n\n  _createClass(LazyBrush, [{\n    key: 'enable',\n    value: function enable() {\n      this._isEnabled = true;\n    }\n\n    /**\n     * Disable lazy brush calculations.\n     *\n     */\n  }, {\n    key: 'disable',\n    value: function disable() {\n      this._isEnabled = false;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n  }, {\n    key: 'isEnabled',\n    value: function isEnabled() {\n      return this._isEnabled;\n    }\n\n    /**\n     * Update the radius\n     *\n     * @param {number} radius\n     */\n  }, {\n    key: 'setRadius',\n    value: function setRadius(radius) {\n      this.radius = radius;\n    }\n\n    /**\n     * Return the current radius\n     *\n     * @returns {number}\n     */\n  }, {\n    key: 'getRadius',\n    value: function getRadius() {\n      return this.radius;\n    }\n\n    /**\n     * Return the brush coordinates as a simple object\n     *\n     * @returns {object}\n     */\n  }, {\n    key: 'getBrushCoordinates',\n    value: function getBrushCoordinates() {\n      return this.brush.toObject();\n    }\n\n    /**\n     * Return the pointer coordinates as a simple object\n     *\n     * @returns {object}\n     */\n  }, {\n    key: 'getPointerCoordinates',\n    value: function getPointerCoordinates() {\n      return this.pointer.toObject();\n    }\n\n    /**\n     * Return the brush as a LazyPoint\n     *\n     * @returns {LazyPoint}\n     */\n  }, {\n    key: 'getBrush',\n    value: function getBrush() {\n      return this.brush;\n    }\n\n    /**\n     * Return the pointer as a LazyPoint\n     *\n     * @returns {LazyPoint}\n     */\n  }, {\n    key: 'getPointer',\n    value: function getPointer() {\n      return this.pointer;\n    }\n\n    /**\n     * Return the angle between pointer and brush\n     *\n     * @returns {number} Angle in radians\n     */\n  }, {\n    key: 'getAngle',\n    value: function getAngle() {\n      return this.angle;\n    }\n\n    /**\n     * Return the distance between pointer and brush\n     *\n     * @returns {number} Distance in pixels\n     */\n  }, {\n    key: 'getDistance',\n    value: function getDistance() {\n      return this.distance;\n    }\n\n    /**\n     * Return if the previous update has moved the brush.\n     *\n     * @returns {boolean} Whether the brush moved previously.\n     */\n  }, {\n    key: 'brushHasMoved',\n    value: function brushHasMoved() {\n      return this._hasMoved;\n    }\n\n    /**\n     * Updates the pointer point and calculates the new brush point.\n     *\n     * @param {Point} newPointerPoint\n     * @param {Object} options\n     * @param {Boolean} options.both Force update pointer and brush\n     * @returns {Boolean} Whether any of the two points changed\n     */\n  }, {\n    key: 'update',\n    value: function update(newPointerPoint) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref2$both = _ref2.both,\n        both = _ref2$both === undefined ? false : _ref2$both;\n      this._hasMoved = false;\n      if (this.pointer.equalsTo(newPointerPoint) && !both) {\n        return false;\n      }\n      this.pointer.update(newPointerPoint);\n      if (both) {\n        this._hasMoved = true;\n        this.brush.update(newPointerPoint);\n        return true;\n      }\n      if (this._isEnabled) {\n        this.distance = this.pointer.getDistanceTo(this.brush);\n        this.angle = this.pointer.getAngleTo(this.brush);\n        if (this.distance > this.radius) {\n          this.brush.moveByAngle(this.angle, this.distance - this.radius);\n          this._hasMoved = true;\n        }\n      } else {\n        this.distance = 0;\n        this.angle = 0;\n        this.brush.update(newPointerPoint);\n        this._hasMoved = true;\n      }\n      return true;\n    }\n  }]);\n  return LazyBrush;\n}();\nexports.default = LazyBrush;","map":{"version":3,"names":["Object","defineProperty","exports","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_LazyPoint","require","_LazyPoint2","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","TypeError","RADIUS_DEFAULT","LazyBrush","_ref","arguments","undefined","_ref$radius","radius","_ref$enabled","enabled","_ref$initialPoint","initialPoint","x","y","_isEnabled","pointer","brush","angle","distance","_hasMoved","enable","disable","isEnabled","setRadius","getRadius","getBrushCoordinates","toObject","getPointerCoordinates","getBrush","getPointer","getAngle","getDistance","brushHasMoved","update","newPointerPoint","_ref2","_ref2$both","both","equalsTo","getDistanceTo","getAngleTo","moveByAngle"],"sources":["C:/Users/SSAFY/Desktop/S08P12C106/최유경/testing-app/node_modules/lazy-brush/lib/LazyBrush.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _LazyPoint = require('./LazyPoint');\n\nvar _LazyPoint2 = _interopRequireDefault(_LazyPoint);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar RADIUS_DEFAULT = 30;\n\nvar LazyBrush = function () {\n  /**\n   * constructor\n   *\n   * @param {object} settings\n   * @param {number} settings.radius The radius for the lazy area\n   * @param {boolean} settings.enabled\n   */\n  function LazyBrush() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$radius = _ref.radius,\n        radius = _ref$radius === undefined ? RADIUS_DEFAULT : _ref$radius,\n        _ref$enabled = _ref.enabled,\n        enabled = _ref$enabled === undefined ? true : _ref$enabled,\n        _ref$initialPoint = _ref.initialPoint,\n        initialPoint = _ref$initialPoint === undefined ? { x: 0, y: 0 } : _ref$initialPoint;\n\n    _classCallCheck(this, LazyBrush);\n\n    this.radius = radius;\n    this._isEnabled = enabled;\n\n    this.pointer = new _LazyPoint2.default(initialPoint.x, initialPoint.y);\n    this.brush = new _LazyPoint2.default(initialPoint.x, initialPoint.y);\n\n    this.angle = 0;\n    this.distance = 0;\n    this._hasMoved = false;\n  }\n\n  /**\n   * Enable lazy brush calculations.\n   *\n   */\n\n\n  _createClass(LazyBrush, [{\n    key: 'enable',\n    value: function enable() {\n      this._isEnabled = true;\n    }\n\n    /**\n     * Disable lazy brush calculations.\n     *\n     */\n\n  }, {\n    key: 'disable',\n    value: function disable() {\n      this._isEnabled = false;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'isEnabled',\n    value: function isEnabled() {\n      return this._isEnabled;\n    }\n\n    /**\n     * Update the radius\n     *\n     * @param {number} radius\n     */\n\n  }, {\n    key: 'setRadius',\n    value: function setRadius(radius) {\n      this.radius = radius;\n    }\n\n    /**\n     * Return the current radius\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: 'getRadius',\n    value: function getRadius() {\n      return this.radius;\n    }\n\n    /**\n     * Return the brush coordinates as a simple object\n     *\n     * @returns {object}\n     */\n\n  }, {\n    key: 'getBrushCoordinates',\n    value: function getBrushCoordinates() {\n      return this.brush.toObject();\n    }\n\n    /**\n     * Return the pointer coordinates as a simple object\n     *\n     * @returns {object}\n     */\n\n  }, {\n    key: 'getPointerCoordinates',\n    value: function getPointerCoordinates() {\n      return this.pointer.toObject();\n    }\n\n    /**\n     * Return the brush as a LazyPoint\n     *\n     * @returns {LazyPoint}\n     */\n\n  }, {\n    key: 'getBrush',\n    value: function getBrush() {\n      return this.brush;\n    }\n\n    /**\n     * Return the pointer as a LazyPoint\n     *\n     * @returns {LazyPoint}\n     */\n\n  }, {\n    key: 'getPointer',\n    value: function getPointer() {\n      return this.pointer;\n    }\n\n    /**\n     * Return the angle between pointer and brush\n     *\n     * @returns {number} Angle in radians\n     */\n\n  }, {\n    key: 'getAngle',\n    value: function getAngle() {\n      return this.angle;\n    }\n\n    /**\n     * Return the distance between pointer and brush\n     *\n     * @returns {number} Distance in pixels\n     */\n\n  }, {\n    key: 'getDistance',\n    value: function getDistance() {\n      return this.distance;\n    }\n\n    /**\n     * Return if the previous update has moved the brush.\n     *\n     * @returns {boolean} Whether the brush moved previously.\n     */\n\n  }, {\n    key: 'brushHasMoved',\n    value: function brushHasMoved() {\n      return this._hasMoved;\n    }\n\n    /**\n     * Updates the pointer point and calculates the new brush point.\n     *\n     * @param {Point} newPointerPoint\n     * @param {Object} options\n     * @param {Boolean} options.both Force update pointer and brush\n     * @returns {Boolean} Whether any of the two points changed\n     */\n\n  }, {\n    key: 'update',\n    value: function update(newPointerPoint) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$both = _ref2.both,\n          both = _ref2$both === undefined ? false : _ref2$both;\n\n      this._hasMoved = false;\n      if (this.pointer.equalsTo(newPointerPoint) && !both) {\n        return false;\n      }\n\n      this.pointer.update(newPointerPoint);\n\n      if (both) {\n        this._hasMoved = true;\n        this.brush.update(newPointerPoint);\n        return true;\n      }\n\n      if (this._isEnabled) {\n        this.distance = this.pointer.getDistanceTo(this.brush);\n        this.angle = this.pointer.getAngleTo(this.brush);\n\n        if (this.distance > this.radius) {\n          this.brush.moveByAngle(this.angle, this.distance - this.radius);\n          this._hasMoved = true;\n        }\n      } else {\n        this.distance = 0;\n        this.angle = 0;\n        this.brush.update(newPointerPoint);\n        this._hasMoved = true;\n      }\n\n      return true;\n    }\n  }]);\n\n  return LazyBrush;\n}();\n\nexports.default = LazyBrush;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}