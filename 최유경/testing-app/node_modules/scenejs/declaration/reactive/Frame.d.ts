import { ReactiveAdapter, ReactiveObject, Observer } from "@cfcs/core";
import Frame from "../Frame";
import { ReactiveMethods } from "./reactive";
export declare const FRAME_METHODS: string[];
/**
 * @typedef
 * @memberof Reactive
 */
export declare type FrameReactiveData = Observer<Frame> | Frame | string | Record<string, any> | (() => (Observer<Frame> | Frame | string | Record<string, any>));
export declare type FrameReactiveMethods = ReactiveMethods<Frame>;
/**
 * @typedef
 * @memberof Reactive
 */
export interface FrameReactiveState {
    /**
     * Returns the frame's cssText.
     */
    cssText: string;
    /**
     * Returns the frame's css object (kebab-case).
     */
    cssObject: Record<string, any>;
    /**
     * Returns an object in camel case type of frame. It can be used in React.
     */
    camelCasedCSSObject: Record<string, any>;
}
export declare type FrameReactiveInstance = ReactiveObject<FrameReactiveState> & FrameReactiveMethods & {
    getFrameObserver(): Observer<Frame>;
    onUpdate(): void;
};
export declare const FRAME_REACTIVE: ReactiveAdapter<FrameReactiveInstance, FrameReactiveState, keyof FrameReactiveMethods, FrameReactiveData, {}>;
