import Component from "@egjs/component";
interface EmitterEvents<Value> {
    update: (value: Value, prevValue: Value) => void;
}
/**
 * @memberof Reactive
 */
export declare class Observer<Value = any> {
    protected _current: Value;
    protected _emitter: Component<EmitterEvents<Value>>;
    /**
     *
     */
    constructor(value?: Value);
    get current(): Value;
    set current(value: Value);
    subscribe(callback: (value: Value, prevValue: Value) => void): this;
    unsubscribe(callback?: (value: Value, prevValue: Value) => void): this;
    protected _setCurrent(value: Value): void;
    toString(): string;
    valueOf(): Value;
}
export {};
