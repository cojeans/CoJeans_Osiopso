export declare function injectReactiveSubscribe(object: Record<string, any>): void;
export declare function ReactiveSubscribe(Constructor: any): void;
/**
 * @typedef
 */
export interface ReactiveSubscribe<State extends Record<string, any>> {
    /**
     * When the value of the property changes, the callback function is called.
     */
    subscribe<Name extends keyof State = keyof State>(name: Name, callback: (value: State[Name]) => void): void;
    /**
     * Unregister the callback function corresponding to the property.
     */
    unsubscribe<Name extends keyof State = keyof State>(name?: Name, callback?: (value: State[Name]) => void): void;
}
